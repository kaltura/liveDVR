# ===================================================================================================
#                           _  __     _ _
#                          | |/ /__ _| | |_ _  _ _ _ __ _
#                          | ' </ _` | |  _| || | '_/ _` |
#                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
#
# This file is part of the Kaltura Collaborative Media Suite which allows users
# to do with audio, video, and animation what Wiki platfroms allow them to do with
# text.
#
# Copyright (C) 2006-2016  Kaltura Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.
#
# @ignore
# ===================================================================================================
# @package Kaltura
# @subpackage Client
from ..Base import *

API_VERSION = '3.3.0'

########## enums ##########
# @package Kaltura
# @subpackage Client
class KalturaAppTokenStatus(object):
    DISABLED = 1
    ACTIVE = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAppearInListType(object):
    PARTNER_ONLY = 1
    CATEGORY_MEMBERS_ONLY = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetParamsDeletePolicy(object):
    KEEP = 0
    DELETE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOrigin(object):
    CONVERT = 0
    INGEST = 1
    CONVERT_WHEN_MISSING = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBatchJobErrorTypes(object):
    APP = 0
    RUNTIME = 1
    HTTP = 2
    CURL = 3
    KALTURA_API = 4
    KALTURA_CLIENT = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBatchJobStatus(object):
    PENDING = 0
    QUEUED = 1
    PROCESSING = 2
    PROCESSED = 3
    MOVEFILE = 4
    FINISHED = 5
    FAILED = 6
    ABORTED = 7
    ALMOST_DONE = 8
    RETRY = 9
    FATAL = 10
    DONT_PROCESS = 11
    FINISHED_PARTIALLY = 12

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBitRateMode(object):
    CBR = 1
    VBR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryStatus(object):
    PENDING = 1
    ACTIVE = 2
    DELETED = 3
    REJECTED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryStatus(object):
    UPDATING = 1
    ACTIVE = 2
    DELETED = 3
    PURGED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryUserPermissionLevel(object):
    MANAGER = 0
    MODERATOR = 1
    CONTRIBUTOR = 2
    MEMBER = 3
    NONE = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryUserStatus(object):
    ACTIVE = 1
    PENDING = 2
    NOT_ACTIVE = 3
    DELETED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCommercialUseType(object):
    NON_COMMERCIAL_USE = 0
    COMMERCIAL_USE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContributionPolicyType(object):
    ALL = 1
    MEMBERS_WITH_CONTRIBUTION_PERMISSION = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandStatus(object):
    PENDING = 1
    HANDLED = 2
    DONE = 3
    FAILED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandTargetType(object):
    DATA_CENTER = 1
    SCHEDULER = 2
    JOB_TYPE = 3
    JOB = 4
    BATCH = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandType(object):
    KILL = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCountryRestrictionType(object):
    RESTRICT_COUNTRY_LIST = 0
    ALLOW_COUNTRY_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDVRStatus(object):
    DISABLED = 0
    ENABLED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryStatus(object):
    ACTIVE = 0
    DELETED = 1
    STAGING_IN = 2
    STAGING_OUT = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDirectoryRestrictionType(object):
    DONT_DISPLAY = 0
    DISPLAY_WITH_LINK = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEditorType(object):
    SIMPLE = 1
    ADVANCED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEmailIngestionProfileStatus(object):
    INACTIVE = 0
    ACTIVE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryModerationStatus(object):
    PENDING_MODERATION = 1
    APPROVED = 2
    REJECTED = 3
    FLAGGED_FOR_REVIEW = 5
    AUTO_APPROVED = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeStatus(object):
    STOPPED = 0
    PLAYABLE = 1
    BROADCASTING = 2
    AUTHENTICATED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFeatureStatusType(object):
    LOCK_CATEGORY = 1
    CATEGORY = 2
    CATEGORY_ENTRY = 3
    ENTRY = 4
    CATEGORY_USER = 5
    USER = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetStatus(object):
    ERROR = -1
    QUEUED = 0
    CONVERTING = 1
    READY = 2
    DELETED = 3
    NOT_APPLICABLE = 4
    TEMP = 5
    WAIT_FOR_CONVERT = 6
    IMPORTING = 7
    VALIDATING = 8
    EXPORTING = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFlavorReadyBehaviorType(object):
    NO_IMPACT = 0
    INHERIT_FLAVOR_PARAMS = 0
    REQUIRED = 1
    OPTIONAL = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGender(object):
    UNKNOWN = 0
    MALE = 1
    FEMALE = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGroupUserStatus(object):
    ACTIVE = 0
    DELETED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaInheritanceType(object):
    INHERIT = 1
    MANUAL = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaIpAddressRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLicenseType(object):
    UNKNOWN = -1
    NONE = 0
    COPYRIGHTED = 1
    PUBLIC_DOMAIN = 2
    CREATIVECOMMONS_ATTRIBUTION = 3
    CREATIVECOMMONS_ATTRIBUTION_SHARE_ALIKE = 4
    CREATIVECOMMONS_ATTRIBUTION_NO_DERIVATIVES = 5
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL = 6
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_SHARE_ALIKE = 7
    CREATIVECOMMONS_ATTRIBUTION_NON_COMMERCIAL_NO_DERIVATIVES = 8
    GFDL = 9
    GPL = 10
    AFFERO_GPL = 11
    LGPL = 12
    BSD = 13
    APACHE = 14
    MOZILLA = 15

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLimitFlavorsRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLivePublishStatus(object):
    DISABLED = 0
    ENABLED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveReportExportType(object):
    PARTNER_TOTAL_ALL = 1
    PARTNER_TOTAL_LIVE = 2
    ENTRY_TIME_LINE_ALL = 11
    ENTRY_TIME_LINE_LIVE = 12
    LOCATION_ALL = 21
    LOCATION_LIVE = 22
    SYNDICATION_ALL = 31
    SYNDICATION_LIVE = 32

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStatsEventType(object):
    LIVE = 1
    DVR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMailJobStatus(object):
    PENDING = 1
    SENT = 2
    ERROR = 3
    QUEUED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaType(object):
    VIDEO = 1
    IMAGE = 2
    AUDIO = 5
    LIVE_STREAM_FLASH = 201
    LIVE_STREAM_WINDOWS_MEDIA = 202
    LIVE_STREAM_REAL_MEDIA = 203
    LIVE_STREAM_QUICKTIME = 204

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaModerationFlagType(object):
    SEXUAL_CONTENT = 1
    VIOLENT_REPULSIVE = 2
    HARMFUL_DANGEROUS = 3
    SPAM_COMMERCIALS = 4
    COPYRIGHT = 5
    TERMS_OF_USE_VIOLATION = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMrssExtensionMode(object):
    APPEND = 1
    REPLACE = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaNotificationObjectType(object):
    ENTRY = 1
    KSHOW = 2
    USER = 3
    BATCH_JOB = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaNotificationStatus(object):
    PENDING = 1
    SENT = 2
    ERROR = 3
    SHOULD_RESEND = 4
    ERROR_RESENDING = 5
    SENT_SYNCH = 6
    QUEUED = 7

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaNotificationType(object):
    ENTRY_ADD = 1
    ENTR_UPDATE_PERMISSIONS = 2
    ENTRY_DELETE = 3
    ENTRY_BLOCK = 4
    ENTRY_UPDATE = 5
    ENTRY_UPDATE_THUMBNAIL = 6
    ENTRY_UPDATE_MODERATION = 7
    USER_ADD = 21
    USER_BANNED = 26

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaNullableBoolean(object):
    NULL_VALUE = -1
    FALSE_VALUE = 0
    TRUE_VALUE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerGroupType(object):
    PUBLISHER = 1
    VAR_GROUP = 2
    GROUP = 3
    TEMPLATE = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerStatus(object):
    DELETED = 0
    ACTIVE = 1
    BLOCKED = 2
    FULL_BLOCK = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerType(object):
    KMC = 1
    WIKI = 100
    WORDPRESS = 101
    DRUPAL = 102
    DEKIWIKI = 103
    MOODLE = 104
    COMMUNITY_EDITION = 105
    JOOMLA = 106
    BLACKBOARD = 107
    SAKAI = 108
    ADMIN_CONSOLE = 109

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionStatus(object):
    ACTIVE = 1
    BLOCKED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionType(object):
    NORMAL = 1
    SPECIAL_FEATURE = 2
    PLUGIN = 3
    PARTNER_GROUP = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaylistType(object):
    STATIC_LIST = 3
    DYNAMIC = 10
    EXTERNAL = 101

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPrivacyType(object):
    ALL = 1
    AUTHENTICATED_USERS = 2
    MEMBERS_ONLY = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRecordStatus(object):
    DISABLED = 0
    APPENDED = 1
    PER_SESSION = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaResponseProfileStatus(object):
    DISABLED = 1
    ENABLED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaResponseProfileType(object):
    INCLUDE_FIELDS = 1
    EXCLUDE_FIELDS = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaResponseType(object):
    RESPONSE_TYPE_JSON = 1
    RESPONSE_TYPE_XML = 2
    RESPONSE_TYPE_PHP = 3
    RESPONSE_TYPE_PHP_ARRAY = 4
    RESPONSE_TYPE_HTML = 7
    RESPONSE_TYPE_MRSS = 8
    RESPONSE_TYPE_JSONP = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSchedulerStatusType(object):
    RUNNING_BATCHES_COUNT = 1
    RUNNING_BATCHES_CPU = 2
    RUNNING_BATCHES_MEMORY = 3
    RUNNING_BATCHES_NETWORK = 4
    RUNNING_BATCHES_DISC_IO = 5
    RUNNING_BATCHES_DISC_SPACE = 6
    RUNNING_BATCHES_IS_RUNNING = 7

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchOperatorType(object):
    SEARCH_AND = 1
    SEARCH_OR = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchProviderType(object):
    FLICKR = 3
    YOUTUBE = 4
    MYSPACE = 7
    PHOTOBUCKET = 8
    JAMENDO = 9
    CCMIXTER = 10
    NYPL = 11
    CURRENT = 12
    MEDIA_COMMONS = 13
    KALTURA = 20
    KALTURA_USER_CLIPS = 21
    ARCHIVE_ORG = 22
    KALTURA_PARTNER = 23
    METACAFE = 24
    SEARCH_PROXY = 28
    PARTNER_SPECIFIC = 100

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaServerNodeStatus(object):
    ACTIVE = 1
    DISABLED = 2
    DELETED = 3
    NOT_REGISTERED = 4

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSessionType(object):
    USER = 0
    ADMIN = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSiteRestrictionType(object):
    RESTRICT_SITE_LIST = 0
    ALLOW_SITE_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStatsEventType(object):
    WIDGET_LOADED = 1
    MEDIA_LOADED = 2
    PLAY = 3
    PLAY_REACHED_25 = 4
    PLAY_REACHED_50 = 5
    PLAY_REACHED_75 = 6
    PLAY_REACHED_100 = 7
    OPEN_EDIT = 8
    OPEN_VIRAL = 9
    OPEN_DOWNLOAD = 10
    OPEN_REPORT = 11
    BUFFER_START = 12
    BUFFER_END = 13
    OPEN_FULL_SCREEN = 14
    CLOSE_FULL_SCREEN = 15
    REPLAY = 16
    SEEK = 17
    OPEN_UPLOAD = 18
    SAVE_PUBLISH = 19
    CLOSE_EDITOR = 20
    PRE_BUMPER_PLAYED = 21
    POST_BUMPER_PLAYED = 22
    BUMPER_CLICKED = 23
    PREROLL_STARTED = 24
    MIDROLL_STARTED = 25
    POSTROLL_STARTED = 26
    OVERLAY_STARTED = 27
    PREROLL_CLICKED = 28
    MIDROLL_CLICKED = 29
    POSTROLL_CLICKED = 30
    OVERLAY_CLICKED = 31
    PREROLL_25 = 32
    PREROLL_50 = 33
    PREROLL_75 = 34
    MIDROLL_25 = 35
    MIDROLL_50 = 36
    MIDROLL_75 = 37
    POSTROLL_25 = 38
    POSTROLL_50 = 39
    POSTROLL_75 = 40

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStatsFeatureType(object):
    NONE = 0
    RELATED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStatsKmcEventType(object):
    CONTENT_PAGE_VIEW = 1001
    CONTENT_ADD_PLAYLIST = 1010
    CONTENT_EDIT_PLAYLIST = 1011
    CONTENT_DELETE_PLAYLIST = 1012
    CONTENT_EDIT_ENTRY = 1013
    CONTENT_CHANGE_THUMBNAIL = 1014
    CONTENT_ADD_TAGS = 1015
    CONTENT_REMOVE_TAGS = 1016
    CONTENT_ADD_ADMIN_TAGS = 1017
    CONTENT_REMOVE_ADMIN_TAGS = 1018
    CONTENT_DOWNLOAD = 1019
    CONTENT_APPROVE_MODERATION = 1020
    CONTENT_REJECT_MODERATION = 1021
    CONTENT_BULK_UPLOAD = 1022
    CONTENT_ADMIN_KCW_UPLOAD = 1023
    ACCOUNT_CHANGE_PARTNER_INFO = 1030
    ACCOUNT_CHANGE_LOGIN_INFO = 1031
    ACCOUNT_CONTACT_US_USAGE = 1032
    ACCOUNT_UPDATE_SERVER_SETTINGS = 1033
    ACCOUNT_ACCOUNT_OVERVIEW = 1034
    ACCOUNT_ACCESS_CONTROL = 1035
    ACCOUNT_TRANSCODING_SETTINGS = 1036
    ACCOUNT_ACCOUNT_UPGRADE = 1037
    ACCOUNT_SAVE_SERVER_SETTINGS = 1038
    ACCOUNT_ACCESS_CONTROL_DELETE = 1039
    ACCOUNT_SAVE_TRANSCODING_SETTINGS = 1040
    LOGIN = 1041
    DASHBOARD_IMPORT_CONTENT = 1042
    DASHBOARD_UPDATE_CONTENT = 1043
    DASHBOARD_ACCOUNT_CONTACT_US = 1044
    DASHBOARD_VIEW_REPORTS = 1045
    DASHBOARD_EMBED_PLAYER = 1046
    DASHBOARD_EMBED_PLAYLIST = 1047
    DASHBOARD_CUSTOMIZE_PLAYERS = 1048
    APP_STUDIO_NEW_PLAYER_SINGLE_VIDEO = 1050
    APP_STUDIO_NEW_PLAYER_PLAYLIST = 1051
    APP_STUDIO_NEW_PLAYER_MULTI_TAB_PLAYLIST = 1052
    APP_STUDIO_EDIT_PLAYER_SINGLE_VIDEO = 1053
    APP_STUDIO_EDIT_PLAYER_PLAYLIST = 1054
    APP_STUDIO_EDIT_PLAYER_MULTI_TAB_PLAYLIST = 1055
    APP_STUDIO_DUPLICATE_PLAYER = 1056
    CONTENT_CONTENT_GO_TO_PAGE = 1057
    CONTENT_DELETE_ITEM = 1058
    CONTENT_DELETE_MIX = 1059
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_TAB = 1070
    REPORTS_AND_ANALYTICS_CONTENT_REPORTS_TAB = 1071
    REPORTS_AND_ANALYTICS_USERS_AND_COMMUNITY_REPORTS_TAB = 1072
    REPORTS_AND_ANALYTICS_TOP_CONTRIBUTORS = 1073
    REPORTS_AND_ANALYTICS_MAP_OVERLAYS = 1074
    REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS = 1075
    REPORTS_AND_ANALYTICS_TOP_CONTENT = 1076
    REPORTS_AND_ANALYTICS_CONTENT_DROPOFF = 1077
    REPORTS_AND_ANALYTICS_CONTENT_INTERACTIONS = 1078
    REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS = 1079
    REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN = 1080
    REPORTS_AND_ANALYTICS_CONTENT_DRILL_DOWN_INTERACTION = 1081
    REPORTS_AND_ANALYTICS_CONTENT_CONTRIBUTIONS_DRILLDOWN = 1082
    REPORTS_AND_ANALYTICS_VIDEO_DRILL_DOWN_DROPOFF = 1083
    REPORTS_AND_ANALYTICS_MAP_OVERLAYS_DRILLDOWN = 1084
    REPORTS_AND_ANALYTICS_TOP_SYNDICATIONS_DRILL_DOWN = 1085
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_MONTHLY = 1086
    REPORTS_AND_ANALYTICS_BANDWIDTH_USAGE_VIEW_YEARLY = 1087
    CONTENT_ENTRY_DRILLDOWN = 1088
    CONTENT_OPEN_PREVIEW_AND_EMBED = 1089

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStorageProfileDeliveryStatus(object):
    ACTIVE = 1
    BLOCKED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStorageProfileReadyBehavior(object):
    NO_IMPACT = 0
    REQUIRED = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStorageProfileStatus(object):
    DISABLED = 1
    AUTOMATIC = 2
    MANUAL = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSyndicationFeedStatus(object):
    DELETED = -1
    ACTIVE = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSyndicationFeedType(object):
    GOOGLE_VIDEO = 1
    YAHOO = 2
    ITUNES = 3
    TUBE_MOGUL = 4
    KALTURA = 5
    KALTURA_XSLT = 6

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaThumbAssetStatus(object):
    ERROR = -1
    QUEUED = 0
    CAPTURING = 1
    READY = 2
    DELETED = 3
    IMPORTING = 7
    EXPORTING = 9

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaThumbCropType(object):
    RESIZE = 1
    RESIZE_WITH_PADDING = 2
    CROP = 3
    CROP_FROM_TOP = 4
    RESIZE_WITH_FORCE = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUiConfCreationMode(object):
    WIZARD = 2
    ADVANCED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUiConfObjType(object):
    PLAYER = 1
    CONTRIBUTION_WIZARD = 2
    SIMPLE_EDITOR = 3
    ADVANCED_EDITOR = 4
    PLAYLIST = 5
    APP_STUDIO = 6
    KRECORD = 7
    PLAYER_V3 = 8
    KMC_ACCOUNT = 9
    KMC_ANALYTICS = 10
    KMC_CONTENT = 11
    KMC_DASHBOARD = 12
    KMC_LOGIN = 13
    PLAYER_SL = 14
    CLIENTSIDE_ENCODER = 15
    KMC_GENERAL = 16
    KMC_ROLES_AND_PERMISSIONS = 17
    CLIPPER = 18
    KSR = 19
    KUPLOAD = 20
    WEBCASTING = 21

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUpdateMethodType(object):
    MANUAL = 0
    AUTOMATIC = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUploadErrorCode(object):
    NO_ERROR = 0
    GENERAL_ERROR = 1
    PARTIAL_UPLOAD = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUploadTokenStatus(object):
    PENDING = 0
    PARTIAL_UPLOAD = 1
    FULL_UPLOAD = 2
    CLOSED = 3
    TIMED_OUT = 4
    DELETED = 5

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserAgentRestrictionType(object):
    RESTRICT_LIST = 0
    ALLOW_LIST = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserJoinPolicyType(object):
    AUTO_JOIN = 1
    REQUEST_TO_JOIN = 2
    NOT_ALLOWED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserRoleStatus(object):
    ACTIVE = 1
    BLOCKED = 2
    DELETED = 3

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserStatus(object):
    BLOCKED = 0
    ACTIVE = 1
    DELETED = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserType(object):
    USER = 0
    GROUP = 1

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaWidgetSecurityType(object):
    NONE = 1
    TIMEHASH = 2

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAccessControlOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAdminUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAkamaiUniversalStreamType(object):
    HD_IPHONE_IPAD_LIVE = "HD iPhone/iPad Live"
    UNIVERSAL_STREAMING_LIVE = "Universal Streaming Live"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageProfileFilesPermissionLevel(object):
    ACL_AUTHENTICATED_READ = "authenticated-read"
    ACL_PRIVATE = "private"
    ACL_PUBLIC_READ = "public-read"
    ACL_PUBLIC_READ_WRITE = "public-read-write"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiActionPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItemAction(object):
    USAGE = "all"
    INSERT = "insert"
    READ = "read"
    UPDATE = "update"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAppTokenHashType(object):
    MD5 = "MD5"
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA512 = "SHA512"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAppTokenOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAssetType(object):
    ATTACHMENT = "attachment.Attachment"
    CAPTION = "caption.Caption"
    DOCUMENT = "document.Document"
    IMAGE = "document.Image"
    PDF = "document.PDF"
    SWF = "document.SWF"
    TIMED_THUMB_ASSET = "thumbCuePoint.timedThumb"
    TRANSCRIPT = "transcript.Transcript"
    WIDEVINE_FLAVOR = "widevine.WidevineFlavor"
    FLAVOR = "1"
    THUMBNAIL = "2"
    LIVE = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaAudioCodec(object):
    NONE = ""
    AAC = "aac"
    AACHE = "aache"
    AC3 = "ac3"
    AMRNB = "amrnb"
    COPY = "copy"
    MP3 = "mp3"
    MPEG2 = "mpeg2"
    PCM = "pcm"
    VORBIS = "vorbis"
    WMA = "wma"
    WMAPRO = "wmapro"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBaseEntryCloneOptions(object):
    AD_CUE_POINTS = "adCuePoint.AD_CUE_POINTS"
    ANNOTATION_CUE_POINTS = "annotation.ANNOTATION_CUE_POINTS"
    CODE_CUE_POINTS = "codeCuePoint.CODE_CUE_POINTS"
    THUMB_CUE_POINTS = "thumbCuePoint.THUMB_CUE_POINTS"
    USERS = "1"
    CATEGORIES = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBaseEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBaseEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBaseEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBaseSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBatchJobObjectType(object):
    ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution"
    DROP_FOLDER_FILE = "dropFolderXmlBulkUpload.DropFolderFile"
    METADATA = "metadata.Metadata"
    METADATA_PROFILE = "metadata.MetadataProfile"
    SCHEDULED_TASK_PROFILE = "scheduledTask.ScheduledTaskProfile"
    ENTRY = "1"
    CATEGORY = "2"
    FILE_SYNC = "3"
    ASSET = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBatchJobOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ESTIMATED_EFFORT_ASC = "+estimatedEffort"
    EXECUTION_ATTEMPTS_ASC = "+executionAttempts"
    FINISH_TIME_ASC = "+finishTime"
    LOCK_VERSION_ASC = "+lockVersion"
    PRIORITY_ASC = "+priority"
    QUEUE_TIME_ASC = "+queueTime"
    STATUS_ASC = "+status"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ESTIMATED_EFFORT_DESC = "-estimatedEffort"
    EXECUTION_ATTEMPTS_DESC = "-executionAttempts"
    FINISH_TIME_DESC = "-finishTime"
    LOCK_VERSION_DESC = "-lockVersion"
    PRIORITY_DESC = "-priority"
    QUEUE_TIME_DESC = "-queueTime"
    STATUS_DESC = "-status"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBatchJobType(object):
    PARSE_MULTI_LANGUAGE_CAPTION_ASSET = "caption.parsemultilanguagecaptionasset"
    PARSE_CAPTION_ASSET = "captionSearch.parseCaptionAsset"
    DISTRIBUTION_DELETE = "contentDistribution.DistributionDelete"
    DISTRIBUTION_DISABLE = "contentDistribution.DistributionDisable"
    DISTRIBUTION_ENABLE = "contentDistribution.DistributionEnable"
    DISTRIBUTION_FETCH_REPORT = "contentDistribution.DistributionFetchReport"
    DISTRIBUTION_SUBMIT = "contentDistribution.DistributionSubmit"
    DISTRIBUTION_SYNC = "contentDistribution.DistributionSync"
    DISTRIBUTION_UPDATE = "contentDistribution.DistributionUpdate"
    DROP_FOLDER_CONTENT_PROCESSOR = "dropFolder.DropFolderContentProcessor"
    CONVERT = "0"
    DROP_FOLDER_WATCHER = "dropFolder.DropFolderWatcher"
    EVENT_NOTIFICATION_HANDLER = "eventNotification.EventNotificationHandler"
    INTEGRATION = "integration.Integration"
    SCHEDULED_TASK = "scheduledTask.ScheduledTask"
    INDEX_TAGS = "tagSearch.IndexTagsByPrivacyContext"
    TAG_RESOLVE = "tagSearch.TagResolve"
    VIRUS_SCAN = "virusScan.VirusScan"
    WIDEVINE_REPOSITORY_SYNC = "widevine.WidevineRepositorySync"
    IMPORT = "1"
    DELETE = "2"
    FLATTEN = "3"
    BULKUPLOAD = "4"
    DVDCREATOR = "5"
    DOWNLOAD = "6"
    OOCONVERT = "7"
    CONVERT_PROFILE = "10"
    POSTCONVERT = "11"
    EXTRACT_MEDIA = "14"
    MAIL = "15"
    NOTIFICATION = "16"
    CLEANUP = "17"
    SCHEDULER_HELPER = "18"
    BULKDOWNLOAD = "19"
    DB_CLEANUP = "20"
    PROVISION_PROVIDE = "21"
    CONVERT_COLLECTION = "22"
    STORAGE_EXPORT = "23"
    PROVISION_DELETE = "24"
    STORAGE_DELETE = "25"
    EMAIL_INGESTION = "26"
    METADATA_IMPORT = "27"
    METADATA_TRANSFORM = "28"
    FILESYNC_IMPORT = "29"
    CAPTURE_THUMB = "30"
    DELETE_FILE = "31"
    INDEX = "32"
    MOVE_CATEGORY_ENTRIES = "33"
    COPY = "34"
    CONCAT = "35"
    CONVERT_LIVE_SEGMENT = "36"
    COPY_PARTNER = "37"
    VALIDATE_LIVE_MEDIA_SERVERS = "38"
    SYNC_CATEGORY_PRIVACY_CONTEXT = "39"
    LIVE_REPORT_EXPORT = "40"
    RECALCULATE_CACHE = "41"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadAction(object):
    CANCEL = "scheduleBulkUpload.CANCEL"
    ADD = "1"
    UPDATE = "2"
    DELETE = "3"
    REPLACE = "4"
    TRANSFORM_XSLT = "5"
    ADD_OR_UPDATE = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadObjectType(object):
    SCHEDULE_EVENT = "scheduleBulkUpload.SCHEDULE_EVENT"
    SCHEDULE_RESOURCE = "scheduleBulkUpload.SCHEDULE_RESOURCE"
    ENTRY = "1"
    CATEGORY = "2"
    USER = "3"
    CATEGORY_USER = "4"
    CATEGORY_ENTRY = "5"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultStatus(object):
    ERROR = "1"
    OK = "2"
    IN_PROGRESS = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaBulkUploadType(object):
    CSV = "bulkUploadCsv.CSV"
    FILTER = "bulkUploadFilter.FILTER"
    XML = "bulkUploadXml.XML"
    DROP_FOLDER_XML = "dropFolderXmlBulkUpload.DROP_FOLDER_XML"
    ICAL = "scheduleBulkUpload.ICAL"
    DROP_FOLDER_ICAL = "scheduleDropFolder.DROP_FOLDER_ICAL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryAdvancedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryIdentifierField(object):
    FULL_NAME = "fullName"
    ID = "id"
    REFERENCE_ID = "referenceId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DEPTH_ASC = "+depth"
    DIRECT_ENTRIES_COUNT_ASC = "+directEntriesCount"
    DIRECT_SUB_CATEGORIES_COUNT_ASC = "+directSubCategoriesCount"
    ENTRIES_COUNT_ASC = "+entriesCount"
    FULL_NAME_ASC = "+fullName"
    MEMBERS_COUNT_ASC = "+membersCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DEPTH_DESC = "-depth"
    DIRECT_ENTRIES_COUNT_DESC = "-directEntriesCount"
    DIRECT_SUB_CATEGORIES_COUNT_DESC = "-directSubCategoriesCount"
    ENTRIES_COUNT_DESC = "-entriesCount"
    FULL_NAME_DESC = "-fullName"
    MEMBERS_COUNT_DESC = "-membersCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCategoryUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaCloneComponentSelectorType(object):
    INCLUDE_COMPONENT = "0"
    EXCLUDE_COMPONENT = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConditionType(object):
    ABC_WATERMARK = "abcScreenersWatermarkAccessControl.abcWatermark"
    EVENT_NOTIFICATION_FIELD = "eventNotification.BooleanField"
    EVENT_NOTIFICATION_OBJECT_CHANGED = "eventNotification.ObjectChanged"
    METADATA_FIELD_CHANGED = "metadata.FieldChanged"
    METADATA_FIELD_COMPARE = "metadata.FieldCompare"
    METADATA_FIELD_MATCH = "metadata.FieldMatch"
    AUTHENTICATED = "1"
    COUNTRY = "2"
    IP_ADDRESS = "3"
    SITE = "4"
    USER_AGENT = "5"
    FIELD_MATCH = "6"
    FIELD_COMPARE = "7"
    ASSET_PROPERTIES_COMPARE = "8"
    USER_ROLE = "9"
    GEO_DISTANCE = "10"
    OR_OPERATOR = "11"
    HASH = "12"
    DELIVERY_PROFILE = "13"
    ACTIVE_EDGE_VALIDATE = "14"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContainerFormat(object):
    _3GP = "3gp"
    APPLEHTTP = "applehttp"
    AVI = "avi"
    BMP = "bmp"
    COPY = "copy"
    FLV = "flv"
    HLS = "hls"
    ISMA = "isma"
    ISMV = "ismv"
    JPG = "jpg"
    M2TS = "m2ts"
    M4V = "m4v"
    MKV = "mkv"
    MOV = "mov"
    MP3 = "mp3"
    MP4 = "mp4"
    MPEG = "mpeg"
    MPEGTS = "mpegts"
    MXF = "mxf"
    OGG = "ogg"
    OGV = "ogv"
    PDF = "pdf"
    PNG = "png"
    SWF = "swf"
    WAV = "wav"
    WEBM = "webm"
    WMA = "wma"
    WMV = "wmv"
    WVM = "wvm"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaContextType(object):
    PLAY = "1"
    DOWNLOAD = "2"
    THUMBNAIL = "3"
    METADATA = "4"
    EXPORT = "5"
    SERVE = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConversionProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConversionProfileStatus(object):
    DISABLED = "1"
    ENABLED = "2"
    DELETED = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaConversionProfileType(object):
    MEDIA = "1"
    LIVE_STREAM = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDataEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDataEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDataEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHdsOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericAppleHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHdsOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericRtmpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericSilverLightOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileLiveAppleHttpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileRtmpOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileType(object):
    EDGE_CAST_HTTP = "edgeCast.EDGE_CAST_HTTP"
    EDGE_CAST_RTMP = "edgeCast.EDGE_CAST_RTMP"
    KONTIKI_HTTP = "kontiki.KONTIKI_HTTP"
    UPLYNK_HTTP = "uplynk.UPLYNK_HTTP"
    UPLYNK_RTMP = "uplynk.UPLYNK_RTMP"
    VELOCIX_HDS = "velocix.VELOCIX_HDS"
    VELOCIX_HLS = "velocix.VELOCIX_HLS"
    APPLE_HTTP = "1"
    HDS = "3"
    HTTP = "4"
    RTMP = "5"
    RTSP = "6"
    SILVER_LIGHT = "7"
    AKAMAI_HLS_DIRECT = "10"
    AKAMAI_HLS_MANIFEST = "11"
    AKAMAI_HD = "12"
    AKAMAI_HDS = "13"
    AKAMAI_HTTP = "14"
    AKAMAI_RTMP = "15"
    AKAMAI_RTSP = "16"
    AKAMAI_SS = "17"
    GENERIC_HLS = "21"
    GENERIC_HDS = "23"
    GENERIC_HTTP = "24"
    GENERIC_HLS_MANIFEST = "25"
    GENERIC_HDS_MANIFEST = "26"
    GENERIC_SS = "27"
    GENERIC_RTMP = "28"
    LEVEL3_HLS = "31"
    LEVEL3_HTTP = "34"
    LEVEL3_RTMP = "35"
    LIMELIGHT_HTTP = "44"
    LIMELIGHT_RTMP = "45"
    LOCAL_PATH_APPLE_HTTP = "51"
    LOCAL_PATH_HDS = "53"
    LOCAL_PATH_HTTP = "54"
    LOCAL_PATH_RTMP = "55"
    VOD_PACKAGER_HLS = "61"
    VOD_PACKAGER_HDS = "63"
    VOD_PACKAGER_MSS = "67"
    VOD_PACKAGER_DASH = "68"
    LIVE_HLS = "1001"
    LIVE_HDS = "1002"
    LIVE_DASH = "1003"
    LIVE_RTMP = "1005"
    LIVE_HLS_TO_MULTICAST = "1006"
    LIVE_AKAMAI_HDS = "1013"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDeliveryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDocumentEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDocumentEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaDurationType(object):
    LONG = "long"
    MEDIUM = "medium"
    NOT_AVAILABLE = "notavailable"
    SHORT = "short"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEdgeServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryIdentifierField(object):
    ID = "id"
    REFERENCE_ID = "referenceId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryReplacementStatus(object):
    NONE = "0"
    APPROVED_BUT_NOT_READY = "1"
    READY_BUT_NOT_APPROVED = "2"
    NOT_READY_AND_NOT_APPROVED = "3"
    FAILED = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeType(object):
    LIVE_PRIMARY = "0"
    LIVE_BACKUP = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryStatus(object):
    ERROR_IMPORTING = "-2"
    ERROR_CONVERTING = "-1"
    SCAN_FAILURE = "virusScan.ScanFailure"
    IMPORT = "0"
    INFECTED = "virusScan.Infected"
    PRECONVERT = "1"
    READY = "2"
    DELETED = "3"
    PENDING = "4"
    MODERATE = "5"
    BLOCKED = "6"
    NO_CONTENT = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaEntryType(object):
    AUTOMATIC = "-1"
    EXTERNAL_MEDIA = "externalMedia.externalMedia"
    MEDIA_CLIP = "1"
    MIX = "2"
    PLAYLIST = "5"
    DATA = "6"
    LIVE_STREAM = "7"
    LIVE_CHANNEL = "8"
    DOCUMENT = "10"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExternalMediaEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaExternalMediaEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFileAssetObjectType(object):
    UI_CONF = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFileAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFileAssetStatus(object):
    PENDING = "0"
    UPLOADING = "1"
    READY = "2"
    DELETED = "3"
    ERROR = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFileSyncObjectType(object):
    DISTRIBUTION_PROFILE = "contentDistribution.DistributionProfile"
    ENTRY_DISTRIBUTION = "contentDistribution.EntryDistribution"
    GENERIC_DISTRIBUTION_ACTION = "contentDistribution.GenericDistributionAction"
    EMAIL_NOTIFICATION_TEMPLATE = "emailNotification.EmailNotificationTemplate"
    HTTP_NOTIFICATION_TEMPLATE = "httpNotification.HttpNotificationTemplate"
    ENTRY = "1"
    UICONF = "2"
    BATCHJOB = "3"
    ASSET = "4"
    FLAVOR_ASSET = "4"
    METADATA = "5"
    METADATA_PROFILE = "6"
    SYNDICATION_FEED = "7"
    CONVERSION_PROFILE = "8"
    FILE_ASSET = "9"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGenericSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGenericXsltSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGeoCoderType(object):
    KALTURA = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGoogleSyndicationFeedAdultValues(object):
    NO = "No"
    YES = "Yes"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGoogleVideoSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaGroupUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeedAdultValues(object):
    CLEAN = "clean"
    NO = "no"
    YES = "yes"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeedCategories(object):
    ARTS = "Arts"
    ARTS_DESIGN = "Arts/Design"
    ARTS_FASHION_BEAUTY = "Arts/Fashion &amp; Beauty"
    ARTS_FOOD = "Arts/Food"
    ARTS_LITERATURE = "Arts/Literature"
    ARTS_PERFORMING_ARTS = "Arts/Performing Arts"
    ARTS_VISUAL_ARTS = "Arts/Visual Arts"
    BUSINESS = "Business"
    BUSINESS_BUSINESS_NEWS = "Business/Business News"
    BUSINESS_CAREERS = "Business/Careers"
    BUSINESS_INVESTING = "Business/Investing"
    BUSINESS_MANAGEMENT_MARKETING = "Business/Management &amp; Marketing"
    BUSINESS_SHOPPING = "Business/Shopping"
    COMEDY = "Comedy"
    EDUCATION = "Education"
    EDUCATION_TECHNOLOGY = "Education/Education Technology"
    EDUCATION_HIGHER_EDUCATION = "Education/Higher Education"
    EDUCATION_K_12 = "Education/K-12"
    EDUCATION_LANGUAGE_COURSES = "Education/Language Courses"
    EDUCATION_TRAINING = "Education/Training"
    GAMES_HOBBIES = "Games &amp; Hobbies"
    GAMES_HOBBIES_AUTOMOTIVE = "Games &amp; Hobbies/Automotive"
    GAMES_HOBBIES_AVIATION = "Games &amp; Hobbies/Aviation"
    GAMES_HOBBIES_HOBBIES = "Games &amp; Hobbies/Hobbies"
    GAMES_HOBBIES_OTHER_GAMES = "Games &amp; Hobbies/Other Games"
    GAMES_HOBBIES_VIDEO_GAMES = "Games &amp; Hobbies/Video Games"
    GOVERNMENT_ORGANIZATIONS = "Government &amp; Organizations"
    GOVERNMENT_ORGANIZATIONS_LOCAL = "Government &amp; Organizations/Local"
    GOVERNMENT_ORGANIZATIONS_NATIONAL = "Government &amp; Organizations/National"
    GOVERNMENT_ORGANIZATIONS_NON_PROFIT = "Government &amp; Organizations/Non-Profit"
    GOVERNMENT_ORGANIZATIONS_REGIONAL = "Government &amp; Organizations/Regional"
    HEALTH = "Health"
    HEALTH_ALTERNATIVE_HEALTH = "Health/Alternative Health"
    HEALTH_FITNESS_NUTRITION = "Health/Fitness &amp; Nutrition"
    HEALTH_SELF_HELP = "Health/Self-Help"
    HEALTH_SEXUALITY = "Health/Sexuality"
    KIDS_FAMILY = "Kids &amp; Family"
    MUSIC = "Music"
    NEWS_POLITICS = "News &amp; Politics"
    RELIGION_SPIRITUALITY = "Religion &amp; Spirituality"
    RELIGION_SPIRITUALITY_BUDDHISM = "Religion &amp; Spirituality/Buddhism"
    RELIGION_SPIRITUALITY_CHRISTIANITY = "Religion &amp; Spirituality/Christianity"
    RELIGION_SPIRITUALITY_HINDUISM = "Religion &amp; Spirituality/Hinduism"
    RELIGION_SPIRITUALITY_ISLAM = "Religion &amp; Spirituality/Islam"
    RELIGION_SPIRITUALITY_JUDAISM = "Religion &amp; Spirituality/Judaism"
    RELIGION_SPIRITUALITY_OTHER = "Religion &amp; Spirituality/Other"
    RELIGION_SPIRITUALITY_SPIRITUALITY = "Religion &amp; Spirituality/Spirituality"
    SCIENCE_MEDICINE = "Science &amp; Medicine"
    SCIENCE_MEDICINE_MEDICINE = "Science &amp; Medicine/Medicine"
    SCIENCE_MEDICINE_NATURAL_SCIENCES = "Science &amp; Medicine/Natural Sciences"
    SCIENCE_MEDICINE_SOCIAL_SCIENCES = "Science &amp; Medicine/Social Sciences"
    SOCIETY_CULTURE = "Society &amp; Culture"
    SOCIETY_CULTURE_HISTORY = "Society &amp; Culture/History"
    SOCIETY_CULTURE_PERSONAL_JOURNALS = "Society &amp; Culture/Personal Journals"
    SOCIETY_CULTURE_PHILOSOPHY = "Society &amp; Culture/Philosophy"
    SOCIETY_CULTURE_PLACES_TRAVEL = "Society &amp; Culture/Places &amp; Travel"
    SPORTS_RECREATION = "Sports &amp; Recreation"
    SPORTS_RECREATION_AMATEUR = "Sports &amp; Recreation/Amateur"
    SPORTS_RECREATION_COLLEGE_HIGH_SCHOOL = "Sports &amp; Recreation/College &amp; High School"
    SPORTS_RECREATION_OUTDOOR = "Sports &amp; Recreation/Outdoor"
    SPORTS_RECREATION_PROFESSIONAL = "Sports &amp; Recreation/Professional"
    TV_FILM = "TV &amp; Film"
    TECHNOLOGY = "Technology"
    TECHNOLOGY_GADGETS = "Technology/Gadgets"
    TECHNOLOGY_PODCASTING = "Technology/Podcasting"
    TECHNOLOGY_SOFTWARE_HOW_TO = "Technology/Software How-To"
    TECHNOLOGY_TECH_NEWS = "Technology/Tech News"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLanguage(object):
    AB = "Abkhazian"
    AA = "Afar"
    AF = "Afrikaans"
    SQ = "Albanian"
    AM = "Amharic"
    AR = "Arabic"
    HY = "Armenian"
    AS_ = "Assamese"
    AY = "Aymara"
    AZ = "Azerbaijani"
    BA = "Bashkir"
    EU = "Basque"
    BN = "Bengali (Bangla)"
    DZ = "Bhutani"
    BH = "Bihari"
    BI = "Bislama"
    BR = "Breton"
    BG = "Bulgarian"
    MY = "Burmese"
    BE = "Byelorussian (Belarusian)"
    KM = "Cambodian"
    CA = "Catalan"
    ZH = "Chinese"
    CO = "Corsican"
    HR = "Croatian"
    CS = "Czech"
    DA = "Danish"
    NL = "Dutch"
    EN = "English"
    EN_US = "English (American)"
    EN_GB = "English (British)"
    EO = "Esperanto"
    ET = "Estonian"
    FO = "Faeroese"
    FA = "Farsi"
    FJ = "Fiji"
    FI = "Finnish"
    FR = "French"
    FY = "Frisian"
    GV = "Gaelic (Manx)"
    GD = "Gaelic (Scottish)"
    GL = "Galician"
    KA = "Georgian"
    DE = "German"
    EL = "Greek"
    KL = "Greenlandic"
    GN = "Guarani"
    GU = "Gujarati"
    HA = "Hausa"
    HE = "Hebrew"
    IW = "Hebrew"
    HI = "Hindi"
    HU = "Hungarian"
    IS = "Icelandic"
    ID = "Indonesian"
    IN = "Indonesian"
    IA = "Interlingua"
    IE = "Interlingue"
    IU = "Inuktitut"
    IK = "Inupiak"
    GA = "Irish"
    IT = "Italian"
    JA = "Japanese"
    JV = "Javanese"
    KN = "Kannada"
    KS = "Kashmiri"
    KK = "Kazakh"
    RW = "Kinyarwanda (Ruanda)"
    KY = "Kirghiz"
    RN = "Kirundi (Rundi)"
    KO = "Korean"
    KU = "Kurdish"
    LO = "Laothian"
    LA = "Latin"
    LV = "Latvian (Lettish)"
    LI = "Limburgish ( Limburger)"
    LN = "Lingala"
    LT = "Lithuanian"
    MK = "Macedonian"
    MG = "Malagasy"
    MS = "Malay"
    ML = "Malayalam"
    MT = "Maltese"
    MI = "Maori"
    MR = "Marathi"
    MO = "Moldavian"
    MN = "Mongolian"
    MU = "Multilingual"
    NA = "Nauru"
    NE = "Nepali"
    NO = "Norwegian"
    OC = "Occitan"
    OR_ = "Oriya"
    OM = "Oromo (Afan, Galla)"
    PS = "Pashto (Pushto)"
    PL = "Polish"
    PT = "Portuguese"
    PA = "Punjabi"
    QU = "Quechua"
    RM = "Rhaeto-Romance"
    RO = "Romanian"
    RU = "Russian"
    SM = "Samoan"
    SG = "Sangro"
    SA = "Sanskrit"
    SR = "Serbian"
    SH = "Serbo-Croatian"
    ST = "Sesotho"
    TN = "Setswana"
    SN = "Shona"
    SD = "Sindhi"
    SI = "Sinhalese"
    SS = "Siswati"
    SK = "Slovak"
    SL = "Slovenian"
    SO = "Somali"
    ES = "Spanish"
    SU = "Sundanese"
    SW = "Swahili (Kiswahili)"
    SV = "Swedish"
    TL = "Tagalog"
    TG = "Tajik"
    TA = "Tamil"
    TT = "Tatar"
    TE = "Telugu"
    TH = "Thai"
    BO = "Tibetan"
    TI = "Tigrinya"
    TO = "Tonga"
    TS = "Tsonga"
    TR = "Turkish"
    TK = "Turkmen"
    TW = "Twi"
    UG = "Uighur"
    UK = "Ukrainian"
    UR = "Urdu"
    UZ = "Uzbek"
    VI = "Vietnamese"
    VO = "Volapuk"
    CY = "Welsh"
    WO = "Wolof"
    XH = "Xhosa"
    JI = "Yiddish"
    YI = "Yiddish"
    YO = "Yoruba"
    ZU = "Zulu"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLanguageCode(object):
    AA = "aa"
    AB = "ab"
    AF = "af"
    AM = "am"
    AR = "ar"
    AS_ = "as"
    AY = "ay"
    AZ = "az"
    BA = "ba"
    BE = "be"
    BG = "bg"
    BH = "bh"
    BI = "bi"
    BN = "bn"
    BO = "bo"
    BR = "br"
    CA = "ca"
    CO = "co"
    CS = "cs"
    CY = "cy"
    DA = "da"
    DE = "de"
    DZ = "dz"
    EL = "el"
    EN = "en"
    EN_GB = "en_gb"
    EN_US = "en_us"
    EO = "eo"
    ES = "es"
    ET = "et"
    EU = "eu"
    FA = "fa"
    FI = "fi"
    FJ = "fj"
    FO = "fo"
    FR = "fr"
    FY = "fy"
    GA = "ga"
    GD = "gd"
    GL = "gl"
    GN = "gn"
    GU = "gu"
    GV = "gv"
    HA = "ha"
    HE = "he"
    HI = "hi"
    HR = "hr"
    HU = "hu"
    HY = "hy"
    IA = "ia"
    ID = "id"
    IE = "ie"
    IK = "ik"
    IN = "in"
    IS = "is"
    IT = "it"
    IU = "iu"
    IW = "iw"
    JA = "ja"
    JI = "ji"
    JV = "jv"
    KA = "ka"
    KK = "kk"
    KL = "kl"
    KM = "km"
    KN = "kn"
    KO = "ko"
    KS = "ks"
    KU = "ku"
    KY = "ky"
    LA = "la"
    LI = "li"
    LN = "ln"
    LO = "lo"
    LT = "lt"
    LV = "lv"
    MG = "mg"
    MI = "mi"
    MK = "mk"
    ML = "ml"
    MN = "mn"
    MO = "mo"
    MR = "mr"
    MS = "ms"
    MT = "mt"
    MU = "multilingual"
    MY = "my"
    NA = "na"
    NE = "ne"
    NL = "nl"
    NO = "no"
    OC = "oc"
    OM = "om"
    OR_ = "or"
    PA = "pa"
    PL = "pl"
    PS = "ps"
    PT = "pt"
    QU = "qu"
    RM = "rm"
    RN = "rn"
    RO = "ro"
    RU = "ru"
    RW = "rw"
    SA = "sa"
    SD = "sd"
    SG = "sg"
    SH = "sh"
    SI = "si"
    SK = "sk"
    SL = "sl"
    SM = "sm"
    SN = "sn"
    SO = "so"
    SQ = "sq"
    SR = "sr"
    SS = "ss"
    ST = "st"
    SU = "su"
    SV = "sv"
    SW = "sw"
    TA = "ta"
    TE = "te"
    TG = "tg"
    TH = "th"
    TI = "ti"
    TK = "tk"
    TL = "tl"
    TN = "tn"
    TO = "to"
    TR = "tr"
    TS = "ts"
    TT = "tt"
    TW = "tw"
    UG = "ug"
    UK = "uk"
    UR = "ur"
    UZ = "uz"
    VI = "vi"
    VO = "vo"
    WO = "wo"
    XH = "xh"
    YI = "yi"
    YO = "yo"
    ZH = "zh"
    ZU = "zu"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    START_TIME_ASC = "+startTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    START_TIME_DESC = "-startTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentStatus(object):
    ACTIVE = "2"
    DELETED = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentTriggerType(object):
    CHANNEL_RELATIVE = "1"
    ABSOLUTE_TIME = "2"
    SEGMENT_START_RELATIVE = "3"
    SEGMENT_END_RELATIVE = "4"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentType(object):
    VIDEO_AND_AUDIO = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveEntryServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveReportOrderBy(object):
    NAME_ASC = "+name"
    AUDIENCE_DESC = "-audience"
    EVENT_TIME_DESC = "-eventTime"
    PLAYS_DESC = "-plays"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveReportType(object):
    ENTRY_GEO_TIME_LINE = "ENTRY_GEO_TIME_LINE"
    ENTRY_SYNDICATION_TOTAL = "ENTRY_SYNDICATION_TOTAL"
    ENTRY_TIME_LINE = "ENTRY_TIME_LINE"
    ENTRY_TOTAL = "ENTRY_TOTAL"
    PARTNER_TOTAL = "PARTNER_TOTAL"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    FIRST_BROADCAST_ASC = "+firstBroadcast"
    LAST_BROADCAST_ASC = "+lastBroadcast"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    FIRST_BROADCAST_DESC = "-firstBroadcast"
    LAST_BROADCAST_DESC = "-lastBroadcast"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMailType(object):
    MAIL_TYPE_KALTURA_NEWSLETTER = "10"
    MAIL_TYPE_ADDED_TO_FAVORITES = "11"
    MAIL_TYPE_ADDED_TO_CLIP_FAVORITES = "12"
    MAIL_TYPE_NEW_COMMENT_IN_PROFILE = "13"
    MAIL_TYPE_CLIP_ADDED_YOUR_KALTURA = "20"
    MAIL_TYPE_VIDEO_ADDED = "21"
    MAIL_TYPE_ROUGHCUT_CREATED = "22"
    MAIL_TYPE_ADDED_KALTURA_TO_YOUR_FAVORITES = "23"
    MAIL_TYPE_NEW_COMMENT_IN_KALTURA = "24"
    MAIL_TYPE_CLIP_ADDED = "30"
    MAIL_TYPE_VIDEO_CREATED = "31"
    MAIL_TYPE_ADDED_KALTURA_TO_HIS_FAVORITES = "32"
    MAIL_TYPE_NEW_COMMENT_IN_KALTURA_YOU_CONTRIBUTED = "33"
    MAIL_TYPE_CLIP_CONTRIBUTED = "40"
    MAIL_TYPE_ROUGHCUT_CREATED_SUBSCRIBED = "41"
    MAIL_TYPE_ADDED_KALTURA_TO_HIS_FAVORITES_SUBSCRIBED = "42"
    MAIL_TYPE_NEW_COMMENT_IN_KALTURA_YOU_SUBSCRIBED = "43"
    MAIL_TYPE_REGISTER_CONFIRM = "50"
    MAIL_TYPE_PASSWORD_RESET = "51"
    MAIL_TYPE_LOGIN_MAIL_RESET = "52"
    MAIL_TYPE_REGISTER_CONFIRM_VIDEO_SERVICE = "54"
    MAIL_TYPE_VIDEO_READY = "60"
    MAIL_TYPE_VIDEO_IS_READY = "62"
    MAIL_TYPE_BULK_DOWNLOAD_READY = "63"
    MAIL_TYPE_BULKUPLOAD_FINISHED = "64"
    MAIL_TYPE_BULKUPLOAD_FAILED = "65"
    MAIL_TYPE_BULKUPLOAD_ABORTED = "66"
    MAIL_TYPE_NOTIFY_ERR = "70"
    MAIL_TYPE_ACCOUNT_UPGRADE_CONFIRM = "80"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE = "81"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_LIMIT_REACHED = "82"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_LOCKED = "83"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_ACCOUNT_DELETED = "84"
    MAIL_TYPE_VIDEO_SERVICE_NOTICE_UPGRADE_OFFER = "85"
    MAIL_TYPE_ACCOUNT_REACTIVE_CONFIRM = "86"
    MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD = "110"
    MAIL_TYPE_SYSTEM_USER_RESET_PASSWORD_SUCCESS = "111"
    MAIL_TYPE_SYSTEM_USER_NEW_PASSWORD = "112"
    MAIL_TYPE_SYSTEM_USER_CREDENTIALS_SAVED = "113"
    MAIL_TYPE_LIVE_REPORT_EXPORT_SUCCESS = "130"
    MAIL_TYPE_LIVE_REPORT_EXPORT_FAILURE = "131"
    MAIL_TYPE_LIVE_REPORT_EXPORT_ABORT = "132"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MEDIA_DATE = "mediaDate"
    MEDIA_TYPE = "mediaType"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    FLAVOR_PARAMS_IDS = "flavorParamsIds"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MEDIA_TYPE_ASC = "+mediaType"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MEDIA_TYPE_DESC = "-mediaType"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaInfoOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaParserType(object):
    MEDIAINFO = "0"
    REMOTE_MEDIAINFO = "remoteMediaInfo.RemoteMediaInfo"
    FFMPEG = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMediaServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMixEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMixEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaMixEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaModerationFlagStatus(object):
    PENDING = "1"
    MODERATED = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaModerationObjectType(object):
    ENTRY = "2"
    USER = "3"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPartnerOrderBy(object):
    ADMIN_EMAIL_ASC = "+adminEmail"
    ADMIN_NAME_ASC = "+adminName"
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    STATUS_ASC = "+status"
    WEBSITE_ASC = "+website"
    ADMIN_EMAIL_DESC = "-adminEmail"
    ADMIN_NAME_DESC = "-adminName"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    STATUS_DESC = "-status"
    WEBSITE_DESC = "-website"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionItemOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionItemType(object):
    API_ACTION_ITEM = "kApiActionPermissionItem"
    API_PARAMETER_ITEM = "kApiParameterPermissionItem"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPermissionOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    LAST_PLAYED_AT = "lastPlayedAt"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    MS_DURATION = "msDuration"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    PLAYS = "plays"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"
    VIEWS = "views"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    DURATION_TYPE = "durationType"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DURATION_ASC = "+duration"
    END_DATE_ASC = "+endDate"
    LAST_PLAYED_AT_ASC = "+lastPlayedAt"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    PLAYS_ASC = "+plays"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    VIEWS_ASC = "+views"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    DURATION_DESC = "-duration"
    END_DATE_DESC = "-endDate"
    LAST_PLAYED_AT_DESC = "-lastPlayedAt"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    PLAYS_DESC = "-plays"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    VIEWS_DESC = "-views"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaybackProtocol(object):
    APPLE_HTTP = "applehttp"
    APPLE_HTTP_TO_MC = "applehttp_to_mc"
    AUTO = "auto"
    AKAMAI_HD = "hdnetwork"
    AKAMAI_HDS = "hdnetworkmanifest"
    HDS = "hds"
    HLS = "hls"
    HTTP = "http"
    MPEG_DASH = "mpegdash"
    MULTICAST_SL = "multicast_silverlight"
    RTMP = "rtmp"
    RTSP = "rtsp"
    SILVER_LIGHT = "sl"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaylistCompareAttribute(object):
    ACCESS_CONTROL_ID = "accessControlId"
    CREATED_AT = "createdAt"
    END_DATE = "endDate"
    MODERATION_COUNT = "moderationCount"
    MODERATION_STATUS = "moderationStatus"
    PARTNER_ID = "partnerId"
    PARTNER_SORT_VALUE = "partnerSortValue"
    RANK = "rank"
    REPLACEMENT_STATUS = "replacementStatus"
    START_DATE = "startDate"
    STATUS = "status"
    TOTAL_RANK = "totalRank"
    TYPE = "type"
    UPDATED_AT = "updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaylistMatchAttribute(object):
    ADMIN_TAGS = "adminTags"
    CATEGORIES_IDS = "categoriesIds"
    CREATOR_ID = "creatorId"
    DESCRIPTION = "description"
    GROUP_ID = "groupId"
    ID = "id"
    NAME = "name"
    REFERENCE_ID = "referenceId"
    REPLACED_ENTRY_ID = "replacedEntryId"
    REPLACING_ENTRY_ID = "replacingEntryId"
    SEARCH_TEXT = "searchText"
    TAGS = "tags"
    USER_ID = "userId"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaPlaylistOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    END_DATE_ASC = "+endDate"
    MODERATION_COUNT_ASC = "+moderationCount"
    NAME_ASC = "+name"
    PARTNER_SORT_VALUE_ASC = "+partnerSortValue"
    RANK_ASC = "+rank"
    RECENT_ASC = "+recent"
    START_DATE_ASC = "+startDate"
    TOTAL_RANK_ASC = "+totalRank"
    UPDATED_AT_ASC = "+updatedAt"
    WEIGHT_ASC = "+weight"
    CREATED_AT_DESC = "-createdAt"
    END_DATE_DESC = "-endDate"
    MODERATION_COUNT_DESC = "-moderationCount"
    NAME_DESC = "-name"
    PARTNER_SORT_VALUE_DESC = "-partnerSortValue"
    RANK_DESC = "-rank"
    RECENT_DESC = "-recent"
    START_DATE_DESC = "-startDate"
    TOTAL_RANK_DESC = "-totalRank"
    UPDATED_AT_DESC = "-updatedAt"
    WEIGHT_DESC = "-weight"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaQuizUserEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaReportInterval(object):
    DAYS = "days"
    MONTHS = "months"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaReportOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaReportType(object):
    QUIZ = "quiz.QUIZ"
    QUIZ_AGGREGATE_BY_QUESTION = "quiz.QUIZ_AGGREGATE_BY_QUESTION"
    QUIZ_USER_AGGREGATE_BY_QUESTION = "quiz.QUIZ_USER_AGGREGATE_BY_QUESTION"
    QUIZ_USER_PERCENTAGE = "quiz.QUIZ_USER_PERCENTAGE"
    TOP_CONTENT = "1"
    CONTENT_DROPOFF = "2"
    CONTENT_INTERACTIONS = "3"
    MAP_OVERLAY = "4"
    TOP_CONTRIBUTORS = "5"
    TOP_SYNDICATION = "6"
    CONTENT_CONTRIBUTIONS = "7"
    USER_ENGAGEMENT = "11"
    SPEFICIC_USER_ENGAGEMENT = "12"
    USER_TOP_CONTENT = "13"
    USER_CONTENT_DROPOFF = "14"
    USER_CONTENT_INTERACTIONS = "15"
    APPLICATIONS = "16"
    USER_USAGE = "17"
    SPECIFIC_USER_USAGE = "18"
    VAR_USAGE = "19"
    TOP_CREATORS = "20"
    PLATFORMS = "21"
    OPERATION_SYSTEM = "22"
    BROWSERS = "23"
    LIVE = "24"
    TOP_PLAYBACK_CONTEXT = "25"
    VPAAS_USAGE = "26"
    PARTNER_USAGE = "201"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaResponseProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaRuleActionType(object):
    DRM_POLICY = "drm.DRM_POLICY"
    BLOCK = "1"
    PREVIEW = "2"
    LIMIT_FLAVORS = "3"
    ADD_TO_STORAGE = "4"
    LIMIT_DELIVERY_PROFILES = "5"
    SERVE_FROM_REMOTE_SERVER = "6"
    REQUEST_HOST_REGEX = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSchemaType(object):
    BULK_UPLOAD_RESULT_XML = "bulkUploadXml.bulkUploadResultXML"
    BULK_UPLOAD_XML = "bulkUploadXml.bulkUploadXML"
    INGEST_API = "cuePoint.ingestAPI"
    SERVE_API = "cuePoint.serveAPI"
    DROP_FOLDER_XML = "dropFolderXmlBulkUpload.dropFolderXml"
    SYNDICATION = "syndication"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSearchConditionComparison(object):
    EQUAL = "1"
    GREATER_THAN = "2"
    GREATER_THAN_OR_EQUAL = "3"
    LESS_THAN = "4"
    LESS_THAN_OR_EQUAL = "5"
    NOT_EQUAL = "6"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaServerNodeOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    HEARTBEAT_TIME_ASC = "+heartbeatTime"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    HEARTBEAT_TIME_DESC = "-heartbeatTime"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaServerNodeType(object):
    WOWZA_MEDIA_SERVER = "wowza.WOWZA_MEDIA_SERVER"
    EDGE = "1"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSourceType(object):
    LIMELIGHT_LIVE = "limeLight.LIVE_STREAM"
    VELOCIX_LIVE = "velocix.VELOCIX_LIVE"
    FILE = "1"
    WEBCAM = "2"
    URL = "5"
    SEARCH_PROVIDER = "6"
    AKAMAI_LIVE = "29"
    MANUAL_LIVE_STREAM = "30"
    AKAMAI_UNIVERSAL_LIVE = "31"
    LIVE_STREAM = "32"
    LIVE_CHANNEL = "33"
    RECORDED_LIVE = "34"
    CLIP = "35"
    LIVE_STREAM_ONTEXTDATA_CAPTIONS = "42"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStorageProfileOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaStorageProfileProtocol(object):
    KONTIKI = "kontiki.KONTIKI"
    KALTURA_DC = "0"
    FTP = "1"
    SCP = "2"
    SFTP = "3"
    S3 = "6"
    LOCAL = "7"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaSyndicationFeedEntriesOrderBy(object):
    CREATED_AT_DESC = "-createdAt"
    RECENT = "recent"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTaggedObjectType(object):
    ENTRY = "1"
    CATEGORY = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaThumbAssetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    DELETED_AT_ASC = "+deletedAt"
    SIZE_ASC = "+size"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    DELETED_AT_DESC = "-deletedAt"
    SIZE_DESC = "-size"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutputOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTubeMogulSyndicationFeedCategories(object):
    ANIMALS_AND_PETS = "Animals &amp; Pets"
    ARTS_AND_ANIMATION = "Arts &amp; Animation"
    AUTOS = "Autos"
    COMEDY = "Comedy"
    COMMERCIALS_PROMOTIONAL = "Commercials/Promotional"
    ENTERTAINMENT = "Entertainment"
    FAMILY_AND_KIDS = "Family &amp; Kids"
    HOW_TO_INSTRUCTIONAL_DIY = "How To/Instructional/DIY"
    MUSIC = "Music"
    NEWS_AND_BLOGS = "News &amp; Blogs"
    SCIENCE_AND_TECHNOLOGY = "Science &amp; Technology"
    SPORTS = "Sports"
    TRAVEL_AND_PLACES = "Travel &amp; Places"
    VIDEO_GAMES = "Video Games"
    VLOGS_PEOPLE = "Vlogs &amp; People"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaTubeMogulSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUiConfOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUploadTokenOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserEntryOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserEntryStatus(object):
    QUIZ_SUBMITTED = "quiz.3"
    ACTIVE = "1"
    DELETED = "2"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserEntryType(object):
    QUIZ = "quiz.QUIZ"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserLoginDataOrderBy(object):

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaUserRoleOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    ID_ASC = "+id"
    NAME_ASC = "+name"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    ID_DESC = "-id"
    NAME_DESC = "-name"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaVideoCodec(object):
    NONE = ""
    APCH = "apch"
    APCN = "apcn"
    APCO = "apco"
    APCS = "apcs"
    COPY = "copy"
    DNXHD = "dnxhd"
    DV = "dv"
    FLV = "flv"
    H263 = "h263"
    H264 = "h264"
    H264B = "h264b"
    H264H = "h264h"
    H264M = "h264m"
    H265 = "h265"
    MPEG2 = "mpeg2"
    MPEG4 = "mpeg4"
    THEORA = "theora"
    VP6 = "vp6"
    VP8 = "vp8"
    VP9 = "vp9"
    WMV2 = "wmv2"
    WMV3 = "wmv3"
    WVC1A = "wvc1a"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaWidgetOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    CREATED_AT_DESC = "-createdAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeedAdultValues(object):
    ADULT = "adult"
    NON_ADULT = "nonadult"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeedCategories(object):
    ACTION = "Action"
    ANIMALS = "Animals"
    ART_AND_ANIMATION = "Art &amp; Animation"
    COMMERCIALS = "Commercials"
    ENTERTAINMENT_AND_TV = "Entertainment &amp; TV"
    FAMILY = "Family"
    FOOD = "Food"
    FUNNY_VIDEOS = "Funny Videos"
    GAMES = "Games"
    HEALTH_AND_BEAUTY = "Health &amp; Beauty"
    HOW_TO = "How-To"
    MOVIES_AND_SHORTS = "Movies &amp; Shorts"
    MUSIC = "Music"
    NEWS_AND_POLITICS = "News &amp; Politics"
    PEOPLE_AND_VLOGS = "People &amp; Vlogs"
    PRODUCTS_AND_TECH = "Products &amp; Tech."
    SCIENCE_AND_ENVIRONMENT = "Science &amp; Environment"
    SPORTS = "Sports"
    TRANSPORTATION = "Transportation"
    TRAVEL = "Travel"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeedOrderBy(object):
    CREATED_AT_ASC = "+createdAt"
    NAME_ASC = "+name"
    PLAYLIST_ID_ASC = "+playlistId"
    TYPE_ASC = "+type"
    UPDATED_AT_ASC = "+updatedAt"
    CREATED_AT_DESC = "-createdAt"
    NAME_DESC = "-name"
    PLAYLIST_ID_DESC = "-playlistId"
    TYPE_DESC = "-type"
    UPDATED_AT_DESC = "-updatedAt"

    def __init__(self, value):
        self.value = value

    def getValue(self):
        return self.value

########## classes ##########
# @package Kaltura
# @subpackage Client
class KalturaListResponse(KalturaObjectBase):
    def __init__(self,
            totalCount=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.totalCount = totalCount


    PROPERTY_LOADERS = {
        'totalCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaListResponse")
        return kparams

    def getTotalCount(self):
        return self.totalCount


# @package Kaltura
# @subpackage Client
class KalturaBaseRestriction(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseRestriction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAccessControl(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isDefault=NotImplemented,
            restrictions=NotImplemented,
            containsUnsuportedRestrictions=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Access Control Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Access Control Profile
        # @var string
        self.name = name

        # System name of the Access Control Profile
        # @var string
        self.systemName = systemName

        # The description of the Access Control Profile
        # @var string
        self.description = description

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # True if this Conversion Profile is the default
        # @var KalturaNullableBoolean
        self.isDefault = isDefault

        # Array of Access Control Restrictions
        # @var array of KalturaBaseRestriction
        self.restrictions = restrictions

        # Indicates that the access control profile is new and should be handled using KalturaAccessControlProfile object and accessControlProfile service
        # @var bool
        # @readonly
        self.containsUnsuportedRestrictions = containsUnsuportedRestrictions


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'isDefault': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'restrictions': (KalturaObjectFactory.createArray, KalturaBaseRestriction), 
        'containsUnsuportedRestrictions': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControl.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAccessControl")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("isDefault", self.isDefault)
        kparams.addArrayIfDefined("restrictions", self.restrictions)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getRestrictions(self):
        return self.restrictions

    def setRestrictions(self, newRestrictions):
        self.restrictions = newRestrictions

    def getContainsUnsuportedRestrictions(self):
        return self.containsUnsuportedRestrictions


# @package Kaltura
# @subpackage Client
class KalturaContextTypeHolder(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The type of the condition context
        # @var KalturaContextType
        self.type = type


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaContextType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContextTypeHolder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaContextTypeHolder")
        kparams.addStringEnumIfDefined("type", self.type)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType


# @package Kaltura
# @subpackage Client
class KalturaAccessControlContextTypeHolder(KalturaContextTypeHolder):
    def __init__(self,
            type=NotImplemented):
        KalturaContextTypeHolder.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaContextTypeHolder.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlContextTypeHolder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContextTypeHolder.toParams(self)
        kparams.put("objectType", "KalturaAccessControlContextTypeHolder")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRuleAction(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The type of the action
        # @var KalturaRuleActionType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaRuleActionType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRuleAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRuleAction")
        return kparams

    def getType(self):
        return self.type


# @package Kaltura
# @subpackage Client
class KalturaCondition(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The type of the access control condition
        # @var KalturaConditionType
        # @readonly
        self.type = type

        # @var string
        self.description = description

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createString, "KalturaConditionType"), 
        'description': getXmlNodeText, 
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCondition")
        kparams.addStringIfDefined("description", self.description)
        kparams.addBoolIfDefined("not", self.not_)
        return kparams

    def getType(self):
        return self.type

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Kaltura
# @subpackage Client
class KalturaRule(KalturaObjectBase):
    def __init__(self,
            description=NotImplemented,
            ruleData=NotImplemented,
            message=NotImplemented,
            actions=NotImplemented,
            conditions=NotImplemented,
            contexts=NotImplemented,
            stopProcessing=NotImplemented,
            forceAdminValidation=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Short Rule Description
        # @var string
        self.description = description

        # Rule Custom Data to allow saving rule specific information
        # @var string
        self.ruleData = ruleData

        # Message to be thrown to the player in case the rule is fulfilled
        # @var string
        self.message = message

        # Actions to be performed by the player in case the rule is fulfilled
        # @var array of KalturaRuleAction
        self.actions = actions

        # Conditions to validate the rule
        # @var array of KalturaCondition
        self.conditions = conditions

        # Indicates what contexts should be tested by this rule
        # @var array of KalturaContextTypeHolder
        self.contexts = contexts

        # Indicates that this rule is enough and no need to continue checking the rest of the rules
        # @var bool
        self.stopProcessing = stopProcessing

        # Indicates if we should force ks validation for admin ks users as well
        # @var KalturaNullableBoolean
        self.forceAdminValidation = forceAdminValidation


    PROPERTY_LOADERS = {
        'description': getXmlNodeText, 
        'ruleData': getXmlNodeText, 
        'message': getXmlNodeText, 
        'actions': (KalturaObjectFactory.createArray, KalturaRuleAction), 
        'conditions': (KalturaObjectFactory.createArray, KalturaCondition), 
        'contexts': (KalturaObjectFactory.createArray, KalturaContextTypeHolder), 
        'stopProcessing': getXmlNodeBool, 
        'forceAdminValidation': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRule.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRule")
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("ruleData", self.ruleData)
        kparams.addStringIfDefined("message", self.message)
        kparams.addArrayIfDefined("actions", self.actions)
        kparams.addArrayIfDefined("conditions", self.conditions)
        kparams.addArrayIfDefined("contexts", self.contexts)
        kparams.addBoolIfDefined("stopProcessing", self.stopProcessing)
        kparams.addIntEnumIfDefined("forceAdminValidation", self.forceAdminValidation)
        return kparams

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getRuleData(self):
        return self.ruleData

    def setRuleData(self, newRuleData):
        self.ruleData = newRuleData

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions

    def getContexts(self):
        return self.contexts

    def setContexts(self, newContexts):
        self.contexts = newContexts

    def getStopProcessing(self):
        return self.stopProcessing

    def setStopProcessing(self, newStopProcessing):
        self.stopProcessing = newStopProcessing

    def getForceAdminValidation(self):
        return self.forceAdminValidation

    def setForceAdminValidation(self, newForceAdminValidation):
        self.forceAdminValidation = newForceAdminValidation


# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            isDefault=NotImplemented,
            rules=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Access Control Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Access Control Profile
        # @var string
        self.name = name

        # System name of the Access Control Profile
        # @var string
        self.systemName = systemName

        # The description of the Access Control Profile
        # @var string
        self.description = description

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # True if this access control profile is the partner default
        # @var KalturaNullableBoolean
        self.isDefault = isDefault

        # Array of access control rules
        # @var array of KalturaRule
        self.rules = rules


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'isDefault': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'rules': (KalturaObjectFactory.createArray, KalturaRule), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAccessControlProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("isDefault", self.isDefault)
        kparams.addArrayIfDefined("rules", self.rules)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getRules(self):
        return self.rules

    def setRules(self, newRules):
        self.rules = newRules


# @package Kaltura
# @subpackage Client
class KalturaKeyValue(KalturaObjectBase):
    """A key value pair representation to return an array of key-value pairs (associative array)"""

    def __init__(self,
            key=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.key = key

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'key': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaKeyValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaKeyValue")
        kparams.addStringIfDefined("key", self.key)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAccessControlScope(KalturaObjectBase):
    def __init__(self,
            referrer=NotImplemented,
            ip=NotImplemented,
            ks=NotImplemented,
            userAgent=NotImplemented,
            time=NotImplemented,
            contexts=NotImplemented,
            hashes=NotImplemented):
        KalturaObjectBase.__init__(self)

        # URL to be used to test domain conditions.
        # @var string
        self.referrer = referrer

        # IP to be used to test geographic location conditions.
        # @var string
        self.ip = ip

        # Kaltura session to be used to test session and user conditions.
        # @var string
        self.ks = ks

        # Browser or client application to be used to test agent conditions.
        # @var string
        self.userAgent = userAgent

        # Unix timestamp (In seconds) to be used to test entry scheduling, keep null to use now.
        # @var int
        self.time = time

        # Indicates what contexts should be tested. No contexts means any context.
        # @var array of KalturaAccessControlContextTypeHolder
        self.contexts = contexts

        # Array of hashes to pass to the access control profile scope
        # @var array of KalturaKeyValue
        self.hashes = hashes


    PROPERTY_LOADERS = {
        'referrer': getXmlNodeText, 
        'ip': getXmlNodeText, 
        'ks': getXmlNodeText, 
        'userAgent': getXmlNodeText, 
        'time': getXmlNodeInt, 
        'contexts': (KalturaObjectFactory.createArray, KalturaAccessControlContextTypeHolder), 
        'hashes': (KalturaObjectFactory.createArray, KalturaKeyValue), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlScope.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAccessControlScope")
        kparams.addStringIfDefined("referrer", self.referrer)
        kparams.addStringIfDefined("ip", self.ip)
        kparams.addStringIfDefined("ks", self.ks)
        kparams.addStringIfDefined("userAgent", self.userAgent)
        kparams.addIntIfDefined("time", self.time)
        kparams.addArrayIfDefined("contexts", self.contexts)
        kparams.addArrayIfDefined("hashes", self.hashes)
        return kparams

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIp(self):
        return self.ip

    def setIp(self, newIp):
        self.ip = newIp

    def getKs(self):
        return self.ks

    def setKs(self, newKs):
        self.ks = newKs

    def getUserAgent(self):
        return self.userAgent

    def setUserAgent(self, newUserAgent):
        self.userAgent = newUserAgent

    def getTime(self):
        return self.time

    def setTime(self, newTime):
        self.time = newTime

    def getContexts(self):
        return self.contexts

    def setContexts(self, newContexts):
        self.contexts = newContexts

    def getHashes(self):
        return self.hashes

    def setHashes(self, newHashes):
        self.hashes = newHashes


# @package Kaltura
# @subpackage Client
class KalturaReportFilter(KalturaObjectBase):
    def __init__(self,
            dimension=NotImplemented,
            values=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The dimension whose values should be filtered
        # @var string
        self.dimension = dimension

        # The (comma separated) values to include in the filter
        # @var string
        self.values = values


    PROPERTY_LOADERS = {
        'dimension': getXmlNodeText, 
        'values': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportFilter")
        kparams.addStringIfDefined("dimension", self.dimension)
        kparams.addStringIfDefined("values", self.values)
        return kparams

    def getDimension(self):
        return self.dimension

    def setDimension(self, newDimension):
        self.dimension = newDimension

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaAnalyticsFilter(KalturaObjectBase):
    def __init__(self,
            from_time=NotImplemented,
            to_time=NotImplemented,
            metrics=NotImplemented,
            utcOffset=NotImplemented,
            dimensions=NotImplemented,
            filters=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Query start time (in local time)
        # @var string
        self.from_time = from_time

        # Query end time (in local time)
        # @var string
        self.to_time = to_time

        # Comma separated metrics list
        # @var string
        self.metrics = metrics

        # Timezone offset from UTC (in minutes)
        # @var float
        self.utcOffset = utcOffset

        # Comma separated dimensions list
        # @var string
        self.dimensions = dimensions

        # Array of filters
        # @var array of KalturaReportFilter
        self.filters = filters


    PROPERTY_LOADERS = {
        'from_time': getXmlNodeText, 
        'to_time': getXmlNodeText, 
        'metrics': getXmlNodeText, 
        'utcOffset': getXmlNodeFloat, 
        'dimensions': getXmlNodeText, 
        'filters': (KalturaObjectFactory.createArray, KalturaReportFilter), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAnalyticsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAnalyticsFilter")
        kparams.addStringIfDefined("from_time", self.from_time)
        kparams.addStringIfDefined("to_time", self.to_time)
        kparams.addStringIfDefined("metrics", self.metrics)
        kparams.addFloatIfDefined("utcOffset", self.utcOffset)
        kparams.addStringIfDefined("dimensions", self.dimensions)
        kparams.addArrayIfDefined("filters", self.filters)
        return kparams

    def getFrom_time(self):
        return self.from_time

    def setFrom_time(self, newFrom_time):
        self.from_time = newFrom_time

    def getTo_time(self):
        return self.to_time

    def setTo_time(self, newTo_time):
        self.to_time = newTo_time

    def getMetrics(self):
        return self.metrics

    def setMetrics(self, newMetrics):
        self.metrics = newMetrics

    def getUtcOffset(self):
        return self.utcOffset

    def setUtcOffset(self, newUtcOffset):
        self.utcOffset = newUtcOffset

    def getDimensions(self):
        return self.dimensions

    def setDimensions(self, newDimensions):
        self.dimensions = newDimensions

    def getFilters(self):
        return self.filters

    def setFilters(self, newFilters):
        self.filters = newFilters


# @package Kaltura
# @subpackage Client
class KalturaApiExceptionArg(KalturaObjectBase):
    def __init__(self,
            name=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.name = name

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiExceptionArg.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaApiExceptionArg")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAppToken(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            token=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            expiry=NotImplemented,
            sessionType=NotImplemented,
            sessionUserId=NotImplemented,
            sessionDuration=NotImplemented,
            sessionPrivileges=NotImplemented,
            hashType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the application token
        # @var string
        # @readonly
        self.id = id

        # The application token
        # @var string
        # @readonly
        self.token = token

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Application token status
        # @var KalturaAppTokenStatus
        # @readonly
        self.status = status

        # Expiry time of current token (unix timestamp in seconds)
        # @var int
        self.expiry = expiry

        # Type of KS (Kaltura Session) that created using the current token
        # @var KalturaSessionType
        self.sessionType = sessionType

        # User id of KS (Kaltura Session) that created using the current token
        # @var string
        self.sessionUserId = sessionUserId

        # Expiry duration of KS (Kaltura Session) that created using the current token (in seconds)
        # @var int
        self.sessionDuration = sessionDuration

        # Comma separated privileges to be applied on KS (Kaltura Session) that created using the current token
        # @var string
        self.sessionPrivileges = sessionPrivileges

        # @var KalturaAppTokenHashType
        self.hashType = hashType


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'token': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaAppTokenStatus"), 
        'expiry': getXmlNodeInt, 
        'sessionType': (KalturaEnumsFactory.createInt, "KalturaSessionType"), 
        'sessionUserId': getXmlNodeText, 
        'sessionDuration': getXmlNodeInt, 
        'sessionPrivileges': getXmlNodeText, 
        'hashType': (KalturaEnumsFactory.createString, "KalturaAppTokenHashType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAppToken.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAppToken")
        kparams.addIntIfDefined("expiry", self.expiry)
        kparams.addIntEnumIfDefined("sessionType", self.sessionType)
        kparams.addStringIfDefined("sessionUserId", self.sessionUserId)
        kparams.addIntIfDefined("sessionDuration", self.sessionDuration)
        kparams.addStringIfDefined("sessionPrivileges", self.sessionPrivileges)
        kparams.addStringEnumIfDefined("hashType", self.hashType)
        return kparams

    def getId(self):
        return self.id

    def getToken(self):
        return self.token

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getExpiry(self):
        return self.expiry

    def setExpiry(self, newExpiry):
        self.expiry = newExpiry

    def getSessionType(self):
        return self.sessionType

    def setSessionType(self, newSessionType):
        self.sessionType = newSessionType

    def getSessionUserId(self):
        return self.sessionUserId

    def setSessionUserId(self, newSessionUserId):
        self.sessionUserId = newSessionUserId

    def getSessionDuration(self):
        return self.sessionDuration

    def setSessionDuration(self, newSessionDuration):
        self.sessionDuration = newSessionDuration

    def getSessionPrivileges(self):
        return self.sessionPrivileges

    def setSessionPrivileges(self, newSessionPrivileges):
        self.sessionPrivileges = newSessionPrivileges

    def getHashType(self):
        return self.hashType

    def setHashType(self, newHashType):
        self.hashType = newHashType


# @package Kaltura
# @subpackage Client
class KalturaAsset(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The ID of the Flavor Asset
        # @var string
        # @readonly
        self.id = id

        # The entry ID of the Flavor Asset
        # @var string
        # @readonly
        self.entryId = entryId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The version of the Flavor Asset
        # @var int
        # @readonly
        self.version = version

        # The size (in KBytes) of the Flavor Asset
        # @var int
        # @readonly
        self.size = size

        # Tags used to identify the Flavor Asset in various scenarios
        # @var string
        self.tags = tags

        # The file extension
        # @var string
        # @insertonly
        self.fileExt = fileExt

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # System description, error message, warnings and failure cause.
        # @var string
        # @readonly
        self.description = description

        # Partner private data
        # @var string
        self.partnerData = partnerData

        # Partner friendly description
        # @var string
        self.partnerDescription = partnerDescription

        # Comma separated list of source flavor params ids
        # @var string
        self.actualSourceAssetParamsIds = actualSourceAssetParamsIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'entryId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'version': getXmlNodeInt, 
        'size': getXmlNodeInt, 
        'tags': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'description': getXmlNodeText, 
        'partnerData': getXmlNodeText, 
        'partnerDescription': getXmlNodeText, 
        'actualSourceAssetParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAsset")
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("fileExt", self.fileExt)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addStringIfDefined("partnerDescription", self.partnerDescription)
        kparams.addStringIfDefined("actualSourceAssetParamsIds", self.actualSourceAssetParamsIds)
        return kparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def getPartnerId(self):
        return self.partnerId

    def getVersion(self):
        return self.version

    def getSize(self):
        return self.size

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getDescription(self):
        return self.description

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getPartnerDescription(self):
        return self.partnerDescription

    def setPartnerDescription(self, newPartnerDescription):
        self.partnerDescription = newPartnerDescription

    def getActualSourceAssetParamsIds(self):
        return self.actualSourceAssetParamsIds

    def setActualSourceAssetParamsIds(self, newActualSourceAssetParamsIds):
        self.actualSourceAssetParamsIds = newActualSourceAssetParamsIds


# @package Kaltura
# @subpackage Client
class KalturaString(KalturaObjectBase):
    """A string representation to return an array of strings"""

    def __init__(self,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaString.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaString")
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAssetParams(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Flavor Params
        # @var int
        # @readonly
        self.id = id

        # @var int
        self.partnerId = partnerId

        # The name of the Flavor Params
        # @var string
        self.name = name

        # System name of the Flavor Params
        # @var string
        self.systemName = systemName

        # The description of the Flavor Params
        # @var string
        self.description = description

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # True if those Flavor Params are part of system defaults
        # @var KalturaNullableBoolean
        # @readonly
        self.isSystemDefault = isSystemDefault

        # The Flavor Params tags are used to identify the flavor for different usage (e.g. web, hd, mobile)
        # @var string
        self.tags = tags

        # Array of partner permisison names that required for using this asset params
        # @var array of KalturaString
        self.requiredPermissions = requiredPermissions

        # Id of remote storage profile that used to get the source, zero indicates Kaltura data center
        # @var int
        self.sourceRemoteStorageProfileId = sourceRemoteStorageProfileId

        # Comma seperated ids of remote storage profiles that the flavor distributed to, the distribution done by the conversion engine
        # @var int
        self.remoteStorageProfileIds = remoteStorageProfileIds

        # Media parser type to be used for post-conversion validation
        # @var KalturaMediaParserType
        self.mediaParserType = mediaParserType

        # Comma seperated ids of source flavor params this flavor is created from
        # @var string
        self.sourceAssetParamsIds = sourceAssetParamsIds


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'isSystemDefault': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'tags': getXmlNodeText, 
        'requiredPermissions': (KalturaObjectFactory.createArray, KalturaString), 
        'sourceRemoteStorageProfileId': getXmlNodeInt, 
        'remoteStorageProfileIds': getXmlNodeInt, 
        'mediaParserType': (KalturaEnumsFactory.createString, "KalturaMediaParserType"), 
        'sourceAssetParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaAssetParams")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addArrayIfDefined("requiredPermissions", self.requiredPermissions)
        kparams.addIntIfDefined("sourceRemoteStorageProfileId", self.sourceRemoteStorageProfileId)
        kparams.addIntIfDefined("remoteStorageProfileIds", self.remoteStorageProfileIds)
        kparams.addStringEnumIfDefined("mediaParserType", self.mediaParserType)
        kparams.addStringIfDefined("sourceAssetParamsIds", self.sourceAssetParamsIds)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getIsSystemDefault(self):
        return self.isSystemDefault

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getRequiredPermissions(self):
        return self.requiredPermissions

    def setRequiredPermissions(self, newRequiredPermissions):
        self.requiredPermissions = newRequiredPermissions

    def getSourceRemoteStorageProfileId(self):
        return self.sourceRemoteStorageProfileId

    def setSourceRemoteStorageProfileId(self, newSourceRemoteStorageProfileId):
        self.sourceRemoteStorageProfileId = newSourceRemoteStorageProfileId

    def getRemoteStorageProfileIds(self):
        return self.remoteStorageProfileIds

    def setRemoteStorageProfileIds(self, newRemoteStorageProfileIds):
        self.remoteStorageProfileIds = newRemoteStorageProfileIds

    def getMediaParserType(self):
        return self.mediaParserType

    def setMediaParserType(self, newMediaParserType):
        self.mediaParserType = newMediaParserType

    def getSourceAssetParamsIds(self):
        return self.sourceAssetParamsIds

    def setSourceAssetParamsIds(self, newSourceAssetParamsIds):
        self.sourceAssetParamsIds = newSourceAssetParamsIds


# @package Kaltura
# @subpackage Client
class KalturaResource(KalturaObjectBase):
    """Used to ingest entry object, as single resource or list of resources accompanied by asset params ids."""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResource")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaContentResource(KalturaResource):
    """Is a unified way to add content to Kaltura whether it's an uploaded file, webcam recording, imported URL or existing file sync."""

    def __init__(self):
        KalturaResource.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContentResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaResource.toParams(self)
        kparams.put("objectType", "KalturaContentResource")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsResourceContainer(KalturaResource):
    def __init__(self,
            resource=NotImplemented,
            assetParamsId=NotImplemented):
        KalturaResource.__init__(self)

        # The content resource to associate with asset params
        # @var KalturaContentResource
        self.resource = resource

        # The asset params to associate with the reaource
        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'resource': (KalturaObjectFactory.create, KalturaContentResource), 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsResourceContainer.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaResource.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsResourceContainer")
        kparams.addObjectIfDefined("resource", self.resource)
        kparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return kparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Kaltura
# @subpackage Client
class KalturaOperationAttributes(KalturaObjectBase):
    """Base class to all operation attributes types"""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOperationAttributes.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaOperationAttributes")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseEntry(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Auto generated 10 characters alphanumeric string
        # @var string
        # @readonly
        self.id = id

        # Entry name (Min 1 chars)
        # @var string
        self.name = name

        # Entry description
        # @var string
        self.description = description

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The ID of the user who is the owner of this entry
        # @var string
        self.userId = userId

        # The ID of the user who created this entry
        # @var string
        # @insertonly
        self.creatorId = creatorId

        # Entry tags
        # @var string
        self.tags = tags

        # Entry admin tags can be updated only by administrators
        # @var string
        self.adminTags = adminTags

        # Comma separated list of full names of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action.
        # @var string
        self.categories = categories

        # Comma separated list of ids of categories to which this entry belongs. Only categories that don't have entitlement (privacy context) are listed, to retrieve the full list of categories, use the categoryEntry.list action.
        # @var string
        self.categoriesIds = categoriesIds

        # @var KalturaEntryStatus
        # @readonly
        self.status = status

        # Entry moderation status
        # @var KalturaEntryModerationStatus
        # @readonly
        self.moderationStatus = moderationStatus

        # Number of moderation requests waiting for this entry
        # @var int
        # @readonly
        self.moderationCount = moderationCount

        # The type of the entry, this is auto filled by the derived entry object
        # @var KalturaEntryType
        self.type = type

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Entry update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # The calculated average rank. rank = totalRank / votes
        # @var float
        # @readonly
        self.rank = rank

        # The sum of all rank values submitted to the baseEntry.anonymousRank action
        # @var int
        # @readonly
        self.totalRank = totalRank

        # A count of all requests made to the baseEntry.anonymousRank action
        # @var int
        # @readonly
        self.votes = votes

        # @var int
        self.groupId = groupId

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # Download URL for the entry
        # @var string
        # @readonly
        self.downloadUrl = downloadUrl

        # Indexed search text for full text search
        # @var string
        # @readonly
        self.searchText = searchText

        # License type used for this entry
        # @var KalturaLicenseType
        self.licenseType = licenseType

        # Version of the entry data
        # @var int
        # @readonly
        self.version = version

        # Thumbnail URL
        # @var string
        # @readonly
        self.thumbnailUrl = thumbnailUrl

        # The Access Control ID assigned to this entry (null when not set, send -1 to remove)
        # @var int
        self.accessControlId = accessControlId

        # Entry scheduling start date (null when not set, send -1 to remove)
        # @var int
        self.startDate = startDate

        # Entry scheduling end date (null when not set, send -1 to remove)
        # @var int
        self.endDate = endDate

        # Entry external reference id
        # @var string
        self.referenceId = referenceId

        # ID of temporary entry that will replace this entry when it's approved and ready for replacement
        # @var string
        # @readonly
        self.replacingEntryId = replacingEntryId

        # ID of the entry that will be replaced when the replacement approved and this entry is ready
        # @var string
        # @readonly
        self.replacedEntryId = replacedEntryId

        # Status of the replacement readiness and approval
        # @var KalturaEntryReplacementStatus
        # @readonly
        self.replacementStatus = replacementStatus

        # Can be used to store various partner related data as a numeric value
        # @var int
        self.partnerSortValue = partnerSortValue

        # Override the default ingestion profile
        # @var int
        self.conversionProfileId = conversionProfileId

        # IF not empty, points to an entry ID the should replace this current entry's id.
        # @var string
        self.redirectEntryId = redirectEntryId

        # ID of source root entry, used for clipped, skipped and cropped entries that created from another entry
        # @var string
        # @readonly
        self.rootEntryId = rootEntryId

        # ID of source root entry, used for defining entires association
        # @var string
        self.parentEntryId = parentEntryId

        # clipping, skipping and cropping attributes that used to create this entry
        # @var array of KalturaOperationAttributes
        self.operationAttributes = operationAttributes

        # list of user ids that are entitled to edit the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
        # @var string
        self.entitledUsersEdit = entitledUsersEdit

        # list of user ids that are entitled to publish the entry (no server enforcement) The difference between entitledUsersEdit and entitledUsersPublish is applicative only
        # @var string
        self.entitledUsersPublish = entitledUsersPublish

        # Comma seperated string of the capabilities of the entry. Any capability needed can be added to this list.
        # @var string
        # @readonly
        self.capabilities = capabilities

        # Template entry id
        # @var string
        # @insertonly
        self.templateEntryId = templateEntryId


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'creatorId': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'adminTags': getXmlNodeText, 
        'categories': getXmlNodeText, 
        'categoriesIds': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaEntryStatus"), 
        'moderationStatus': (KalturaEnumsFactory.createInt, "KalturaEntryModerationStatus"), 
        'moderationCount': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaEntryType"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'rank': getXmlNodeFloat, 
        'totalRank': getXmlNodeInt, 
        'votes': getXmlNodeInt, 
        'groupId': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'downloadUrl': getXmlNodeText, 
        'searchText': getXmlNodeText, 
        'licenseType': (KalturaEnumsFactory.createInt, "KalturaLicenseType"), 
        'version': getXmlNodeInt, 
        'thumbnailUrl': getXmlNodeText, 
        'accessControlId': getXmlNodeInt, 
        'startDate': getXmlNodeInt, 
        'endDate': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
        'replacingEntryId': getXmlNodeText, 
        'replacedEntryId': getXmlNodeText, 
        'replacementStatus': (KalturaEnumsFactory.createString, "KalturaEntryReplacementStatus"), 
        'partnerSortValue': getXmlNodeInt, 
        'conversionProfileId': getXmlNodeInt, 
        'redirectEntryId': getXmlNodeText, 
        'rootEntryId': getXmlNodeText, 
        'parentEntryId': getXmlNodeText, 
        'operationAttributes': (KalturaObjectFactory.createArray, KalturaOperationAttributes), 
        'entitledUsersEdit': getXmlNodeText, 
        'entitledUsersPublish': getXmlNodeText, 
        'capabilities': getXmlNodeText, 
        'templateEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseEntry")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addStringIfDefined("creatorId", self.creatorId)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("adminTags", self.adminTags)
        kparams.addStringIfDefined("categories", self.categories)
        kparams.addStringIfDefined("categoriesIds", self.categoriesIds)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("groupId", self.groupId)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addIntEnumIfDefined("licenseType", self.licenseType)
        kparams.addIntIfDefined("accessControlId", self.accessControlId)
        kparams.addIntIfDefined("startDate", self.startDate)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        kparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        kparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        kparams.addStringIfDefined("redirectEntryId", self.redirectEntryId)
        kparams.addStringIfDefined("parentEntryId", self.parentEntryId)
        kparams.addArrayIfDefined("operationAttributes", self.operationAttributes)
        kparams.addStringIfDefined("entitledUsersEdit", self.entitledUsersEdit)
        kparams.addStringIfDefined("entitledUsersPublish", self.entitledUsersPublish)
        kparams.addStringIfDefined("templateEntryId", self.templateEntryId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getCreatorId(self):
        return self.creatorId

    def setCreatorId(self, newCreatorId):
        self.creatorId = newCreatorId

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAdminTags(self):
        return self.adminTags

    def setAdminTags(self, newAdminTags):
        self.adminTags = newAdminTags

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getCategoriesIds(self):
        return self.categoriesIds

    def setCategoriesIds(self, newCategoriesIds):
        self.categoriesIds = newCategoriesIds

    def getStatus(self):
        return self.status

    def getModerationStatus(self):
        return self.moderationStatus

    def getModerationCount(self):
        return self.moderationCount

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getRank(self):
        return self.rank

    def getTotalRank(self):
        return self.totalRank

    def getVotes(self):
        return self.votes

    def getGroupId(self):
        return self.groupId

    def setGroupId(self, newGroupId):
        self.groupId = newGroupId

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getDownloadUrl(self):
        return self.downloadUrl

    def getSearchText(self):
        return self.searchText

    def getLicenseType(self):
        return self.licenseType

    def setLicenseType(self, newLicenseType):
        self.licenseType = newLicenseType

    def getVersion(self):
        return self.version

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def getAccessControlId(self):
        return self.accessControlId

    def setAccessControlId(self, newAccessControlId):
        self.accessControlId = newAccessControlId

    def getStartDate(self):
        return self.startDate

    def setStartDate(self, newStartDate):
        self.startDate = newStartDate

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getReplacingEntryId(self):
        return self.replacingEntryId

    def getReplacedEntryId(self):
        return self.replacedEntryId

    def getReplacementStatus(self):
        return self.replacementStatus

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId

    def getRedirectEntryId(self):
        return self.redirectEntryId

    def setRedirectEntryId(self, newRedirectEntryId):
        self.redirectEntryId = newRedirectEntryId

    def getRootEntryId(self):
        return self.rootEntryId

    def getParentEntryId(self):
        return self.parentEntryId

    def setParentEntryId(self, newParentEntryId):
        self.parentEntryId = newParentEntryId

    def getOperationAttributes(self):
        return self.operationAttributes

    def setOperationAttributes(self, newOperationAttributes):
        self.operationAttributes = newOperationAttributes

    def getEntitledUsersEdit(self):
        return self.entitledUsersEdit

    def setEntitledUsersEdit(self, newEntitledUsersEdit):
        self.entitledUsersEdit = newEntitledUsersEdit

    def getEntitledUsersPublish(self):
        return self.entitledUsersPublish

    def setEntitledUsersPublish(self, newEntitledUsersPublish):
        self.entitledUsersPublish = newEntitledUsersPublish

    def getCapabilities(self):
        return self.capabilities

    def getTemplateEntryId(self):
        return self.templateEntryId

    def setTemplateEntryId(self, newTemplateEntryId):
        self.templateEntryId = newTemplateEntryId


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryCloneOptionItem(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryCloneOptionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryCloneOptionItem")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseResponseProfile(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseResponseProfile")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseSyndicationFeed(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var string
        # @readonly
        self.feedUrl = feedUrl

        # @var int
        # @readonly
        self.partnerId = partnerId

        # link a playlist that will set what content the feed will include
        # 	 if empty, all content will be included in feed
        # @var string
        self.playlistId = playlistId

        # feed name
        # @var string
        self.name = name

        # feed status
        # @var KalturaSyndicationFeedStatus
        # @readonly
        self.status = status

        # feed type
        # @var KalturaSyndicationFeedType
        # @insertonly
        self.type = type

        # Base URL for each video, on the partners site
        # 	 This is required by all syndication types.
        # @var string
        self.landingPage = landingPage

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # allow_embed tells google OR yahoo weather to allow embedding the video on google OR yahoo video results
        # 	 or just to provide a link to the landing page.
        # 	 it is applied on the video-player_loc property in the XML (google)
        # 	 and addes media-player tag (yahoo)
        # @var bool
        self.allowEmbed = allowEmbed

        # Select a uiconf ID as player skin to include in the kwidget url
        # @var int
        self.playerUiconfId = playerUiconfId

        # @var int
        self.flavorParamId = flavorParamId

        # @var bool
        self.transcodeExistingContent = transcodeExistingContent

        # @var bool
        self.addToDefaultConversionProfile = addToDefaultConversionProfile

        # @var string
        self.categories = categories

        # @var int
        self.storageId = storageId

        # @var KalturaSyndicationFeedEntriesOrderBy
        self.entriesOrderBy = entriesOrderBy

        # Should enforce entitlement on feed entries
        # @var bool
        self.enforceEntitlement = enforceEntitlement

        # Set privacy context for search entries that assiged to private and public categories within a category privacy context.
        # @var string
        self.privacyContext = privacyContext

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var bool
        self.useCategoryEntries = useCategoryEntries


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'feedUrl': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'playlistId': getXmlNodeText, 
        'name': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaSyndicationFeedStatus"), 
        'type': (KalturaEnumsFactory.createInt, "KalturaSyndicationFeedType"), 
        'landingPage': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'allowEmbed': getXmlNodeBool, 
        'playerUiconfId': getXmlNodeInt, 
        'flavorParamId': getXmlNodeInt, 
        'transcodeExistingContent': getXmlNodeBool, 
        'addToDefaultConversionProfile': getXmlNodeBool, 
        'categories': getXmlNodeText, 
        'storageId': getXmlNodeInt, 
        'entriesOrderBy': (KalturaEnumsFactory.createString, "KalturaSyndicationFeedEntriesOrderBy"), 
        'enforceEntitlement': getXmlNodeBool, 
        'privacyContext': getXmlNodeText, 
        'updatedAt': getXmlNodeInt, 
        'useCategoryEntries': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBaseSyndicationFeed")
        kparams.addStringIfDefined("playlistId", self.playlistId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("landingPage", self.landingPage)
        kparams.addBoolIfDefined("allowEmbed", self.allowEmbed)
        kparams.addIntIfDefined("playerUiconfId", self.playerUiconfId)
        kparams.addIntIfDefined("flavorParamId", self.flavorParamId)
        kparams.addBoolIfDefined("transcodeExistingContent", self.transcodeExistingContent)
        kparams.addBoolIfDefined("addToDefaultConversionProfile", self.addToDefaultConversionProfile)
        kparams.addStringIfDefined("categories", self.categories)
        kparams.addIntIfDefined("storageId", self.storageId)
        kparams.addStringEnumIfDefined("entriesOrderBy", self.entriesOrderBy)
        kparams.addBoolIfDefined("enforceEntitlement", self.enforceEntitlement)
        kparams.addStringIfDefined("privacyContext", self.privacyContext)
        kparams.addBoolIfDefined("useCategoryEntries", self.useCategoryEntries)
        return kparams

    def getId(self):
        return self.id

    def getFeedUrl(self):
        return self.feedUrl

    def getPartnerId(self):
        return self.partnerId

    def getPlaylistId(self):
        return self.playlistId

    def setPlaylistId(self, newPlaylistId):
        self.playlistId = newPlaylistId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStatus(self):
        return self.status

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getLandingPage(self):
        return self.landingPage

    def setLandingPage(self, newLandingPage):
        self.landingPage = newLandingPage

    def getCreatedAt(self):
        return self.createdAt

    def getAllowEmbed(self):
        return self.allowEmbed

    def setAllowEmbed(self, newAllowEmbed):
        self.allowEmbed = newAllowEmbed

    def getPlayerUiconfId(self):
        return self.playerUiconfId

    def setPlayerUiconfId(self, newPlayerUiconfId):
        self.playerUiconfId = newPlayerUiconfId

    def getFlavorParamId(self):
        return self.flavorParamId

    def setFlavorParamId(self, newFlavorParamId):
        self.flavorParamId = newFlavorParamId

    def getTranscodeExistingContent(self):
        return self.transcodeExistingContent

    def setTranscodeExistingContent(self, newTranscodeExistingContent):
        self.transcodeExistingContent = newTranscodeExistingContent

    def getAddToDefaultConversionProfile(self):
        return self.addToDefaultConversionProfile

    def setAddToDefaultConversionProfile(self, newAddToDefaultConversionProfile):
        self.addToDefaultConversionProfile = newAddToDefaultConversionProfile

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getStorageId(self):
        return self.storageId

    def setStorageId(self, newStorageId):
        self.storageId = newStorageId

    def getEntriesOrderBy(self):
        return self.entriesOrderBy

    def setEntriesOrderBy(self, newEntriesOrderBy):
        self.entriesOrderBy = newEntriesOrderBy

    def getEnforceEntitlement(self):
        return self.enforceEntitlement

    def setEnforceEntitlement(self, newEnforceEntitlement):
        self.enforceEntitlement = newEnforceEntitlement

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getUpdatedAt(self):
        return self.updatedAt

    def getUseCategoryEntries(self):
        return self.useCategoryEntries

    def setUseCategoryEntries(self, newUseCategoryEntries):
        self.useCategoryEntries = newUseCategoryEntries


# @package Kaltura
# @subpackage Client
class KalturaJobData(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBatchHistoryData(KalturaObjectBase):
    def __init__(self,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            batchIndex=NotImplemented,
            timeStamp=NotImplemented,
            message=NotImplemented,
            errType=NotImplemented,
            errNumber=NotImplemented,
            hostName=NotImplemented,
            sessionId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.schedulerId = schedulerId

        # @var int
        self.workerId = workerId

        # @var int
        self.batchIndex = batchIndex

        # @var int
        self.timeStamp = timeStamp

        # @var string
        self.message = message

        # @var int
        self.errType = errType

        # @var int
        self.errNumber = errNumber

        # @var string
        self.hostName = hostName

        # @var string
        self.sessionId = sessionId


    PROPERTY_LOADERS = {
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'timeStamp': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'errType': getXmlNodeInt, 
        'errNumber': getXmlNodeInt, 
        'hostName': getXmlNodeText, 
        'sessionId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchHistoryData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBatchHistoryData")
        kparams.addIntIfDefined("schedulerId", self.schedulerId)
        kparams.addIntIfDefined("workerId", self.workerId)
        kparams.addIntIfDefined("batchIndex", self.batchIndex)
        kparams.addIntIfDefined("timeStamp", self.timeStamp)
        kparams.addStringIfDefined("message", self.message)
        kparams.addIntIfDefined("errType", self.errType)
        kparams.addIntIfDefined("errNumber", self.errNumber)
        kparams.addStringIfDefined("hostName", self.hostName)
        kparams.addStringIfDefined("sessionId", self.sessionId)
        return kparams

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getTimeStamp(self):
        return self.timeStamp

    def setTimeStamp(self, newTimeStamp):
        self.timeStamp = newTimeStamp

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getErrType(self):
        return self.errType

    def setErrType(self, newErrType):
        self.errType = newErrType

    def getErrNumber(self):
        return self.errNumber

    def setErrNumber(self, newErrNumber):
        self.errNumber = newErrNumber

    def getHostName(self):
        return self.hostName

    def setHostName(self, newHostName):
        self.hostName = newHostName

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId


# @package Kaltura
# @subpackage Client
class KalturaBatchJob(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            lockExpiration=NotImplemented,
            executionAttempts=NotImplemented,
            lockVersion=NotImplemented,
            entryId=NotImplemented,
            entryName=NotImplemented,
            jobType=NotImplemented,
            jobSubType=NotImplemented,
            data=NotImplemented,
            status=NotImplemented,
            abort=NotImplemented,
            checkAgainTimeout=NotImplemented,
            message=NotImplemented,
            description=NotImplemented,
            priority=NotImplemented,
            history=NotImplemented,
            bulkJobId=NotImplemented,
            batchVersion=NotImplemented,
            parentJobId=NotImplemented,
            rootJobId=NotImplemented,
            queueTime=NotImplemented,
            finishTime=NotImplemented,
            errType=NotImplemented,
            errNumber=NotImplemented,
            estimatedEffort=NotImplemented,
            urgency=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            batchIndex=NotImplemented,
            lastSchedulerId=NotImplemented,
            lastWorkerId=NotImplemented,
            dc=NotImplemented,
            jobObjectId=NotImplemented,
            jobObjectType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # @var int
        # @readonly
        self.lockExpiration = lockExpiration

        # @var int
        # @readonly
        self.executionAttempts = executionAttempts

        # @var int
        # @readonly
        self.lockVersion = lockVersion

        # @var string
        self.entryId = entryId

        # @var string
        self.entryName = entryName

        # @var KalturaBatchJobType
        # @readonly
        self.jobType = jobType

        # @var int
        self.jobSubType = jobSubType

        # @var KalturaJobData
        self.data = data

        # @var KalturaBatchJobStatus
        self.status = status

        # @var int
        self.abort = abort

        # @var int
        self.checkAgainTimeout = checkAgainTimeout

        # @var string
        self.message = message

        # @var string
        self.description = description

        # @var int
        self.priority = priority

        # @var array of KalturaBatchHistoryData
        self.history = history

        # The id of the bulk upload job that initiated this job
        # @var int
        self.bulkJobId = bulkJobId

        # @var int
        self.batchVersion = batchVersion

        # When one job creates another - the parent should set this parentJobId to be its own id.
        # @var int
        self.parentJobId = parentJobId

        # The id of the root parent job
        # @var int
        self.rootJobId = rootJobId

        # The time that the job was pulled from the queue
        # @var int
        self.queueTime = queueTime

        # The time that the job was finished or closed as failed
        # @var int
        self.finishTime = finishTime

        # @var KalturaBatchJobErrorTypes
        self.errType = errType

        # @var int
        self.errNumber = errNumber

        # @var int
        self.estimatedEffort = estimatedEffort

        # @var int
        self.urgency = urgency

        # @var int
        self.schedulerId = schedulerId

        # @var int
        self.workerId = workerId

        # @var int
        self.batchIndex = batchIndex

        # @var int
        self.lastSchedulerId = lastSchedulerId

        # @var int
        self.lastWorkerId = lastWorkerId

        # @var int
        self.dc = dc

        # @var string
        self.jobObjectId = jobObjectId

        # @var int
        self.jobObjectType = jobObjectType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'lockExpiration': getXmlNodeInt, 
        'executionAttempts': getXmlNodeInt, 
        'lockVersion': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'entryName': getXmlNodeText, 
        'jobType': (KalturaEnumsFactory.createString, "KalturaBatchJobType"), 
        'jobSubType': getXmlNodeInt, 
        'data': (KalturaObjectFactory.create, KalturaJobData), 
        'status': (KalturaEnumsFactory.createInt, "KalturaBatchJobStatus"), 
        'abort': getXmlNodeInt, 
        'checkAgainTimeout': getXmlNodeInt, 
        'message': getXmlNodeText, 
        'description': getXmlNodeText, 
        'priority': getXmlNodeInt, 
        'history': (KalturaObjectFactory.createArray, KalturaBatchHistoryData), 
        'bulkJobId': getXmlNodeInt, 
        'batchVersion': getXmlNodeInt, 
        'parentJobId': getXmlNodeInt, 
        'rootJobId': getXmlNodeInt, 
        'queueTime': getXmlNodeInt, 
        'finishTime': getXmlNodeInt, 
        'errType': (KalturaEnumsFactory.createInt, "KalturaBatchJobErrorTypes"), 
        'errNumber': getXmlNodeInt, 
        'estimatedEffort': getXmlNodeInt, 
        'urgency': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'lastSchedulerId': getXmlNodeInt, 
        'lastWorkerId': getXmlNodeInt, 
        'dc': getXmlNodeInt, 
        'jobObjectId': getXmlNodeText, 
        'jobObjectType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchJob.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBatchJob")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("entryName", self.entryName)
        kparams.addIntIfDefined("jobSubType", self.jobSubType)
        kparams.addObjectIfDefined("data", self.data)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addIntIfDefined("abort", self.abort)
        kparams.addIntIfDefined("checkAgainTimeout", self.checkAgainTimeout)
        kparams.addStringIfDefined("message", self.message)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntIfDefined("priority", self.priority)
        kparams.addArrayIfDefined("history", self.history)
        kparams.addIntIfDefined("bulkJobId", self.bulkJobId)
        kparams.addIntIfDefined("batchVersion", self.batchVersion)
        kparams.addIntIfDefined("parentJobId", self.parentJobId)
        kparams.addIntIfDefined("rootJobId", self.rootJobId)
        kparams.addIntIfDefined("queueTime", self.queueTime)
        kparams.addIntIfDefined("finishTime", self.finishTime)
        kparams.addIntEnumIfDefined("errType", self.errType)
        kparams.addIntIfDefined("errNumber", self.errNumber)
        kparams.addIntIfDefined("estimatedEffort", self.estimatedEffort)
        kparams.addIntIfDefined("urgency", self.urgency)
        kparams.addIntIfDefined("schedulerId", self.schedulerId)
        kparams.addIntIfDefined("workerId", self.workerId)
        kparams.addIntIfDefined("batchIndex", self.batchIndex)
        kparams.addIntIfDefined("lastSchedulerId", self.lastSchedulerId)
        kparams.addIntIfDefined("lastWorkerId", self.lastWorkerId)
        kparams.addIntIfDefined("dc", self.dc)
        kparams.addStringIfDefined("jobObjectId", self.jobObjectId)
        kparams.addIntIfDefined("jobObjectType", self.jobObjectType)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getLockExpiration(self):
        return self.lockExpiration

    def getExecutionAttempts(self):
        return self.executionAttempts

    def getLockVersion(self):
        return self.lockVersion

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getEntryName(self):
        return self.entryName

    def setEntryName(self, newEntryName):
        self.entryName = newEntryName

    def getJobType(self):
        return self.jobType

    def getJobSubType(self):
        return self.jobSubType

    def setJobSubType(self, newJobSubType):
        self.jobSubType = newJobSubType

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getAbort(self):
        return self.abort

    def setAbort(self, newAbort):
        self.abort = newAbort

    def getCheckAgainTimeout(self):
        return self.checkAgainTimeout

    def setCheckAgainTimeout(self, newCheckAgainTimeout):
        self.checkAgainTimeout = newCheckAgainTimeout

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPriority(self):
        return self.priority

    def setPriority(self, newPriority):
        self.priority = newPriority

    def getHistory(self):
        return self.history

    def setHistory(self, newHistory):
        self.history = newHistory

    def getBulkJobId(self):
        return self.bulkJobId

    def setBulkJobId(self, newBulkJobId):
        self.bulkJobId = newBulkJobId

    def getBatchVersion(self):
        return self.batchVersion

    def setBatchVersion(self, newBatchVersion):
        self.batchVersion = newBatchVersion

    def getParentJobId(self):
        return self.parentJobId

    def setParentJobId(self, newParentJobId):
        self.parentJobId = newParentJobId

    def getRootJobId(self):
        return self.rootJobId

    def setRootJobId(self, newRootJobId):
        self.rootJobId = newRootJobId

    def getQueueTime(self):
        return self.queueTime

    def setQueueTime(self, newQueueTime):
        self.queueTime = newQueueTime

    def getFinishTime(self):
        return self.finishTime

    def setFinishTime(self, newFinishTime):
        self.finishTime = newFinishTime

    def getErrType(self):
        return self.errType

    def setErrType(self, newErrType):
        self.errType = newErrType

    def getErrNumber(self):
        return self.errNumber

    def setErrNumber(self, newErrNumber):
        self.errNumber = newErrNumber

    def getEstimatedEffort(self):
        return self.estimatedEffort

    def setEstimatedEffort(self, newEstimatedEffort):
        self.estimatedEffort = newEstimatedEffort

    def getUrgency(self):
        return self.urgency

    def setUrgency(self, newUrgency):
        self.urgency = newUrgency

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getLastSchedulerId(self):
        return self.lastSchedulerId

    def setLastSchedulerId(self, newLastSchedulerId):
        self.lastSchedulerId = newLastSchedulerId

    def getLastWorkerId(self):
        return self.lastWorkerId

    def setLastWorkerId(self, newLastWorkerId):
        self.lastWorkerId = newLastWorkerId

    def getDc(self):
        return self.dc

    def setDc(self, newDc):
        self.dc = newDc

    def getJobObjectId(self):
        return self.jobObjectId

    def setJobObjectId(self, newJobObjectId):
        self.jobObjectId = newJobObjectId

    def getJobObjectType(self):
        return self.jobObjectType

    def setJobObjectType(self, newJobObjectType):
        self.jobObjectType = newJobObjectType


# @package Kaltura
# @subpackage Client
class KalturaPlayerDeliveryType(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            label=NotImplemented,
            flashvars=NotImplemented,
            minVersion=NotImplemented,
            enabledByDefault=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.label = label

        # @var array of KalturaKeyValue
        self.flashvars = flashvars

        # @var string
        self.minVersion = minVersion

        # @var bool
        self.enabledByDefault = enabledByDefault


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'label': getXmlNodeText, 
        'flashvars': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'minVersion': getXmlNodeText, 
        'enabledByDefault': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayerDeliveryType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlayerDeliveryType")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("label", self.label)
        kparams.addArrayIfDefined("flashvars", self.flashvars)
        kparams.addStringIfDefined("minVersion", self.minVersion)
        kparams.addBoolIfDefined("enabledByDefault", self.enabledByDefault)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getFlashvars(self):
        return self.flashvars

    def setFlashvars(self, newFlashvars):
        self.flashvars = newFlashvars

    def getMinVersion(self):
        return self.minVersion

    def setMinVersion(self, newMinVersion):
        self.minVersion = newMinVersion

    def getEnabledByDefault(self):
        return self.enabledByDefault

    def setEnabledByDefault(self, newEnabledByDefault):
        self.enabledByDefault = newEnabledByDefault


# @package Kaltura
# @subpackage Client
class KalturaPlayerEmbedCodeType(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            label=NotImplemented,
            entryOnly=NotImplemented,
            minVersion=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.label = label

        # @var bool
        self.entryOnly = entryOnly

        # @var string
        self.minVersion = minVersion


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'label': getXmlNodeText, 
        'entryOnly': getXmlNodeBool, 
        'minVersion': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayerEmbedCodeType.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPlayerEmbedCodeType")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("label", self.label)
        kparams.addBoolIfDefined("entryOnly", self.entryOnly)
        kparams.addStringIfDefined("minVersion", self.minVersion)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLabel(self):
        return self.label

    def setLabel(self, newLabel):
        self.label = newLabel

    def getEntryOnly(self):
        return self.entryOnly

    def setEntryOnly(self, newEntryOnly):
        self.entryOnly = newEntryOnly

    def getMinVersion(self):
        return self.minVersion

    def setMinVersion(self, newMinVersion):
        self.minVersion = newMinVersion


# @package Kaltura
# @subpackage Client
class KalturaPartner(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            website=NotImplemented,
            notificationUrl=NotImplemented,
            appearInSearch=NotImplemented,
            createdAt=NotImplemented,
            adminName=NotImplemented,
            adminEmail=NotImplemented,
            description=NotImplemented,
            commercialUse=NotImplemented,
            landingPage=NotImplemented,
            userLandingPage=NotImplemented,
            contentCategories=NotImplemented,
            type=NotImplemented,
            phone=NotImplemented,
            describeYourself=NotImplemented,
            adultContent=NotImplemented,
            defConversionProfileType=NotImplemented,
            notify=NotImplemented,
            status=NotImplemented,
            allowQuickEdit=NotImplemented,
            mergeEntryLists=NotImplemented,
            notificationsConfig=NotImplemented,
            maxUploadSize=NotImplemented,
            partnerPackage=NotImplemented,
            secret=NotImplemented,
            adminSecret=NotImplemented,
            cmsPassword=NotImplemented,
            allowMultiNotification=NotImplemented,
            adminLoginUsersQuota=NotImplemented,
            adminUserId=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            additionalParams=NotImplemented,
            publishersQuota=NotImplemented,
            partnerGroupType=NotImplemented,
            defaultEntitlementEnforcement=NotImplemented,
            defaultDeliveryType=NotImplemented,
            defaultEmbedCodeType=NotImplemented,
            deliveryTypes=NotImplemented,
            embedCodeTypes=NotImplemented,
            templatePartnerId=NotImplemented,
            ignoreSeoLinks=NotImplemented,
            host=NotImplemented,
            cdnHost=NotImplemented,
            isFirstLogin=NotImplemented,
            logoutUrl=NotImplemented,
            partnerParentId=NotImplemented,
            crmId=NotImplemented,
            referenceId=NotImplemented,
            timeAlignedRenditions=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.website = website

        # @var string
        self.notificationUrl = notificationUrl

        # @var int
        self.appearInSearch = appearInSearch

        # @var int
        # @readonly
        self.createdAt = createdAt

        # deprecated - lastName and firstName replaces this field
        # @var string
        self.adminName = adminName

        # @var string
        self.adminEmail = adminEmail

        # @var string
        self.description = description

        # @var KalturaCommercialUseType
        self.commercialUse = commercialUse

        # @var string
        self.landingPage = landingPage

        # @var string
        self.userLandingPage = userLandingPage

        # @var string
        self.contentCategories = contentCategories

        # @var KalturaPartnerType
        self.type = type

        # @var string
        self.phone = phone

        # @var string
        self.describeYourself = describeYourself

        # @var bool
        self.adultContent = adultContent

        # @var string
        self.defConversionProfileType = defConversionProfileType

        # @var int
        self.notify = notify

        # @var KalturaPartnerStatus
        # @readonly
        self.status = status

        # @var int
        self.allowQuickEdit = allowQuickEdit

        # @var int
        self.mergeEntryLists = mergeEntryLists

        # @var string
        self.notificationsConfig = notificationsConfig

        # @var int
        self.maxUploadSize = maxUploadSize

        # @var int
        # @readonly
        self.partnerPackage = partnerPackage

        # @var string
        # @readonly
        self.secret = secret

        # @var string
        # @readonly
        self.adminSecret = adminSecret

        # @var string
        # @readonly
        self.cmsPassword = cmsPassword

        # @var int
        self.allowMultiNotification = allowMultiNotification

        # @var int
        # @readonly
        self.adminLoginUsersQuota = adminLoginUsersQuota

        # @var string
        self.adminUserId = adminUserId

        # firstName and lastName replace the old (deprecated) adminName
        # @var string
        self.firstName = firstName

        # lastName and firstName replace the old (deprecated) adminName
        # @var string
        self.lastName = lastName

        # country code (2char) - this field is optional
        # @var string
        self.country = country

        # state code (2char) - this field is optional
        # @var string
        self.state = state

        # @var array of KalturaKeyValue
        # @insertonly
        self.additionalParams = additionalParams

        # @var int
        # @readonly
        self.publishersQuota = publishersQuota

        # @var KalturaPartnerGroupType
        # @readonly
        self.partnerGroupType = partnerGroupType

        # @var bool
        # @readonly
        self.defaultEntitlementEnforcement = defaultEntitlementEnforcement

        # @var string
        # @readonly
        self.defaultDeliveryType = defaultDeliveryType

        # @var string
        # @readonly
        self.defaultEmbedCodeType = defaultEmbedCodeType

        # @var array of KalturaPlayerDeliveryType
        # @readonly
        self.deliveryTypes = deliveryTypes

        # @var array of KalturaPlayerEmbedCodeType
        # @readonly
        self.embedCodeTypes = embedCodeTypes

        # @var int
        # @readonly
        self.templatePartnerId = templatePartnerId

        # @var bool
        # @readonly
        self.ignoreSeoLinks = ignoreSeoLinks

        # @var string
        # @readonly
        self.host = host

        # @var string
        # @readonly
        self.cdnHost = cdnHost

        # @var bool
        # @readonly
        self.isFirstLogin = isFirstLogin

        # @var string
        # @readonly
        self.logoutUrl = logoutUrl

        # @var int
        # @readonly
        self.partnerParentId = partnerParentId

        # @var string
        # @readonly
        self.crmId = crmId

        # @var string
        self.referenceId = referenceId

        # @var bool
        # @readonly
        self.timeAlignedRenditions = timeAlignedRenditions


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'website': getXmlNodeText, 
        'notificationUrl': getXmlNodeText, 
        'appearInSearch': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'adminName': getXmlNodeText, 
        'adminEmail': getXmlNodeText, 
        'description': getXmlNodeText, 
        'commercialUse': (KalturaEnumsFactory.createInt, "KalturaCommercialUseType"), 
        'landingPage': getXmlNodeText, 
        'userLandingPage': getXmlNodeText, 
        'contentCategories': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createInt, "KalturaPartnerType"), 
        'phone': getXmlNodeText, 
        'describeYourself': getXmlNodeText, 
        'adultContent': getXmlNodeBool, 
        'defConversionProfileType': getXmlNodeText, 
        'notify': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaPartnerStatus"), 
        'allowQuickEdit': getXmlNodeInt, 
        'mergeEntryLists': getXmlNodeInt, 
        'notificationsConfig': getXmlNodeText, 
        'maxUploadSize': getXmlNodeInt, 
        'partnerPackage': getXmlNodeInt, 
        'secret': getXmlNodeText, 
        'adminSecret': getXmlNodeText, 
        'cmsPassword': getXmlNodeText, 
        'allowMultiNotification': getXmlNodeInt, 
        'adminLoginUsersQuota': getXmlNodeInt, 
        'adminUserId': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'additionalParams': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'publishersQuota': getXmlNodeInt, 
        'partnerGroupType': (KalturaEnumsFactory.createInt, "KalturaPartnerGroupType"), 
        'defaultEntitlementEnforcement': getXmlNodeBool, 
        'defaultDeliveryType': getXmlNodeText, 
        'defaultEmbedCodeType': getXmlNodeText, 
        'deliveryTypes': (KalturaObjectFactory.createArray, KalturaPlayerDeliveryType), 
        'embedCodeTypes': (KalturaObjectFactory.createArray, KalturaPlayerEmbedCodeType), 
        'templatePartnerId': getXmlNodeInt, 
        'ignoreSeoLinks': getXmlNodeBool, 
        'host': getXmlNodeText, 
        'cdnHost': getXmlNodeText, 
        'isFirstLogin': getXmlNodeBool, 
        'logoutUrl': getXmlNodeText, 
        'partnerParentId': getXmlNodeInt, 
        'crmId': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'timeAlignedRenditions': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartner.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartner")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("website", self.website)
        kparams.addStringIfDefined("notificationUrl", self.notificationUrl)
        kparams.addIntIfDefined("appearInSearch", self.appearInSearch)
        kparams.addStringIfDefined("adminName", self.adminName)
        kparams.addStringIfDefined("adminEmail", self.adminEmail)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("commercialUse", self.commercialUse)
        kparams.addStringIfDefined("landingPage", self.landingPage)
        kparams.addStringIfDefined("userLandingPage", self.userLandingPage)
        kparams.addStringIfDefined("contentCategories", self.contentCategories)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("phone", self.phone)
        kparams.addStringIfDefined("describeYourself", self.describeYourself)
        kparams.addBoolIfDefined("adultContent", self.adultContent)
        kparams.addStringIfDefined("defConversionProfileType", self.defConversionProfileType)
        kparams.addIntIfDefined("notify", self.notify)
        kparams.addIntIfDefined("allowQuickEdit", self.allowQuickEdit)
        kparams.addIntIfDefined("mergeEntryLists", self.mergeEntryLists)
        kparams.addStringIfDefined("notificationsConfig", self.notificationsConfig)
        kparams.addIntIfDefined("maxUploadSize", self.maxUploadSize)
        kparams.addIntIfDefined("allowMultiNotification", self.allowMultiNotification)
        kparams.addStringIfDefined("adminUserId", self.adminUserId)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        kparams.addStringIfDefined("country", self.country)
        kparams.addStringIfDefined("state", self.state)
        kparams.addArrayIfDefined("additionalParams", self.additionalParams)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getWebsite(self):
        return self.website

    def setWebsite(self, newWebsite):
        self.website = newWebsite

    def getNotificationUrl(self):
        return self.notificationUrl

    def setNotificationUrl(self, newNotificationUrl):
        self.notificationUrl = newNotificationUrl

    def getAppearInSearch(self):
        return self.appearInSearch

    def setAppearInSearch(self, newAppearInSearch):
        self.appearInSearch = newAppearInSearch

    def getCreatedAt(self):
        return self.createdAt

    def getAdminName(self):
        return self.adminName

    def setAdminName(self, newAdminName):
        self.adminName = newAdminName

    def getAdminEmail(self):
        return self.adminEmail

    def setAdminEmail(self, newAdminEmail):
        self.adminEmail = newAdminEmail

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCommercialUse(self):
        return self.commercialUse

    def setCommercialUse(self, newCommercialUse):
        self.commercialUse = newCommercialUse

    def getLandingPage(self):
        return self.landingPage

    def setLandingPage(self, newLandingPage):
        self.landingPage = newLandingPage

    def getUserLandingPage(self):
        return self.userLandingPage

    def setUserLandingPage(self, newUserLandingPage):
        self.userLandingPage = newUserLandingPage

    def getContentCategories(self):
        return self.contentCategories

    def setContentCategories(self, newContentCategories):
        self.contentCategories = newContentCategories

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getPhone(self):
        return self.phone

    def setPhone(self, newPhone):
        self.phone = newPhone

    def getDescribeYourself(self):
        return self.describeYourself

    def setDescribeYourself(self, newDescribeYourself):
        self.describeYourself = newDescribeYourself

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getDefConversionProfileType(self):
        return self.defConversionProfileType

    def setDefConversionProfileType(self, newDefConversionProfileType):
        self.defConversionProfileType = newDefConversionProfileType

    def getNotify(self):
        return self.notify

    def setNotify(self, newNotify):
        self.notify = newNotify

    def getStatus(self):
        return self.status

    def getAllowQuickEdit(self):
        return self.allowQuickEdit

    def setAllowQuickEdit(self, newAllowQuickEdit):
        self.allowQuickEdit = newAllowQuickEdit

    def getMergeEntryLists(self):
        return self.mergeEntryLists

    def setMergeEntryLists(self, newMergeEntryLists):
        self.mergeEntryLists = newMergeEntryLists

    def getNotificationsConfig(self):
        return self.notificationsConfig

    def setNotificationsConfig(self, newNotificationsConfig):
        self.notificationsConfig = newNotificationsConfig

    def getMaxUploadSize(self):
        return self.maxUploadSize

    def setMaxUploadSize(self, newMaxUploadSize):
        self.maxUploadSize = newMaxUploadSize

    def getPartnerPackage(self):
        return self.partnerPackage

    def getSecret(self):
        return self.secret

    def getAdminSecret(self):
        return self.adminSecret

    def getCmsPassword(self):
        return self.cmsPassword

    def getAllowMultiNotification(self):
        return self.allowMultiNotification

    def setAllowMultiNotification(self, newAllowMultiNotification):
        self.allowMultiNotification = newAllowMultiNotification

    def getAdminLoginUsersQuota(self):
        return self.adminLoginUsersQuota

    def getAdminUserId(self):
        return self.adminUserId

    def setAdminUserId(self, newAdminUserId):
        self.adminUserId = newAdminUserId

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getAdditionalParams(self):
        return self.additionalParams

    def setAdditionalParams(self, newAdditionalParams):
        self.additionalParams = newAdditionalParams

    def getPublishersQuota(self):
        return self.publishersQuota

    def getPartnerGroupType(self):
        return self.partnerGroupType

    def getDefaultEntitlementEnforcement(self):
        return self.defaultEntitlementEnforcement

    def getDefaultDeliveryType(self):
        return self.defaultDeliveryType

    def getDefaultEmbedCodeType(self):
        return self.defaultEmbedCodeType

    def getDeliveryTypes(self):
        return self.deliveryTypes

    def getEmbedCodeTypes(self):
        return self.embedCodeTypes

    def getTemplatePartnerId(self):
        return self.templatePartnerId

    def getIgnoreSeoLinks(self):
        return self.ignoreSeoLinks

    def getHost(self):
        return self.host

    def getCdnHost(self):
        return self.cdnHost

    def getIsFirstLogin(self):
        return self.isFirstLogin

    def getLogoutUrl(self):
        return self.logoutUrl

    def getPartnerParentId(self):
        return self.partnerParentId

    def getCrmId(self):
        return self.crmId

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getTimeAlignedRenditions(self):
        return self.timeAlignedRenditions


# @package Kaltura
# @subpackage Client
class KalturaValue(KalturaObjectBase):
    """A representation to return an array of values"""

    def __init__(self,
            description=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.description = description


    PROPERTY_LOADERS = {
        'description': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaValue")
        kparams.addStringIfDefined("description", self.description)
        return kparams

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription


# @package Kaltura
# @subpackage Client
class KalturaBooleanValue(KalturaValue):
    """A boolean representation to return an array of booleans"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # @var bool
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBooleanValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaBooleanValue")
        kparams.addBoolIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadPluginData(KalturaObjectBase):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.field = field

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadPluginData")
        kparams.addStringIfDefined("field", self.field)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResult(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the result
        # @var int
        # @readonly
        self.id = id

        # The id of the parent job
        # @var int
        self.bulkUploadJobId = bulkUploadJobId

        # The index of the line in the CSV
        # @var int
        self.lineIndex = lineIndex

        # @var int
        self.partnerId = partnerId

        # @var KalturaBulkUploadResultStatus
        self.status = status

        # @var KalturaBulkUploadAction
        self.action = action

        # @var string
        self.objectId = objectId

        # @var int
        self.objectStatus = objectStatus

        # @var KalturaBulkUploadObjectType
        self.bulkUploadResultObjectType = bulkUploadResultObjectType

        # The data as recieved in the csv
        # @var string
        self.rowData = rowData

        # @var string
        self.partnerData = partnerData

        # @var string
        self.objectErrorDescription = objectErrorDescription

        # @var array of KalturaBulkUploadPluginData
        self.pluginsData = pluginsData

        # @var string
        self.errorDescription = errorDescription

        # @var string
        self.errorCode = errorCode

        # @var int
        self.errorType = errorType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'bulkUploadJobId': getXmlNodeInt, 
        'lineIndex': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaBulkUploadResultStatus"), 
        'action': (KalturaEnumsFactory.createString, "KalturaBulkUploadAction"), 
        'objectId': getXmlNodeText, 
        'objectStatus': getXmlNodeInt, 
        'bulkUploadResultObjectType': (KalturaEnumsFactory.createString, "KalturaBulkUploadObjectType"), 
        'rowData': getXmlNodeText, 
        'partnerData': getXmlNodeText, 
        'objectErrorDescription': getXmlNodeText, 
        'pluginsData': (KalturaObjectFactory.createArray, KalturaBulkUploadPluginData), 
        'errorDescription': getXmlNodeText, 
        'errorCode': getXmlNodeText, 
        'errorType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResult")
        kparams.addIntIfDefined("bulkUploadJobId", self.bulkUploadJobId)
        kparams.addIntIfDefined("lineIndex", self.lineIndex)
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringEnumIfDefined("status", self.status)
        kparams.addStringEnumIfDefined("action", self.action)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addIntIfDefined("objectStatus", self.objectStatus)
        kparams.addStringEnumIfDefined("bulkUploadResultObjectType", self.bulkUploadResultObjectType)
        kparams.addStringIfDefined("rowData", self.rowData)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addStringIfDefined("objectErrorDescription", self.objectErrorDescription)
        kparams.addArrayIfDefined("pluginsData", self.pluginsData)
        kparams.addStringIfDefined("errorDescription", self.errorDescription)
        kparams.addStringIfDefined("errorCode", self.errorCode)
        kparams.addIntIfDefined("errorType", self.errorType)
        return kparams

    def getId(self):
        return self.id

    def getBulkUploadJobId(self):
        return self.bulkUploadJobId

    def setBulkUploadJobId(self, newBulkUploadJobId):
        self.bulkUploadJobId = newBulkUploadJobId

    def getLineIndex(self):
        return self.lineIndex

    def setLineIndex(self, newLineIndex):
        self.lineIndex = newLineIndex

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getObjectStatus(self):
        return self.objectStatus

    def setObjectStatus(self, newObjectStatus):
        self.objectStatus = newObjectStatus

    def getBulkUploadResultObjectType(self):
        return self.bulkUploadResultObjectType

    def setBulkUploadResultObjectType(self, newBulkUploadResultObjectType):
        self.bulkUploadResultObjectType = newBulkUploadResultObjectType

    def getRowData(self):
        return self.rowData

    def setRowData(self, newRowData):
        self.rowData = newRowData

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getObjectErrorDescription(self):
        return self.objectErrorDescription

    def setObjectErrorDescription(self, newObjectErrorDescription):
        self.objectErrorDescription = newObjectErrorDescription

    def getPluginsData(self):
        return self.pluginsData

    def setPluginsData(self, newPluginsData):
        self.pluginsData = newPluginsData

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription

    def getErrorCode(self):
        return self.errorCode

    def setErrorCode(self, newErrorCode):
        self.errorCode = newErrorCode

    def getErrorType(self):
        return self.errorType

    def setErrorType(self, newErrorType):
        self.errorType = newErrorType


# @package Kaltura
# @subpackage Client
class KalturaBulkUpload(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            uploadedBy=NotImplemented,
            uploadedByUserId=NotImplemented,
            uploadedOn=NotImplemented,
            numOfEntries=NotImplemented,
            status=NotImplemented,
            logFileUrl=NotImplemented,
            csvFileUrl=NotImplemented,
            bulkFileUrl=NotImplemented,
            bulkUploadType=NotImplemented,
            results=NotImplemented,
            error=NotImplemented,
            errorType=NotImplemented,
            errorNumber=NotImplemented,
            fileName=NotImplemented,
            description=NotImplemented,
            numOfObjects=NotImplemented,
            bulkUploadObjectType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.id = id

        # @var string
        self.uploadedBy = uploadedBy

        # @var string
        self.uploadedByUserId = uploadedByUserId

        # @var int
        self.uploadedOn = uploadedOn

        # @var int
        self.numOfEntries = numOfEntries

        # @var KalturaBatchJobStatus
        self.status = status

        # @var string
        self.logFileUrl = logFileUrl

        # @var string
        self.csvFileUrl = csvFileUrl

        # @var string
        self.bulkFileUrl = bulkFileUrl

        # @var KalturaBulkUploadType
        self.bulkUploadType = bulkUploadType

        # @var array of KalturaBulkUploadResult
        self.results = results

        # @var string
        self.error = error

        # @var KalturaBatchJobErrorTypes
        self.errorType = errorType

        # @var int
        self.errorNumber = errorNumber

        # @var string
        self.fileName = fileName

        # @var string
        self.description = description

        # @var int
        self.numOfObjects = numOfObjects

        # @var KalturaBulkUploadObjectType
        self.bulkUploadObjectType = bulkUploadObjectType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'uploadedBy': getXmlNodeText, 
        'uploadedByUserId': getXmlNodeText, 
        'uploadedOn': getXmlNodeInt, 
        'numOfEntries': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaBatchJobStatus"), 
        'logFileUrl': getXmlNodeText, 
        'csvFileUrl': getXmlNodeText, 
        'bulkFileUrl': getXmlNodeText, 
        'bulkUploadType': (KalturaEnumsFactory.createString, "KalturaBulkUploadType"), 
        'results': (KalturaObjectFactory.createArray, KalturaBulkUploadResult), 
        'error': getXmlNodeText, 
        'errorType': (KalturaEnumsFactory.createInt, "KalturaBatchJobErrorTypes"), 
        'errorNumber': getXmlNodeInt, 
        'fileName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'numOfObjects': getXmlNodeInt, 
        'bulkUploadObjectType': (KalturaEnumsFactory.createString, "KalturaBulkUploadObjectType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUpload.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUpload")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("uploadedBy", self.uploadedBy)
        kparams.addStringIfDefined("uploadedByUserId", self.uploadedByUserId)
        kparams.addIntIfDefined("uploadedOn", self.uploadedOn)
        kparams.addIntIfDefined("numOfEntries", self.numOfEntries)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("logFileUrl", self.logFileUrl)
        kparams.addStringIfDefined("csvFileUrl", self.csvFileUrl)
        kparams.addStringIfDefined("bulkFileUrl", self.bulkFileUrl)
        kparams.addStringEnumIfDefined("bulkUploadType", self.bulkUploadType)
        kparams.addArrayIfDefined("results", self.results)
        kparams.addStringIfDefined("error", self.error)
        kparams.addIntEnumIfDefined("errorType", self.errorType)
        kparams.addIntIfDefined("errorNumber", self.errorNumber)
        kparams.addStringIfDefined("fileName", self.fileName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntIfDefined("numOfObjects", self.numOfObjects)
        kparams.addStringEnumIfDefined("bulkUploadObjectType", self.bulkUploadObjectType)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getUploadedBy(self):
        return self.uploadedBy

    def setUploadedBy(self, newUploadedBy):
        self.uploadedBy = newUploadedBy

    def getUploadedByUserId(self):
        return self.uploadedByUserId

    def setUploadedByUserId(self, newUploadedByUserId):
        self.uploadedByUserId = newUploadedByUserId

    def getUploadedOn(self):
        return self.uploadedOn

    def setUploadedOn(self, newUploadedOn):
        self.uploadedOn = newUploadedOn

    def getNumOfEntries(self):
        return self.numOfEntries

    def setNumOfEntries(self, newNumOfEntries):
        self.numOfEntries = newNumOfEntries

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getLogFileUrl(self):
        return self.logFileUrl

    def setLogFileUrl(self, newLogFileUrl):
        self.logFileUrl = newLogFileUrl

    def getCsvFileUrl(self):
        return self.csvFileUrl

    def setCsvFileUrl(self, newCsvFileUrl):
        self.csvFileUrl = newCsvFileUrl

    def getBulkFileUrl(self):
        return self.bulkFileUrl

    def setBulkFileUrl(self, newBulkFileUrl):
        self.bulkFileUrl = newBulkFileUrl

    def getBulkUploadType(self):
        return self.bulkUploadType

    def setBulkUploadType(self, newBulkUploadType):
        self.bulkUploadType = newBulkUploadType

    def getResults(self):
        return self.results

    def setResults(self, newResults):
        self.results = newResults

    def getError(self):
        return self.error

    def setError(self, newError):
        self.error = newError

    def getErrorType(self):
        return self.errorType

    def setErrorType(self, newErrorType):
        self.errorType = newErrorType

    def getErrorNumber(self):
        return self.errorNumber

    def setErrorNumber(self, newErrorNumber):
        self.errorNumber = newErrorNumber

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getNumOfObjects(self):
        return self.numOfObjects

    def setNumOfObjects(self, newNumOfObjects):
        self.numOfObjects = newNumOfObjects

    def getBulkUploadObjectType(self):
        return self.bulkUploadObjectType

    def setBulkUploadObjectType(self, newBulkUploadObjectType):
        self.bulkUploadObjectType = newBulkUploadObjectType


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadObjectData(KalturaObjectBase):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadObjectData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadObjectData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCEError(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            browser=NotImplemented,
            serverIp=NotImplemented,
            serverOs=NotImplemented,
            phpVersion=NotImplemented,
            ceAdminEmail=NotImplemented,
            type=NotImplemented,
            description=NotImplemented,
            data=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var int
        self.partnerId = partnerId

        # @var string
        self.browser = browser

        # @var string
        self.serverIp = serverIp

        # @var string
        self.serverOs = serverOs

        # @var string
        self.phpVersion = phpVersion

        # @var string
        self.ceAdminEmail = ceAdminEmail

        # @var string
        self.type = type

        # @var string
        self.description = description

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'browser': getXmlNodeText, 
        'serverIp': getXmlNodeText, 
        'serverOs': getXmlNodeText, 
        'phpVersion': getXmlNodeText, 
        'ceAdminEmail': getXmlNodeText, 
        'type': getXmlNodeText, 
        'description': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCEError.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCEError")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("browser", self.browser)
        kparams.addStringIfDefined("serverIp", self.serverIp)
        kparams.addStringIfDefined("serverOs", self.serverOs)
        kparams.addStringIfDefined("phpVersion", self.phpVersion)
        kparams.addStringIfDefined("ceAdminEmail", self.ceAdminEmail)
        kparams.addStringIfDefined("type", self.type)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getBrowser(self):
        return self.browser

    def setBrowser(self, newBrowser):
        self.browser = newBrowser

    def getServerIp(self):
        return self.serverIp

    def setServerIp(self, newServerIp):
        self.serverIp = newServerIp

    def getServerOs(self):
        return self.serverOs

    def setServerOs(self, newServerOs):
        self.serverOs = newServerOs

    def getPhpVersion(self):
        return self.phpVersion

    def setPhpVersion(self, newPhpVersion):
        self.phpVersion = newPhpVersion

    def getCeAdminEmail(self):
        return self.ceAdminEmail

    def setCeAdminEmail(self, newCeAdminEmail):
        self.ceAdminEmail = newCeAdminEmail

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaCategory(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            parentId=NotImplemented,
            depth=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            fullName=NotImplemented,
            fullIds=NotImplemented,
            entriesCount=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            appearInList=NotImplemented,
            privacy=NotImplemented,
            inheritanceType=NotImplemented,
            userJoinPolicy=NotImplemented,
            defaultPermissionLevel=NotImplemented,
            owner=NotImplemented,
            directEntriesCount=NotImplemented,
            referenceId=NotImplemented,
            contributionPolicy=NotImplemented,
            membersCount=NotImplemented,
            pendingMembersCount=NotImplemented,
            privacyContext=NotImplemented,
            privacyContexts=NotImplemented,
            status=NotImplemented,
            inheritedParentId=NotImplemented,
            partnerSortValue=NotImplemented,
            partnerData=NotImplemented,
            defaultOrderBy=NotImplemented,
            directSubCategoriesCount=NotImplemented,
            moderation=NotImplemented,
            pendingEntriesCount=NotImplemented,
            isAggregationCategory=NotImplemented,
            aggregationCategories=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # @var int
        self.parentId = parentId

        # @var int
        # @readonly
        self.depth = depth

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Category. 
        # 	 The following characters are not allowed: '<', '>', ','
        # @var string
        self.name = name

        # The full name of the Category
        # @var string
        # @readonly
        self.fullName = fullName

        # The full ids of the Category
        # @var string
        # @readonly
        self.fullIds = fullIds

        # Number of entries in this Category (including child categories)
        # @var int
        # @readonly
        self.entriesCount = entriesCount

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Category description
        # @var string
        self.description = description

        # Category tags
        # @var string
        self.tags = tags

        # If category will be returned for list action.
        # @var KalturaAppearInListType
        self.appearInList = appearInList

        # defines the privacy of the entries that assigned to this category
        # @var KalturaPrivacyType
        self.privacy = privacy

        # If Category members are inherited from parent category or set manualy.
        # @var KalturaInheritanceType
        self.inheritanceType = inheritanceType

        # Who can ask to join this category
        # @var KalturaUserJoinPolicyType
        # @readonly
        self.userJoinPolicy = userJoinPolicy

        # Default permissionLevel for new users
        # @var KalturaCategoryUserPermissionLevel
        self.defaultPermissionLevel = defaultPermissionLevel

        # Category Owner (User id)
        # @var string
        self.owner = owner

        # Number of entries that belong to this category directly
        # @var int
        # @readonly
        self.directEntriesCount = directEntriesCount

        # Category external id, controlled and managed by the partner.
        # @var string
        self.referenceId = referenceId

        # who can assign entries to this category
        # @var KalturaContributionPolicyType
        self.contributionPolicy = contributionPolicy

        # Number of active members for this category
        # @var int
        # @readonly
        self.membersCount = membersCount

        # Number of pending members for this category
        # @var int
        # @readonly
        self.pendingMembersCount = pendingMembersCount

        # Set privacy context for search entries that assiged to private and public categories. the entries will be private if the search context is set with those categories.
        # @var string
        self.privacyContext = privacyContext

        # comma separated parents that defines a privacyContext for search
        # @var string
        # @readonly
        self.privacyContexts = privacyContexts

        # Status
        # @var KalturaCategoryStatus
        # @readonly
        self.status = status

        # The category id that this category inherit its members and members permission (for contribution and join)
        # @var int
        # @readonly
        self.inheritedParentId = inheritedParentId

        # Can be used to store various partner related data as a numeric value
        # @var int
        self.partnerSortValue = partnerSortValue

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # Enable client side applications to define how to sort the category child categories
        # @var KalturaCategoryOrderBy
        self.defaultOrderBy = defaultOrderBy

        # Number of direct children categories
        # @var int
        # @readonly
        self.directSubCategoriesCount = directSubCategoriesCount

        # Moderation to add entries to this category by users that are not of permission level Manager or Moderator.
        # @var KalturaNullableBoolean
        self.moderation = moderation

        # Nunber of pending moderation entries
        # @var int
        # @readonly
        self.pendingEntriesCount = pendingEntriesCount

        # Flag indicating that the category is an aggregation category
        # @var KalturaNullableBoolean
        self.isAggregationCategory = isAggregationCategory

        # List of aggregation channels the category belongs to
        # @var string
        self.aggregationCategories = aggregationCategories


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'parentId': getXmlNodeInt, 
        'depth': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'fullName': getXmlNodeText, 
        'fullIds': getXmlNodeText, 
        'entriesCount': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'appearInList': (KalturaEnumsFactory.createInt, "KalturaAppearInListType"), 
        'privacy': (KalturaEnumsFactory.createInt, "KalturaPrivacyType"), 
        'inheritanceType': (KalturaEnumsFactory.createInt, "KalturaInheritanceType"), 
        'userJoinPolicy': (KalturaEnumsFactory.createInt, "KalturaUserJoinPolicyType"), 
        'defaultPermissionLevel': (KalturaEnumsFactory.createInt, "KalturaCategoryUserPermissionLevel"), 
        'owner': getXmlNodeText, 
        'directEntriesCount': getXmlNodeInt, 
        'referenceId': getXmlNodeText, 
        'contributionPolicy': (KalturaEnumsFactory.createInt, "KalturaContributionPolicyType"), 
        'membersCount': getXmlNodeInt, 
        'pendingMembersCount': getXmlNodeInt, 
        'privacyContext': getXmlNodeText, 
        'privacyContexts': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaCategoryStatus"), 
        'inheritedParentId': getXmlNodeInt, 
        'partnerSortValue': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'defaultOrderBy': (KalturaEnumsFactory.createString, "KalturaCategoryOrderBy"), 
        'directSubCategoriesCount': getXmlNodeInt, 
        'moderation': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'pendingEntriesCount': getXmlNodeInt, 
        'isAggregationCategory': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'aggregationCategories': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategory.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCategory")
        kparams.addIntIfDefined("parentId", self.parentId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addIntEnumIfDefined("appearInList", self.appearInList)
        kparams.addIntEnumIfDefined("privacy", self.privacy)
        kparams.addIntEnumIfDefined("inheritanceType", self.inheritanceType)
        kparams.addIntEnumIfDefined("defaultPermissionLevel", self.defaultPermissionLevel)
        kparams.addStringIfDefined("owner", self.owner)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        kparams.addIntEnumIfDefined("contributionPolicy", self.contributionPolicy)
        kparams.addStringIfDefined("privacyContext", self.privacyContext)
        kparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addStringEnumIfDefined("defaultOrderBy", self.defaultOrderBy)
        kparams.addIntEnumIfDefined("moderation", self.moderation)
        kparams.addIntEnumIfDefined("isAggregationCategory", self.isAggregationCategory)
        kparams.addStringIfDefined("aggregationCategories", self.aggregationCategories)
        return kparams

    def getId(self):
        return self.id

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId

    def getDepth(self):
        return self.depth

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFullName(self):
        return self.fullName

    def getFullIds(self):
        return self.fullIds

    def getEntriesCount(self):
        return self.entriesCount

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAppearInList(self):
        return self.appearInList

    def setAppearInList(self, newAppearInList):
        self.appearInList = newAppearInList

    def getPrivacy(self):
        return self.privacy

    def setPrivacy(self, newPrivacy):
        self.privacy = newPrivacy

    def getInheritanceType(self):
        return self.inheritanceType

    def setInheritanceType(self, newInheritanceType):
        self.inheritanceType = newInheritanceType

    def getUserJoinPolicy(self):
        return self.userJoinPolicy

    def getDefaultPermissionLevel(self):
        return self.defaultPermissionLevel

    def setDefaultPermissionLevel(self, newDefaultPermissionLevel):
        self.defaultPermissionLevel = newDefaultPermissionLevel

    def getOwner(self):
        return self.owner

    def setOwner(self, newOwner):
        self.owner = newOwner

    def getDirectEntriesCount(self):
        return self.directEntriesCount

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getContributionPolicy(self):
        return self.contributionPolicy

    def setContributionPolicy(self, newContributionPolicy):
        self.contributionPolicy = newContributionPolicy

    def getMembersCount(self):
        return self.membersCount

    def getPendingMembersCount(self):
        return self.pendingMembersCount

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getPrivacyContexts(self):
        return self.privacyContexts

    def getStatus(self):
        return self.status

    def getInheritedParentId(self):
        return self.inheritedParentId

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getDefaultOrderBy(self):
        return self.defaultOrderBy

    def setDefaultOrderBy(self, newDefaultOrderBy):
        self.defaultOrderBy = newDefaultOrderBy

    def getDirectSubCategoriesCount(self):
        return self.directSubCategoriesCount

    def getModeration(self):
        return self.moderation

    def setModeration(self, newModeration):
        self.moderation = newModeration

    def getPendingEntriesCount(self):
        return self.pendingEntriesCount

    def getIsAggregationCategory(self):
        return self.isAggregationCategory

    def setIsAggregationCategory(self, newIsAggregationCategory):
        self.isAggregationCategory = newIsAggregationCategory

    def getAggregationCategories(self):
        return self.aggregationCategories

    def setAggregationCategories(self, newAggregationCategories):
        self.aggregationCategories = newAggregationCategories


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntry(KalturaObjectBase):
    def __init__(self,
            categoryId=NotImplemented,
            entryId=NotImplemented,
            createdAt=NotImplemented,
            categoryFullIds=NotImplemented,
            status=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.categoryId = categoryId

        # entry id
        # @var string
        self.entryId = entryId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # The full ids of the Category
        # @var string
        # @readonly
        self.categoryFullIds = categoryFullIds

        # CategroyEntry status
        # @var KalturaCategoryEntryStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'categoryFullIds': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaCategoryEntryStatus"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCategoryEntry")
        kparams.addIntIfDefined("categoryId", self.categoryId)
        kparams.addStringIfDefined("entryId", self.entryId)
        return kparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getCreatedAt(self):
        return self.createdAt

    def getCategoryFullIds(self):
        return self.categoryFullIds

    def getStatus(self):
        return self.status


# @package Kaltura
# @subpackage Client
class KalturaCategoryUser(KalturaObjectBase):
    def __init__(self,
            categoryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            permissionLevel=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            updateMethod=NotImplemented,
            categoryFullIds=NotImplemented,
            permissionNames=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @insertonly
        self.categoryId = categoryId

        # User id
        # @var string
        # @insertonly
        self.userId = userId

        # Partner id
        # @var int
        # @readonly
        self.partnerId = partnerId

        # Permission level
        # @var KalturaCategoryUserPermissionLevel
        self.permissionLevel = permissionLevel

        # Status
        # @var KalturaCategoryUserStatus
        # @readonly
        self.status = status

        # CategoryUser creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # CategoryUser update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Update method can be either manual or automatic to distinguish between manual operations (for example in KMC) on automatic - using bulk upload
        # @var KalturaUpdateMethodType
        self.updateMethod = updateMethod

        # The full ids of the Category
        # @var string
        # @readonly
        self.categoryFullIds = categoryFullIds

        # Set of category-related permissions for the current category user.
        # @var string
        self.permissionNames = permissionNames


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'permissionLevel': (KalturaEnumsFactory.createInt, "KalturaCategoryUserPermissionLevel"), 
        'status': (KalturaEnumsFactory.createInt, "KalturaCategoryUserStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'updateMethod': (KalturaEnumsFactory.createInt, "KalturaUpdateMethodType"), 
        'categoryFullIds': getXmlNodeText, 
        'permissionNames': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCategoryUser")
        kparams.addIntIfDefined("categoryId", self.categoryId)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addIntEnumIfDefined("permissionLevel", self.permissionLevel)
        kparams.addIntEnumIfDefined("updateMethod", self.updateMethod)
        kparams.addStringIfDefined("permissionNames", self.permissionNames)
        return kparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPartnerId(self):
        return self.partnerId

    def getPermissionLevel(self):
        return self.permissionLevel

    def setPermissionLevel(self, newPermissionLevel):
        self.permissionLevel = newPermissionLevel

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getUpdateMethod(self):
        return self.updateMethod

    def setUpdateMethod(self, newUpdateMethod):
        self.updateMethod = newUpdateMethod

    def getCategoryFullIds(self):
        return self.categoryFullIds

    def getPermissionNames(self):
        return self.permissionNames

    def setPermissionNames(self, newPermissionNames):
        self.permissionNames = newPermissionNames


# @package Kaltura
# @subpackage Client
class KalturaClientConfiguration(KalturaObjectBase):
    """Define client optional configurations
     /"""

    def __init__(self,
            clientTag=NotImplemented,
            apiVersion=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.clientTag = clientTag

        # @var string
        self.apiVersion = apiVersion


    PROPERTY_LOADERS = {
        'clientTag': getXmlNodeText, 
        'apiVersion': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaClientConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaClientConfiguration")
        kparams.addStringIfDefined("clientTag", self.clientTag)
        kparams.addStringIfDefined("apiVersion", self.apiVersion)
        return kparams

    def getClientTag(self):
        return self.clientTag

    def setClientTag(self, newClientTag):
        self.clientTag = newClientTag

    def getApiVersion(self):
        return self.apiVersion

    def setApiVersion(self, newApiVersion):
        self.apiVersion = newApiVersion


# @package Kaltura
# @subpackage Client
class KalturaClientNotification(KalturaObjectBase):
    """Client notification object to hold the notification url and the data when sending client side notifications"""

    def __init__(self,
            url=NotImplemented,
            data=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The URL where the notification should be sent to
        # @var string
        self.url = url

        # The serialized notification data to send
        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaClientNotification.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaClientNotification")
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaContext(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContext.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaContext")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaContextDataResult(KalturaObjectBase):
    def __init__(self,
            messages=NotImplemented,
            actions=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Array of messages as received from the rules that invalidated
        # @var array of KalturaString
        self.messages = messages

        # Array of actions as received from the rules that invalidated
        # @var array of KalturaRuleAction
        self.actions = actions


    PROPERTY_LOADERS = {
        'messages': (KalturaObjectFactory.createArray, KalturaString), 
        'actions': (KalturaObjectFactory.createArray, KalturaRuleAction), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaContextDataResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaContextDataResult")
        kparams.addArrayIfDefined("messages", self.messages)
        kparams.addArrayIfDefined("actions", self.actions)
        return kparams

    def getMessages(self):
        return self.messages

    def setMessages(self, newMessages):
        self.messages = newMessages

    def getActions(self):
        return self.actions

    def setActions(self, newActions):
        self.actions = newActions


# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommand(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            createdBy=NotImplemented,
            updatedAt=NotImplemented,
            updatedBy=NotImplemented,
            createdById=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerName=NotImplemented,
            batchIndex=NotImplemented,
            type=NotImplemented,
            targetType=NotImplemented,
            status=NotImplemented,
            cause=NotImplemented,
            description=NotImplemented,
            errorDescription=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Creator name
        # @var string
        self.createdBy = createdBy

        # Update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Updater name
        # @var string
        self.updatedBy = updatedBy

        # Creator id
        # @var int
        self.createdById = createdById

        # The id of the scheduler that the command refers to
        # @var int
        self.schedulerId = schedulerId

        # The id of the scheduler worker that the command refers to
        # @var int
        self.workerId = workerId

        # The id of the scheduler worker as configured in the ini file
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The name of the scheduler worker that the command refers to
        # @var int
        self.workerName = workerName

        # The index of the batch process that the command refers to
        # @var int
        self.batchIndex = batchIndex

        # The command type - stop / start / config
        # @var KalturaControlPanelCommandType
        self.type = type

        # The command target type - data center / scheduler / job / job type
        # @var KalturaControlPanelCommandTargetType
        self.targetType = targetType

        # The command status
        # @var KalturaControlPanelCommandStatus
        self.status = status

        # The reason for the command
        # @var string
        self.cause = cause

        # Command description
        # @var string
        self.description = description

        # Error description
        # @var string
        self.errorDescription = errorDescription


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'createdBy': getXmlNodeText, 
        'updatedAt': getXmlNodeInt, 
        'updatedBy': getXmlNodeText, 
        'createdById': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerName': getXmlNodeInt, 
        'batchIndex': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandType"), 
        'targetType': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandTargetType"), 
        'status': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandStatus"), 
        'cause': getXmlNodeText, 
        'description': getXmlNodeText, 
        'errorDescription': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaControlPanelCommand.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaControlPanelCommand")
        kparams.addStringIfDefined("createdBy", self.createdBy)
        kparams.addStringIfDefined("updatedBy", self.updatedBy)
        kparams.addIntIfDefined("createdById", self.createdById)
        kparams.addIntIfDefined("schedulerId", self.schedulerId)
        kparams.addIntIfDefined("workerId", self.workerId)
        kparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        kparams.addIntIfDefined("workerName", self.workerName)
        kparams.addIntIfDefined("batchIndex", self.batchIndex)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addIntEnumIfDefined("targetType", self.targetType)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("cause", self.cause)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("errorDescription", self.errorDescription)
        return kparams

    def getId(self):
        return self.id

    def getCreatedAt(self):
        return self.createdAt

    def getCreatedBy(self):
        return self.createdBy

    def setCreatedBy(self, newCreatedBy):
        self.createdBy = newCreatedBy

    def getUpdatedAt(self):
        return self.updatedAt

    def getUpdatedBy(self):
        return self.updatedBy

    def setUpdatedBy(self, newUpdatedBy):
        self.updatedBy = newUpdatedBy

    def getCreatedById(self):
        return self.createdById

    def setCreatedById(self, newCreatedById):
        self.createdById = newCreatedById

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerName(self):
        return self.workerName

    def setWorkerName(self, newWorkerName):
        self.workerName = newWorkerName

    def getBatchIndex(self):
        return self.batchIndex

    def setBatchIndex(self, newBatchIndex):
        self.batchIndex = newBatchIndex

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTargetType(self):
        return self.targetType

    def setTargetType(self, newTargetType):
        self.targetType = newTargetType

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCause(self):
        return self.cause

    def setCause(self, newCause):
        self.cause = newCause

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription


# @package Kaltura
# @subpackage Client
class KalturaConversionAttribute(KalturaObjectBase):
    def __init__(self,
            flavorParamsId=NotImplemented,
            name=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the flavor params, set to null for source flavor
        # @var int
        self.flavorParamsId = flavorParamsId

        # Attribute name
        # @var string
        self.name = name

        # Attribute value
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionAttribute.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConversionAttribute")
        kparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaCropDimensions(KalturaObjectBase):
    def __init__(self,
            left=NotImplemented,
            top=NotImplemented,
            width=NotImplemented,
            height=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Crop left point
        # @var int
        self.left = left

        # Crop top point
        # @var int
        self.top = top

        # Crop width
        # @var int
        self.width = width

        # Crop height
        # @var int
        self.height = height


    PROPERTY_LOADERS = {
        'left': getXmlNodeInt, 
        'top': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCropDimensions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCropDimensions")
        kparams.addIntIfDefined("left", self.left)
        kparams.addIntIfDefined("top", self.top)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        return kparams

    def getLeft(self):
        return self.left

    def setLeft(self, newLeft):
        self.left = newLeft

    def getTop(self):
        return self.top

    def setTop(self, newTop):
        self.top = newTop

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight


# @package Kaltura
# @subpackage Client
class KalturaConversionProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            tags=NotImplemented,
            description=NotImplemented,
            defaultEntryId=NotImplemented,
            createdAt=NotImplemented,
            flavorParamsIds=NotImplemented,
            isDefault=NotImplemented,
            isPartnerDefault=NotImplemented,
            cropDimensions=NotImplemented,
            clipStart=NotImplemented,
            clipDuration=NotImplemented,
            xslTransformation=NotImplemented,
            storageProfileId=NotImplemented,
            mediaParserType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Conversion Profile
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var KalturaConversionProfileStatus
        self.status = status

        # @var KalturaConversionProfileType
        # @insertonly
        self.type = type

        # The name of the Conversion Profile
        # @var string
        self.name = name

        # System name of the Conversion Profile
        # @var string
        self.systemName = systemName

        # Comma separated tags
        # @var string
        self.tags = tags

        # The description of the Conversion Profile
        # @var string
        self.description = description

        # ID of the default entry to be used for template data
        # @var string
        self.defaultEntryId = defaultEntryId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # List of included flavor ids (comma separated)
        # @var string
        self.flavorParamsIds = flavorParamsIds

        # Indicates that this conversion profile is system default
        # @var KalturaNullableBoolean
        self.isDefault = isDefault

        # Indicates that this conversion profile is partner default
        # @var bool
        # @readonly
        self.isPartnerDefault = isPartnerDefault

        # Cropping dimensions
        # @var KalturaCropDimensions
        self.cropDimensions = cropDimensions

        # Clipping start position (in miliseconds)
        # @var int
        self.clipStart = clipStart

        # Clipping duration (in miliseconds)
        # @var int
        self.clipDuration = clipDuration

        # XSL to transform ingestion MRSS XML
        # @var string
        self.xslTransformation = xslTransformation

        # ID of default storage profile to be used for linked net-storage file syncs
        # @var int
        self.storageProfileId = storageProfileId

        # Media parser type to be used for extract media
        # @var KalturaMediaParserType
        self.mediaParserType = mediaParserType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaConversionProfileStatus"), 
        'type': (KalturaEnumsFactory.createString, "KalturaConversionProfileType"), 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'description': getXmlNodeText, 
        'defaultEntryId': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'flavorParamsIds': getXmlNodeText, 
        'isDefault': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'isPartnerDefault': getXmlNodeBool, 
        'cropDimensions': (KalturaObjectFactory.create, KalturaCropDimensions), 
        'clipStart': getXmlNodeInt, 
        'clipDuration': getXmlNodeInt, 
        'xslTransformation': getXmlNodeText, 
        'storageProfileId': getXmlNodeInt, 
        'mediaParserType': (KalturaEnumsFactory.createString, "KalturaMediaParserType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConversionProfile")
        kparams.addStringEnumIfDefined("status", self.status)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("defaultEntryId", self.defaultEntryId)
        kparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        kparams.addIntEnumIfDefined("isDefault", self.isDefault)
        kparams.addObjectIfDefined("cropDimensions", self.cropDimensions)
        kparams.addIntIfDefined("clipStart", self.clipStart)
        kparams.addIntIfDefined("clipDuration", self.clipDuration)
        kparams.addStringIfDefined("xslTransformation", self.xslTransformation)
        kparams.addIntIfDefined("storageProfileId", self.storageProfileId)
        kparams.addStringEnumIfDefined("mediaParserType", self.mediaParserType)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getDefaultEntryId(self):
        return self.defaultEntryId

    def setDefaultEntryId(self, newDefaultEntryId):
        self.defaultEntryId = newDefaultEntryId

    def getCreatedAt(self):
        return self.createdAt

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getIsDefault(self):
        return self.isDefault

    def setIsDefault(self, newIsDefault):
        self.isDefault = newIsDefault

    def getIsPartnerDefault(self):
        return self.isPartnerDefault

    def getCropDimensions(self):
        return self.cropDimensions

    def setCropDimensions(self, newCropDimensions):
        self.cropDimensions = newCropDimensions

    def getClipStart(self):
        return self.clipStart

    def setClipStart(self, newClipStart):
        self.clipStart = newClipStart

    def getClipDuration(self):
        return self.clipDuration

    def setClipDuration(self, newClipDuration):
        self.clipDuration = newClipDuration

    def getXslTransformation(self):
        return self.xslTransformation

    def setXslTransformation(self, newXslTransformation):
        self.xslTransformation = newXslTransformation

    def getStorageProfileId(self):
        return self.storageProfileId

    def setStorageProfileId(self, newStorageProfileId):
        self.storageProfileId = newStorageProfileId

    def getMediaParserType(self):
        return self.mediaParserType

    def setMediaParserType(self, newMediaParserType):
        self.mediaParserType = newMediaParserType


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParams(KalturaObjectBase):
    def __init__(self,
            conversionProfileId=NotImplemented,
            assetParamsId=NotImplemented,
            readyBehavior=NotImplemented,
            origin=NotImplemented,
            systemName=NotImplemented,
            forceNoneComplied=NotImplemented,
            deletePolicy=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            twoPass=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the conversion profile
        # @var int
        # @readonly
        self.conversionProfileId = conversionProfileId

        # The id of the asset params
        # @var int
        # @readonly
        self.assetParamsId = assetParamsId

        # The ingestion origin of the asset params
        # @var KalturaFlavorReadyBehaviorType
        self.readyBehavior = readyBehavior

        # The ingestion origin of the asset params
        # @var KalturaAssetParamsOrigin
        self.origin = origin

        # Asset params system name
        # @var string
        self.systemName = systemName

        # Starts conversion even if the decision layer reduced the configuration to comply with the source
        # @var KalturaNullableBoolean
        self.forceNoneComplied = forceNoneComplied

        # Specifies how to treat the flavor after conversion is finished
        # @var KalturaAssetParamsDeletePolicy
        self.deletePolicy = deletePolicy

        # @var KalturaNullableBoolean
        self.isEncrypted = isEncrypted

        # @var float
        self.contentAwareness = contentAwareness

        # @var KalturaNullableBoolean
        self.twoPass = twoPass


    PROPERTY_LOADERS = {
        'conversionProfileId': getXmlNodeInt, 
        'assetParamsId': getXmlNodeInt, 
        'readyBehavior': (KalturaEnumsFactory.createInt, "KalturaFlavorReadyBehaviorType"), 
        'origin': (KalturaEnumsFactory.createInt, "KalturaAssetParamsOrigin"), 
        'systemName': getXmlNodeText, 
        'forceNoneComplied': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'deletePolicy': (KalturaEnumsFactory.createInt, "KalturaAssetParamsDeletePolicy"), 
        'isEncrypted': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'contentAwareness': getXmlNodeFloat, 
        'twoPass': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileAssetParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileAssetParams")
        kparams.addIntEnumIfDefined("readyBehavior", self.readyBehavior)
        kparams.addIntEnumIfDefined("origin", self.origin)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addIntEnumIfDefined("forceNoneComplied", self.forceNoneComplied)
        kparams.addIntEnumIfDefined("deletePolicy", self.deletePolicy)
        kparams.addIntEnumIfDefined("isEncrypted", self.isEncrypted)
        kparams.addFloatIfDefined("contentAwareness", self.contentAwareness)
        kparams.addIntEnumIfDefined("twoPass", self.twoPass)
        return kparams

    def getConversionProfileId(self):
        return self.conversionProfileId

    def getAssetParamsId(self):
        return self.assetParamsId

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getOrigin(self):
        return self.origin

    def setOrigin(self, newOrigin):
        self.origin = newOrigin

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getForceNoneComplied(self):
        return self.forceNoneComplied

    def setForceNoneComplied(self, newForceNoneComplied):
        self.forceNoneComplied = newForceNoneComplied

    def getDeletePolicy(self):
        return self.deletePolicy

    def setDeletePolicy(self, newDeletePolicy):
        self.deletePolicy = newDeletePolicy

    def getIsEncrypted(self):
        return self.isEncrypted

    def setIsEncrypted(self, newIsEncrypted):
        self.isEncrypted = newIsEncrypted

    def getContentAwareness(self):
        return self.contentAwareness

    def setContentAwareness(self, newContentAwareness):
        self.contentAwareness = newContentAwareness

    def getTwoPass(self):
        return self.twoPass

    def setTwoPass(self, newTwoPass):
        self.twoPass = newTwoPass


# @package Kaltura
# @subpackage Client
class KalturaConvertCollectionFlavorData(KalturaObjectBase):
    def __init__(self,
            flavorAssetId=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            readyBehavior=NotImplemented,
            videoBitrate=NotImplemented,
            audioBitrate=NotImplemented,
            destFileSyncLocalPath=NotImplemented,
            destFileSyncRemoteUrl=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var int
        self.flavorParamsOutputId = flavorParamsOutputId

        # @var int
        self.readyBehavior = readyBehavior

        # @var int
        self.videoBitrate = videoBitrate

        # @var int
        self.audioBitrate = audioBitrate

        # @var string
        self.destFileSyncLocalPath = destFileSyncLocalPath

        # @var string
        self.destFileSyncRemoteUrl = destFileSyncRemoteUrl


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'flavorParamsOutputId': getXmlNodeInt, 
        'readyBehavior': getXmlNodeInt, 
        'videoBitrate': getXmlNodeInt, 
        'audioBitrate': getXmlNodeInt, 
        'destFileSyncLocalPath': getXmlNodeText, 
        'destFileSyncRemoteUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvertCollectionFlavorData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaConvertCollectionFlavorData")
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addIntIfDefined("flavorParamsOutputId", self.flavorParamsOutputId)
        kparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        kparams.addIntIfDefined("videoBitrate", self.videoBitrate)
        kparams.addIntIfDefined("audioBitrate", self.audioBitrate)
        kparams.addStringIfDefined("destFileSyncLocalPath", self.destFileSyncLocalPath)
        kparams.addStringIfDefined("destFileSyncRemoteUrl", self.destFileSyncRemoteUrl)
        return kparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorParamsOutputId(self):
        return self.flavorParamsOutputId

    def setFlavorParamsOutputId(self, newFlavorParamsOutputId):
        self.flavorParamsOutputId = newFlavorParamsOutputId

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getVideoBitrate(self):
        return self.videoBitrate

    def setVideoBitrate(self, newVideoBitrate):
        self.videoBitrate = newVideoBitrate

    def getAudioBitrate(self):
        return self.audioBitrate

    def setAudioBitrate(self, newAudioBitrate):
        self.audioBitrate = newAudioBitrate

    def getDestFileSyncLocalPath(self):
        return self.destFileSyncLocalPath

    def setDestFileSyncLocalPath(self, newDestFileSyncLocalPath):
        self.destFileSyncLocalPath = newDestFileSyncLocalPath

    def getDestFileSyncRemoteUrl(self):
        return self.destFileSyncRemoteUrl

    def setDestFileSyncRemoteUrl(self, newDestFileSyncRemoteUrl):
        self.destFileSyncRemoteUrl = newDestFileSyncRemoteUrl


# @package Kaltura
# @subpackage Client
class KalturaCoordinate(KalturaObjectBase):
    def __init__(self,
            latitude=NotImplemented,
            longitude=NotImplemented,
            name=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var float
        self.latitude = latitude

        # @var float
        self.longitude = longitude

        # @var string
        self.name = name


    PROPERTY_LOADERS = {
        'latitude': getXmlNodeFloat, 
        'longitude': getXmlNodeFloat, 
        'name': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCoordinate.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaCoordinate")
        kparams.addFloatIfDefined("latitude", self.latitude)
        kparams.addFloatIfDefined("longitude", self.longitude)
        kparams.addStringIfDefined("name", self.name)
        return kparams

    def getLatitude(self):
        return self.latitude

    def setLatitude(self, newLatitude):
        self.latitude = newLatitude

    def getLongitude(self):
        return self.longitude

    def setLongitude(self, newLongitude):
        self.longitude = newLongitude

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName


# @package Kaltura
# @subpackage Client
class KalturaDataEntry(KalturaBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            dataContent=NotImplemented,
            retrieveDataContentByGet=NotImplemented):
        KalturaBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # The data of the entry
        # @var string
        self.dataContent = dataContent

        # indicator whether to return the object for get action with the dataContent field.
        # @var bool
        # @insertonly
        self.retrieveDataContentByGet = retrieveDataContentByGet


    PROPERTY_LOADERS = {
        'dataContent': getXmlNodeText, 
        'retrieveDataContentByGet': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntry.toParams(self)
        kparams.put("objectType", "KalturaDataEntry")
        kparams.addStringIfDefined("dataContent", self.dataContent)
        kparams.addBoolIfDefined("retrieveDataContentByGet", self.retrieveDataContentByGet)
        return kparams

    def getDataContent(self):
        return self.dataContent

    def setDataContent(self, newDataContent):
        self.dataContent = newDataContent

    def getRetrieveDataContentByGet(self):
        return self.retrieveDataContentByGet

    def setRetrieveDataContentByGet(self, newRetrieveDataContentByGet):
        self.retrieveDataContentByGet = newRetrieveDataContentByGet


# @package Kaltura
# @subpackage Client
class KalturaUrlRecognizer(KalturaObjectBase):
    def __init__(self,
            hosts=NotImplemented,
            uriPrefix=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The hosts that are recognized
        # @var string
        self.hosts = hosts

        # The URI prefix we use for security
        # @var string
        self.uriPrefix = uriPrefix


    PROPERTY_LOADERS = {
        'hosts': getXmlNodeText, 
        'uriPrefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlRecognizer.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUrlRecognizer")
        kparams.addStringIfDefined("hosts", self.hosts)
        kparams.addStringIfDefined("uriPrefix", self.uriPrefix)
        return kparams

    def getHosts(self):
        return self.hosts

    def setHosts(self, newHosts):
        self.hosts = newHosts

    def getUriPrefix(self):
        return self.uriPrefix

    def setUriPrefix(self, newUriPrefix):
        self.uriPrefix = newUriPrefix


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizer(KalturaObjectBase):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Window
        # @var int
        self.window = window

        # key
        # @var string
        self.key = key


    PROPERTY_LOADERS = {
        'window': getXmlNodeInt, 
        'key': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizer.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizer")
        kparams.addIntIfDefined("window", self.window)
        kparams.addStringIfDefined("key", self.key)
        return kparams

    def getWindow(self):
        return self.window

    def setWindow(self, newWindow):
        self.window = newWindow

    def getKey(self):
        return self.key

    def setKey(self, newKey):
        self.key = newKey


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Delivery
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The name of the Delivery
        # @var string
        self.name = name

        # Delivery type
        # @var KalturaDeliveryProfileType
        self.type = type

        # System name of the delivery
        # @var string
        self.systemName = systemName

        # The description of the Delivery
        # @var string
        self.description = description

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaPlaybackProtocol
        self.streamerType = streamerType

        # @var string
        self.url = url

        # the host part of the url
        # @var string
        # @readonly
        self.hostName = hostName

        # @var KalturaDeliveryStatus
        self.status = status

        # @var KalturaUrlRecognizer
        self.recognizer = recognizer

        # @var KalturaUrlTokenizer
        self.tokenizer = tokenizer

        # True if this is the systemwide default for the protocol
        # @var KalturaNullableBoolean
        # @readonly
        self.isDefault = isDefault

        # the object from which this object was cloned (or 0)
        # @var int
        # @readonly
        self.parentId = parentId

        # Comma separated list of supported media protocols. f.i. rtmpe
        # @var string
        self.mediaProtocols = mediaProtocols

        # priority used for ordering similar delivery profiles
        # @var int
        self.priority = priority

        # Extra query string parameters that should be added to the url
        # @var string
        self.extraParams = extraParams


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaDeliveryProfileType"), 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'streamerType': (KalturaEnumsFactory.createString, "KalturaPlaybackProtocol"), 
        'url': getXmlNodeText, 
        'hostName': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaDeliveryStatus"), 
        'recognizer': (KalturaObjectFactory.create, KalturaUrlRecognizer), 
        'tokenizer': (KalturaObjectFactory.create, KalturaUrlTokenizer), 
        'isDefault': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'parentId': getXmlNodeInt, 
        'mediaProtocols': getXmlNodeText, 
        'priority': getXmlNodeInt, 
        'extraParams': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringEnumIfDefined("streamerType", self.streamerType)
        kparams.addStringIfDefined("url", self.url)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addObjectIfDefined("recognizer", self.recognizer)
        kparams.addObjectIfDefined("tokenizer", self.tokenizer)
        kparams.addStringIfDefined("mediaProtocols", self.mediaProtocols)
        kparams.addIntIfDefined("priority", self.priority)
        kparams.addStringIfDefined("extraParams", self.extraParams)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getHostName(self):
        return self.hostName

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getRecognizer(self):
        return self.recognizer

    def setRecognizer(self, newRecognizer):
        self.recognizer = newRecognizer

    def getTokenizer(self):
        return self.tokenizer

    def setTokenizer(self, newTokenizer):
        self.tokenizer = newTokenizer

    def getIsDefault(self):
        return self.isDefault

    def getParentId(self):
        return self.parentId

    def getMediaProtocols(self):
        return self.mediaProtocols

    def setMediaProtocols(self, newMediaProtocols):
        self.mediaProtocols = newMediaProtocols

    def getPriority(self):
        return self.priority

    def setPriority(self, newPriority):
        self.priority = newPriority

    def getExtraParams(self):
        return self.extraParams

    def setExtraParams(self, newExtraParams):
        self.extraParams = newExtraParams


# @package Kaltura
# @subpackage Client
class KalturaFileSyncDescriptor(KalturaObjectBase):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.fileSyncLocalPath = fileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.fileSyncRemoteUrl = fileSyncRemoteUrl

        # @var int
        self.fileSyncObjectSubType = fileSyncObjectSubType


    PROPERTY_LOADERS = {
        'fileSyncLocalPath': getXmlNodeText, 
        'fileSyncRemoteUrl': getXmlNodeText, 
        'fileSyncObjectSubType': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFileSyncDescriptor")
        kparams.addStringIfDefined("fileSyncLocalPath", self.fileSyncLocalPath)
        kparams.addStringIfDefined("fileSyncRemoteUrl", self.fileSyncRemoteUrl)
        kparams.addIntIfDefined("fileSyncObjectSubType", self.fileSyncObjectSubType)
        return kparams

    def getFileSyncLocalPath(self):
        return self.fileSyncLocalPath

    def setFileSyncLocalPath(self, newFileSyncLocalPath):
        self.fileSyncLocalPath = newFileSyncLocalPath

    def getFileSyncRemoteUrl(self):
        return self.fileSyncRemoteUrl

    def setFileSyncRemoteUrl(self, newFileSyncRemoteUrl):
        self.fileSyncRemoteUrl = newFileSyncRemoteUrl

    def getFileSyncObjectSubType(self):
        return self.fileSyncObjectSubType

    def setFileSyncObjectSubType(self, newFileSyncObjectSubType):
        self.fileSyncObjectSubType = newFileSyncObjectSubType


# @package Kaltura
# @subpackage Client
class KalturaDestFileSyncDescriptor(KalturaFileSyncDescriptor):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented):
        KalturaFileSyncDescriptor.__init__(self,
            fileSyncLocalPath,
            fileSyncRemoteUrl,
            fileSyncObjectSubType)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFileSyncDescriptor.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDestFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFileSyncDescriptor.toParams(self)
        kparams.put("objectType", "KalturaDestFileSyncDescriptor")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSearchItem(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchItem")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilter(KalturaObjectBase):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.orderBy = orderBy

        # @var KalturaSearchItem
        self.advancedSearch = advancedSearch


    PROPERTY_LOADERS = {
        'orderBy': getXmlNodeText, 
        'advancedSearch': (KalturaObjectFactory.create, KalturaSearchItem), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFilter")
        kparams.addStringIfDefined("orderBy", self.orderBy)
        kparams.addObjectIfDefined("advancedSearch", self.advancedSearch)
        return kparams

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getAdvancedSearch(self):
        return self.advancedSearch

    def setAdvancedSearch(self, newAdvancedSearch):
        self.advancedSearch = newAdvancedSearch


# @package Kaltura
# @subpackage Client
class KalturaRelatedFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRelatedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaRelatedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFilterPager(KalturaObjectBase):
    """The KalturaFilterPager object enables paging management to be applied upon service list actions."""

    def __init__(self,
            pageSize=NotImplemented,
            pageIndex=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The number of objects to retrieve. (Default is 30, maximum page size is 500).
        # @var int
        self.pageSize = pageSize

        # The page number for which {pageSize} of objects should be retrieved (Default is 1).
        # @var int
        self.pageIndex = pageIndex


    PROPERTY_LOADERS = {
        'pageSize': getXmlNodeInt, 
        'pageIndex': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFilterPager.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFilterPager")
        kparams.addIntIfDefined("pageSize", self.pageSize)
        kparams.addIntIfDefined("pageIndex", self.pageIndex)
        return kparams

    def getPageSize(self):
        return self.pageSize

    def setPageSize(self, newPageSize):
        self.pageSize = newPageSize

    def getPageIndex(self):
        return self.pageIndex

    def setPageIndex(self, newPageIndex):
        self.pageIndex = newPageIndex


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileMapping(KalturaObjectBase):
    def __init__(self,
            parentProperty=NotImplemented,
            filterProperty=NotImplemented,
            allowNull=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.parentProperty = parentProperty

        # @var string
        self.filterProperty = filterProperty

        # @var bool
        self.allowNull = allowNull


    PROPERTY_LOADERS = {
        'parentProperty': getXmlNodeText, 
        'filterProperty': getXmlNodeText, 
        'allowNull': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileMapping.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileMapping")
        kparams.addStringIfDefined("parentProperty", self.parentProperty)
        kparams.addStringIfDefined("filterProperty", self.filterProperty)
        kparams.addBoolIfDefined("allowNull", self.allowNull)
        return kparams

    def getParentProperty(self):
        return self.parentProperty

    def setParentProperty(self, newParentProperty):
        self.parentProperty = newParentProperty

    def getFilterProperty(self):
        return self.filterProperty

    def setFilterProperty(self, newFilterProperty):
        self.filterProperty = newFilterProperty

    def getAllowNull(self):
        return self.allowNull

    def setAllowNull(self, newAllowNull):
        self.allowNull = newAllowNull


# @package Kaltura
# @subpackage Client
class KalturaDetachedResponseProfile(KalturaBaseResponseProfile):
    def __init__(self,
            name=NotImplemented,
            type=NotImplemented,
            fields=NotImplemented,
            filter=NotImplemented,
            pager=NotImplemented,
            relatedProfiles=NotImplemented,
            mappings=NotImplemented):
        KalturaBaseResponseProfile.__init__(self)

        # Friendly name
        # @var string
        self.name = name

        # @var KalturaResponseProfileType
        self.type = type

        # Comma separated fields list to be included or excluded
        # @var string
        self.fields = fields

        # @var KalturaRelatedFilter
        self.filter = filter

        # @var KalturaFilterPager
        self.pager = pager

        # @var array of KalturaDetachedResponseProfile
        self.relatedProfiles = relatedProfiles

        # @var array of KalturaResponseProfileMapping
        self.mappings = mappings


    PROPERTY_LOADERS = {
        'name': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createInt, "KalturaResponseProfileType"), 
        'fields': getXmlNodeText, 
        'filter': (KalturaObjectFactory.create, KalturaRelatedFilter), 
        'pager': (KalturaObjectFactory.create, KalturaFilterPager), 
        'relatedProfiles': (KalturaObjectFactory.createArray, KalturaObjectBase), 
        'mappings': (KalturaObjectFactory.createArray, KalturaResponseProfileMapping), 
    }

    def fromXml(self, node):
        KalturaBaseResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDetachedResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseResponseProfile.toParams(self)
        kparams.put("objectType", "KalturaDetachedResponseProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("fields", self.fields)
        kparams.addObjectIfDefined("filter", self.filter)
        kparams.addObjectIfDefined("pager", self.pager)
        kparams.addArrayIfDefined("relatedProfiles", self.relatedProfiles)
        kparams.addArrayIfDefined("mappings", self.mappings)
        return kparams

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getFields(self):
        return self.fields

    def setFields(self, newFields):
        self.fields = newFields

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getPager(self):
        return self.pager

    def setPager(self, newPager):
        self.pager = newPager

    def getRelatedProfiles(self):
        return self.relatedProfiles

    def setRelatedProfiles(self, newRelatedProfiles):
        self.relatedProfiles = newRelatedProfiles

    def getMappings(self):
        return self.mappings

    def setMappings(self, newMappings):
        self.mappings = newMappings


# @package Kaltura
# @subpackage Client
class KalturaEmailIngestionProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            emailAddress=NotImplemented,
            mailboxId=NotImplemented,
            partnerId=NotImplemented,
            conversionProfile2Id=NotImplemented,
            moderationStatus=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            defaultCategory=NotImplemented,
            defaultUserId=NotImplemented,
            defaultTags=NotImplemented,
            defaultAdminTags=NotImplemented,
            maxAttachmentSizeKbytes=NotImplemented,
            maxAttachmentsPerMail=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.description = description

        # @var string
        self.emailAddress = emailAddress

        # @var string
        self.mailboxId = mailboxId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        self.conversionProfile2Id = conversionProfile2Id

        # @var KalturaEntryModerationStatus
        self.moderationStatus = moderationStatus

        # @var KalturaEmailIngestionProfileStatus
        # @readonly
        self.status = status

        # @var string
        # @readonly
        self.createdAt = createdAt

        # @var string
        self.defaultCategory = defaultCategory

        # @var string
        self.defaultUserId = defaultUserId

        # @var string
        self.defaultTags = defaultTags

        # @var string
        self.defaultAdminTags = defaultAdminTags

        # @var int
        self.maxAttachmentSizeKbytes = maxAttachmentSizeKbytes

        # @var int
        self.maxAttachmentsPerMail = maxAttachmentsPerMail


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'emailAddress': getXmlNodeText, 
        'mailboxId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'conversionProfile2Id': getXmlNodeInt, 
        'moderationStatus': (KalturaEnumsFactory.createInt, "KalturaEntryModerationStatus"), 
        'status': (KalturaEnumsFactory.createInt, "KalturaEmailIngestionProfileStatus"), 
        'createdAt': getXmlNodeText, 
        'defaultCategory': getXmlNodeText, 
        'defaultUserId': getXmlNodeText, 
        'defaultTags': getXmlNodeText, 
        'defaultAdminTags': getXmlNodeText, 
        'maxAttachmentSizeKbytes': getXmlNodeInt, 
        'maxAttachmentsPerMail': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEmailIngestionProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEmailIngestionProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("emailAddress", self.emailAddress)
        kparams.addStringIfDefined("mailboxId", self.mailboxId)
        kparams.addIntIfDefined("conversionProfile2Id", self.conversionProfile2Id)
        kparams.addIntEnumIfDefined("moderationStatus", self.moderationStatus)
        kparams.addStringIfDefined("defaultCategory", self.defaultCategory)
        kparams.addStringIfDefined("defaultUserId", self.defaultUserId)
        kparams.addStringIfDefined("defaultTags", self.defaultTags)
        kparams.addStringIfDefined("defaultAdminTags", self.defaultAdminTags)
        kparams.addIntIfDefined("maxAttachmentSizeKbytes", self.maxAttachmentSizeKbytes)
        kparams.addIntIfDefined("maxAttachmentsPerMail", self.maxAttachmentsPerMail)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getEmailAddress(self):
        return self.emailAddress

    def setEmailAddress(self, newEmailAddress):
        self.emailAddress = newEmailAddress

    def getMailboxId(self):
        return self.mailboxId

    def setMailboxId(self, newMailboxId):
        self.mailboxId = newMailboxId

    def getPartnerId(self):
        return self.partnerId

    def getConversionProfile2Id(self):
        return self.conversionProfile2Id

    def setConversionProfile2Id(self, newConversionProfile2Id):
        self.conversionProfile2Id = newConversionProfile2Id

    def getModerationStatus(self):
        return self.moderationStatus

    def setModerationStatus(self, newModerationStatus):
        self.moderationStatus = newModerationStatus

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getDefaultCategory(self):
        return self.defaultCategory

    def setDefaultCategory(self, newDefaultCategory):
        self.defaultCategory = newDefaultCategory

    def getDefaultUserId(self):
        return self.defaultUserId

    def setDefaultUserId(self, newDefaultUserId):
        self.defaultUserId = newDefaultUserId

    def getDefaultTags(self):
        return self.defaultTags

    def setDefaultTags(self, newDefaultTags):
        self.defaultTags = newDefaultTags

    def getDefaultAdminTags(self):
        return self.defaultAdminTags

    def setDefaultAdminTags(self, newDefaultAdminTags):
        self.defaultAdminTags = newDefaultAdminTags

    def getMaxAttachmentSizeKbytes(self):
        return self.maxAttachmentSizeKbytes

    def setMaxAttachmentSizeKbytes(self, newMaxAttachmentSizeKbytes):
        self.maxAttachmentSizeKbytes = newMaxAttachmentSizeKbytes

    def getMaxAttachmentsPerMail(self):
        return self.maxAttachmentsPerMail

    def setMaxAttachmentsPerMail(self, newMaxAttachmentsPerMail):
        self.maxAttachmentsPerMail = newMaxAttachmentsPerMail


# @package Kaltura
# @subpackage Client
class KalturaStringValue(KalturaValue):
    """A string representation to return an array of strings"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStringValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaStringValue")
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaEntryReplacementOptions(KalturaObjectBase):
    """Advanced configuration for entry replacement process"""

    def __init__(self,
            keepManualThumbnails=NotImplemented):
        KalturaObjectBase.__init__(self)

        # If true manually created thumbnails will not be deleted on entry replacement
        # @var int
        self.keepManualThumbnails = keepManualThumbnails


    PROPERTY_LOADERS = {
        'keepManualThumbnails': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryReplacementOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntryReplacementOptions")
        kparams.addIntIfDefined("keepManualThumbnails", self.keepManualThumbnails)
        return kparams

    def getKeepManualThumbnails(self):
        return self.keepManualThumbnails

    def setKeepManualThumbnails(self, newKeepManualThumbnails):
        self.keepManualThumbnails = newKeepManualThumbnails


# @package Kaltura
# @subpackage Client
class KalturaEntryServerNode(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            serverNodeId=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            serverType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # unique auto-generated identifier
        # @var int
        # @readonly
        self.id = id

        # @var string
        # @readonly
        self.entryId = entryId

        # @var int
        # @readonly
        self.serverNodeId = serverNodeId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaEntryServerNodeStatus
        # @readonly
        self.status = status

        # @var KalturaEntryServerNodeType
        # @readonly
        self.serverType = serverType


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'serverNodeId': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaEntryServerNodeStatus"), 
        'serverType': (KalturaEnumsFactory.createString, "KalturaEntryServerNodeType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaEntryServerNode")
        return kparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def getServerNodeId(self):
        return self.serverNodeId

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getServerType(self):
        return self.serverType


# @package Kaltura
# @subpackage Client
class KalturaObjectIdentifier(KalturaObjectBase):
    """Configuration for extended item in the Kaltura MRSS feeds"""

    def __init__(self,
            extendedFeatures=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Comma separated string of enum values denoting which features of the item need to be included in the MRSS
        # @var string
        self.extendedFeatures = extendedFeatures


    PROPERTY_LOADERS = {
        'extendedFeatures': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObjectIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaObjectIdentifier")
        kparams.addStringIfDefined("extendedFeatures", self.extendedFeatures)
        return kparams

    def getExtendedFeatures(self):
        return self.extendedFeatures

    def setExtendedFeatures(self, newExtendedFeatures):
        self.extendedFeatures = newExtendedFeatures


# @package Kaltura
# @subpackage Client
class KalturaExtendingItemMrssParameter(KalturaObjectBase):
    def __init__(self,
            xpath=NotImplemented,
            identifier=NotImplemented,
            extensionMode=NotImplemented):
        KalturaObjectBase.__init__(self)

        # XPath for the extending item
        # @var string
        self.xpath = xpath

        # Object identifier
        # @var KalturaObjectIdentifier
        self.identifier = identifier

        # Mode of extension - append to MRSS or replace the xpath content.
        # @var KalturaMrssExtensionMode
        self.extensionMode = extensionMode


    PROPERTY_LOADERS = {
        'xpath': getXmlNodeText, 
        'identifier': (KalturaObjectFactory.create, KalturaObjectIdentifier), 
        'extensionMode': (KalturaEnumsFactory.createInt, "KalturaMrssExtensionMode"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExtendingItemMrssParameter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaExtendingItemMrssParameter")
        kparams.addStringIfDefined("xpath", self.xpath)
        kparams.addObjectIfDefined("identifier", self.identifier)
        kparams.addIntEnumIfDefined("extensionMode", self.extensionMode)
        return kparams

    def getXpath(self):
        return self.xpath

    def setXpath(self, newXpath):
        self.xpath = newXpath

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier

    def getExtensionMode(self):
        return self.extensionMode

    def setExtensionMode(self, newExtensionMode):
        self.extensionMode = newExtensionMode


# @package Kaltura
# @subpackage Client
class KalturaPlayableEntry(KalturaBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented):
        KalturaBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # Number of plays
        # @var int
        # @readonly
        self.plays = plays

        # Number of views
        # @var int
        # @readonly
        self.views = views

        # The last time the entry was played
        # @var int
        # @readonly
        self.lastPlayedAt = lastPlayedAt

        # The width in pixels
        # @var int
        # @readonly
        self.width = width

        # The height in pixels
        # @var int
        # @readonly
        self.height = height

        # The duration in seconds
        # @var int
        # @readonly
        self.duration = duration

        # The duration in miliseconds
        # @var int
        self.msDuration = msDuration

        # The duration type (short for 0-4 mins, medium for 4-20 mins, long for 20+ mins)
        # @var KalturaDurationType
        # @readonly
        self.durationType = durationType


    PROPERTY_LOADERS = {
        'plays': getXmlNodeInt, 
        'views': getXmlNodeInt, 
        'lastPlayedAt': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'msDuration': getXmlNodeInt, 
        'durationType': (KalturaEnumsFactory.createString, "KalturaDurationType"), 
    }

    def fromXml(self, node):
        KalturaBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayableEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntry.toParams(self)
        kparams.put("objectType", "KalturaPlayableEntry")
        kparams.addIntIfDefined("msDuration", self.msDuration)
        return kparams

    def getPlays(self):
        return self.plays

    def getViews(self):
        return self.views

    def getLastPlayedAt(self):
        return self.lastPlayedAt

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getDuration(self):
        return self.duration

    def getMsDuration(self):
        return self.msDuration

    def setMsDuration(self, newMsDuration):
        self.msDuration = newMsDuration

    def getDurationType(self):
        return self.durationType


# @package Kaltura
# @subpackage Client
class KalturaMediaEntry(KalturaPlayableEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented):
        KalturaPlayableEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType)

        # The media type of the entry
        # @var KalturaMediaType
        # @insertonly
        self.mediaType = mediaType

        # Override the default conversion quality
        # @var string
        # @insertonly
        self.conversionQuality = conversionQuality

        # The source type of the entry
        # @var KalturaSourceType
        # @insertonly
        self.sourceType = sourceType

        # The search provider type used to import this entry
        # @var KalturaSearchProviderType
        # @insertonly
        self.searchProviderType = searchProviderType

        # The ID of the media in the importing site
        # @var string
        # @insertonly
        self.searchProviderId = searchProviderId

        # The user name used for credits
        # @var string
        self.creditUserName = creditUserName

        # The URL for credits
        # @var string
        self.creditUrl = creditUrl

        # The media date extracted from EXIF data (For images) as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.mediaDate = mediaDate

        # The URL used for playback. This is not the download URL.
        # @var string
        # @readonly
        self.dataUrl = dataUrl

        # Comma separated flavor params ids that exists for this media entry
        # @var string
        # @readonly
        self.flavorParamsIds = flavorParamsIds

        # True if trim action is disabled for this entry
        # @var KalturaNullableBoolean
        # @readonly
        self.isTrimDisabled = isTrimDisabled


    PROPERTY_LOADERS = {
        'mediaType': (KalturaEnumsFactory.createInt, "KalturaMediaType"), 
        'conversionQuality': getXmlNodeText, 
        'sourceType': (KalturaEnumsFactory.createString, "KalturaSourceType"), 
        'searchProviderType': (KalturaEnumsFactory.createInt, "KalturaSearchProviderType"), 
        'searchProviderId': getXmlNodeText, 
        'creditUserName': getXmlNodeText, 
        'creditUrl': getXmlNodeText, 
        'mediaDate': getXmlNodeInt, 
        'dataUrl': getXmlNodeText, 
        'flavorParamsIds': getXmlNodeText, 
        'isTrimDisabled': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaPlayableEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlayableEntry.toParams(self)
        kparams.put("objectType", "KalturaMediaEntry")
        kparams.addIntEnumIfDefined("mediaType", self.mediaType)
        kparams.addStringIfDefined("conversionQuality", self.conversionQuality)
        kparams.addStringEnumIfDefined("sourceType", self.sourceType)
        kparams.addIntEnumIfDefined("searchProviderType", self.searchProviderType)
        kparams.addStringIfDefined("searchProviderId", self.searchProviderId)
        kparams.addStringIfDefined("creditUserName", self.creditUserName)
        kparams.addStringIfDefined("creditUrl", self.creditUrl)
        return kparams

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getConversionQuality(self):
        return self.conversionQuality

    def setConversionQuality(self, newConversionQuality):
        self.conversionQuality = newConversionQuality

    def getSourceType(self):
        return self.sourceType

    def setSourceType(self, newSourceType):
        self.sourceType = newSourceType

    def getSearchProviderType(self):
        return self.searchProviderType

    def setSearchProviderType(self, newSearchProviderType):
        self.searchProviderType = newSearchProviderType

    def getSearchProviderId(self):
        return self.searchProviderId

    def setSearchProviderId(self, newSearchProviderId):
        self.searchProviderId = newSearchProviderId

    def getCreditUserName(self):
        return self.creditUserName

    def setCreditUserName(self, newCreditUserName):
        self.creditUserName = newCreditUserName

    def getCreditUrl(self):
        return self.creditUrl

    def setCreditUrl(self, newCreditUrl):
        self.creditUrl = newCreditUrl

    def getMediaDate(self):
        return self.mediaDate

    def getDataUrl(self):
        return self.dataUrl

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def getIsTrimDisabled(self):
        return self.isTrimDisabled


# @package Kaltura
# @subpackage Client
class KalturaFeatureStatus(KalturaObjectBase):
    def __init__(self,
            type=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var KalturaFeatureStatusType
        self.type = type

        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createInt, "KalturaFeatureStatusType"), 
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFeatureStatus.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFeatureStatus")
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaFileAsset(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            fileAssetObjectType=NotImplemented,
            objectId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            fileExt=NotImplemented,
            version=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var KalturaFileAssetObjectType
        # @insertonly
        self.fileAssetObjectType = fileAssetObjectType

        # @var string
        # @insertonly
        self.objectId = objectId

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.fileExt = fileExt

        # @var int
        # @readonly
        self.version = version

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaFileAssetStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'fileAssetObjectType': (KalturaEnumsFactory.createString, "KalturaFileAssetObjectType"), 
        'objectId': getXmlNodeText, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
        'version': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaFileAssetStatus"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFileAsset")
        kparams.addStringEnumIfDefined("fileAssetObjectType", self.fileAssetObjectType)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("fileExt", self.fileExt)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getFileAssetObjectType(self):
        return self.fileAssetObjectType

    def setFileAssetObjectType(self, newFileAssetObjectType):
        self.fileAssetObjectType = newFileAssetObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt

    def getVersion(self):
        return self.version

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status


# @package Kaltura
# @subpackage Client
class KalturaFlavorAsset(KalturaAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            flavorParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            bitrate=NotImplemented,
            frameRate=NotImplemented,
            isOriginal=NotImplemented,
            isWeb=NotImplemented,
            containerFormat=NotImplemented,
            videoCodecId=NotImplemented,
            status=NotImplemented,
            language=NotImplemented):
        KalturaAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds)

        # The Flavor Params used to create this Flavor Asset
        # @var int
        # @insertonly
        self.flavorParamsId = flavorParamsId

        # The width of the Flavor Asset
        # @var int
        # @readonly
        self.width = width

        # The height of the Flavor Asset
        # @var int
        # @readonly
        self.height = height

        # The overall bitrate (in KBits) of the Flavor Asset
        # @var int
        # @readonly
        self.bitrate = bitrate

        # The frame rate (in FPS) of the Flavor Asset
        # @var float
        # @readonly
        self.frameRate = frameRate

        # True if this Flavor Asset is the original source
        # @var bool
        # @readonly
        self.isOriginal = isOriginal

        # True if this Flavor Asset is playable in KDP
        # @var bool
        # @readonly
        self.isWeb = isWeb

        # The container format
        # @var string
        # @readonly
        self.containerFormat = containerFormat

        # The video codec
        # @var string
        # @readonly
        self.videoCodecId = videoCodecId

        # The status of the Flavor Asset
        # @var KalturaFlavorAssetStatus
        # @readonly
        self.status = status

        # The language of the flavor asset
        # @var KalturaLanguage
        self.language = language


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'bitrate': getXmlNodeInt, 
        'frameRate': getXmlNodeFloat, 
        'isOriginal': getXmlNodeBool, 
        'isWeb': getXmlNodeBool, 
        'containerFormat': getXmlNodeText, 
        'videoCodecId': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaFlavorAssetStatus"), 
        'language': (KalturaEnumsFactory.createString, "KalturaLanguage"), 
    }

    def fromXml(self, node):
        KalturaAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAsset.toParams(self)
        kparams.put("objectType", "KalturaFlavorAsset")
        kparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        kparams.addStringEnumIfDefined("language", self.language)
        return kparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getBitrate(self):
        return self.bitrate

    def getFrameRate(self):
        return self.frameRate

    def getIsOriginal(self):
        return self.isOriginal

    def getIsWeb(self):
        return self.isWeb

    def getContainerFormat(self):
        return self.containerFormat

    def getVideoCodecId(self):
        return self.videoCodecId

    def getStatus(self):
        return self.status

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetUrlOptions(KalturaObjectBase):
    def __init__(self,
            fileName=NotImplemented,
            referrer=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The name of the downloaded file
        # @var string
        self.fileName = fileName

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'fileName': getXmlNodeText, 
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAssetUrlOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFlavorAssetUrlOptions")
        kparams.addStringIfDefined("fileName", self.fileName)
        kparams.addStringIfDefined("referrer", self.referrer)
        return kparams

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Kaltura
# @subpackage Client
class KalturaFlavorParams(KalturaAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented):
        KalturaAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # The video codec of the Flavor Params
        # @var KalturaVideoCodec
        self.videoCodec = videoCodec

        # The video bitrate (in KBits) of the Flavor Params
        # @var int
        self.videoBitrate = videoBitrate

        # The audio codec of the Flavor Params
        # @var KalturaAudioCodec
        self.audioCodec = audioCodec

        # The audio bitrate (in KBits) of the Flavor Params
        # @var int
        self.audioBitrate = audioBitrate

        # The number of audio channels for "downmixing"
        # @var int
        self.audioChannels = audioChannels

        # The audio sample rate of the Flavor Params
        # @var int
        self.audioSampleRate = audioSampleRate

        # The desired width of the Flavor Params
        # @var int
        self.width = width

        # The desired height of the Flavor Params
        # @var int
        self.height = height

        # The frame rate of the Flavor Params
        # @var float
        self.frameRate = frameRate

        # The gop size of the Flavor Params
        # @var int
        self.gopSize = gopSize

        # The list of conversion engines (comma separated)
        # @var string
        self.conversionEngines = conversionEngines

        # The list of conversion engines extra params (separated with "|")
        # @var string
        self.conversionEnginesExtraParams = conversionEnginesExtraParams

        # @var bool
        self.twoPass = twoPass

        # @var int
        self.deinterlice = deinterlice

        # @var int
        self.rotate = rotate

        # @var string
        self.operators = operators

        # @var int
        self.engineVersion = engineVersion

        # The container format of the Flavor Params
        # @var KalturaContainerFormat
        self.format = format

        # @var int
        self.aspectRatioProcessingMode = aspectRatioProcessingMode

        # @var int
        self.forceFrameToMultiplication16 = forceFrameToMultiplication16

        # @var int
        self.isGopInSec = isGopInSec

        # @var int
        self.isAvoidVideoShrinkFramesizeToSource = isAvoidVideoShrinkFramesizeToSource

        # @var int
        self.isAvoidVideoShrinkBitrateToSource = isAvoidVideoShrinkBitrateToSource

        # @var int
        self.isVideoFrameRateForLowBrAppleHls = isVideoFrameRateForLowBrAppleHls

        # @var string
        self.multiStream = multiStream

        # @var float
        self.anamorphicPixels = anamorphicPixels

        # @var int
        self.isAvoidForcedKeyFrames = isAvoidForcedKeyFrames

        # @var int
        self.isCropIMX = isCropIMX

        # @var int
        self.optimizationPolicy = optimizationPolicy

        # @var int
        self.maxFrameRate = maxFrameRate

        # @var int
        self.videoConstantBitrate = videoConstantBitrate

        # @var int
        self.videoBitrateTolerance = videoBitrateTolerance

        # @var string
        self.watermarkData = watermarkData

        # @var string
        self.subtitlesData = subtitlesData

        # @var int
        self.isEncrypted = isEncrypted

        # @var float
        self.contentAwareness = contentAwareness

        # @var int
        self.clipOffset = clipOffset

        # @var int
        self.clipDuration = clipDuration


    PROPERTY_LOADERS = {
        'videoCodec': (KalturaEnumsFactory.createString, "KalturaVideoCodec"), 
        'videoBitrate': getXmlNodeInt, 
        'audioCodec': (KalturaEnumsFactory.createString, "KalturaAudioCodec"), 
        'audioBitrate': getXmlNodeInt, 
        'audioChannels': getXmlNodeInt, 
        'audioSampleRate': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'frameRate': getXmlNodeFloat, 
        'gopSize': getXmlNodeInt, 
        'conversionEngines': getXmlNodeText, 
        'conversionEnginesExtraParams': getXmlNodeText, 
        'twoPass': getXmlNodeBool, 
        'deinterlice': getXmlNodeInt, 
        'rotate': getXmlNodeInt, 
        'operators': getXmlNodeText, 
        'engineVersion': getXmlNodeInt, 
        'format': (KalturaEnumsFactory.createString, "KalturaContainerFormat"), 
        'aspectRatioProcessingMode': getXmlNodeInt, 
        'forceFrameToMultiplication16': getXmlNodeInt, 
        'isGopInSec': getXmlNodeInt, 
        'isAvoidVideoShrinkFramesizeToSource': getXmlNodeInt, 
        'isAvoidVideoShrinkBitrateToSource': getXmlNodeInt, 
        'isVideoFrameRateForLowBrAppleHls': getXmlNodeInt, 
        'multiStream': getXmlNodeText, 
        'anamorphicPixels': getXmlNodeFloat, 
        'isAvoidForcedKeyFrames': getXmlNodeInt, 
        'isCropIMX': getXmlNodeInt, 
        'optimizationPolicy': getXmlNodeInt, 
        'maxFrameRate': getXmlNodeInt, 
        'videoConstantBitrate': getXmlNodeInt, 
        'videoBitrateTolerance': getXmlNodeInt, 
        'watermarkData': getXmlNodeText, 
        'subtitlesData': getXmlNodeText, 
        'isEncrypted': getXmlNodeInt, 
        'contentAwareness': getXmlNodeFloat, 
        'clipOffset': getXmlNodeInt, 
        'clipDuration': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParams.toParams(self)
        kparams.put("objectType", "KalturaFlavorParams")
        kparams.addStringEnumIfDefined("videoCodec", self.videoCodec)
        kparams.addIntIfDefined("videoBitrate", self.videoBitrate)
        kparams.addStringEnumIfDefined("audioCodec", self.audioCodec)
        kparams.addIntIfDefined("audioBitrate", self.audioBitrate)
        kparams.addIntIfDefined("audioChannels", self.audioChannels)
        kparams.addIntIfDefined("audioSampleRate", self.audioSampleRate)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addFloatIfDefined("frameRate", self.frameRate)
        kparams.addIntIfDefined("gopSize", self.gopSize)
        kparams.addStringIfDefined("conversionEngines", self.conversionEngines)
        kparams.addStringIfDefined("conversionEnginesExtraParams", self.conversionEnginesExtraParams)
        kparams.addBoolIfDefined("twoPass", self.twoPass)
        kparams.addIntIfDefined("deinterlice", self.deinterlice)
        kparams.addIntIfDefined("rotate", self.rotate)
        kparams.addStringIfDefined("operators", self.operators)
        kparams.addIntIfDefined("engineVersion", self.engineVersion)
        kparams.addStringEnumIfDefined("format", self.format)
        kparams.addIntIfDefined("aspectRatioProcessingMode", self.aspectRatioProcessingMode)
        kparams.addIntIfDefined("forceFrameToMultiplication16", self.forceFrameToMultiplication16)
        kparams.addIntIfDefined("isGopInSec", self.isGopInSec)
        kparams.addIntIfDefined("isAvoidVideoShrinkFramesizeToSource", self.isAvoidVideoShrinkFramesizeToSource)
        kparams.addIntIfDefined("isAvoidVideoShrinkBitrateToSource", self.isAvoidVideoShrinkBitrateToSource)
        kparams.addIntIfDefined("isVideoFrameRateForLowBrAppleHls", self.isVideoFrameRateForLowBrAppleHls)
        kparams.addStringIfDefined("multiStream", self.multiStream)
        kparams.addFloatIfDefined("anamorphicPixels", self.anamorphicPixels)
        kparams.addIntIfDefined("isAvoidForcedKeyFrames", self.isAvoidForcedKeyFrames)
        kparams.addIntIfDefined("isCropIMX", self.isCropIMX)
        kparams.addIntIfDefined("optimizationPolicy", self.optimizationPolicy)
        kparams.addIntIfDefined("maxFrameRate", self.maxFrameRate)
        kparams.addIntIfDefined("videoConstantBitrate", self.videoConstantBitrate)
        kparams.addIntIfDefined("videoBitrateTolerance", self.videoBitrateTolerance)
        kparams.addStringIfDefined("watermarkData", self.watermarkData)
        kparams.addStringIfDefined("subtitlesData", self.subtitlesData)
        kparams.addIntIfDefined("isEncrypted", self.isEncrypted)
        kparams.addFloatIfDefined("contentAwareness", self.contentAwareness)
        kparams.addIntIfDefined("clipOffset", self.clipOffset)
        kparams.addIntIfDefined("clipDuration", self.clipDuration)
        return kparams

    def getVideoCodec(self):
        return self.videoCodec

    def setVideoCodec(self, newVideoCodec):
        self.videoCodec = newVideoCodec

    def getVideoBitrate(self):
        return self.videoBitrate

    def setVideoBitrate(self, newVideoBitrate):
        self.videoBitrate = newVideoBitrate

    def getAudioCodec(self):
        return self.audioCodec

    def setAudioCodec(self, newAudioCodec):
        self.audioCodec = newAudioCodec

    def getAudioBitrate(self):
        return self.audioBitrate

    def setAudioBitrate(self, newAudioBitrate):
        self.audioBitrate = newAudioBitrate

    def getAudioChannels(self):
        return self.audioChannels

    def setAudioChannels(self, newAudioChannels):
        self.audioChannels = newAudioChannels

    def getAudioSampleRate(self):
        return self.audioSampleRate

    def setAudioSampleRate(self, newAudioSampleRate):
        self.audioSampleRate = newAudioSampleRate

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getFrameRate(self):
        return self.frameRate

    def setFrameRate(self, newFrameRate):
        self.frameRate = newFrameRate

    def getGopSize(self):
        return self.gopSize

    def setGopSize(self, newGopSize):
        self.gopSize = newGopSize

    def getConversionEngines(self):
        return self.conversionEngines

    def setConversionEngines(self, newConversionEngines):
        self.conversionEngines = newConversionEngines

    def getConversionEnginesExtraParams(self):
        return self.conversionEnginesExtraParams

    def setConversionEnginesExtraParams(self, newConversionEnginesExtraParams):
        self.conversionEnginesExtraParams = newConversionEnginesExtraParams

    def getTwoPass(self):
        return self.twoPass

    def setTwoPass(self, newTwoPass):
        self.twoPass = newTwoPass

    def getDeinterlice(self):
        return self.deinterlice

    def setDeinterlice(self, newDeinterlice):
        self.deinterlice = newDeinterlice

    def getRotate(self):
        return self.rotate

    def setRotate(self, newRotate):
        self.rotate = newRotate

    def getOperators(self):
        return self.operators

    def setOperators(self, newOperators):
        self.operators = newOperators

    def getEngineVersion(self):
        return self.engineVersion

    def setEngineVersion(self, newEngineVersion):
        self.engineVersion = newEngineVersion

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat

    def getAspectRatioProcessingMode(self):
        return self.aspectRatioProcessingMode

    def setAspectRatioProcessingMode(self, newAspectRatioProcessingMode):
        self.aspectRatioProcessingMode = newAspectRatioProcessingMode

    def getForceFrameToMultiplication16(self):
        return self.forceFrameToMultiplication16

    def setForceFrameToMultiplication16(self, newForceFrameToMultiplication16):
        self.forceFrameToMultiplication16 = newForceFrameToMultiplication16

    def getIsGopInSec(self):
        return self.isGopInSec

    def setIsGopInSec(self, newIsGopInSec):
        self.isGopInSec = newIsGopInSec

    def getIsAvoidVideoShrinkFramesizeToSource(self):
        return self.isAvoidVideoShrinkFramesizeToSource

    def setIsAvoidVideoShrinkFramesizeToSource(self, newIsAvoidVideoShrinkFramesizeToSource):
        self.isAvoidVideoShrinkFramesizeToSource = newIsAvoidVideoShrinkFramesizeToSource

    def getIsAvoidVideoShrinkBitrateToSource(self):
        return self.isAvoidVideoShrinkBitrateToSource

    def setIsAvoidVideoShrinkBitrateToSource(self, newIsAvoidVideoShrinkBitrateToSource):
        self.isAvoidVideoShrinkBitrateToSource = newIsAvoidVideoShrinkBitrateToSource

    def getIsVideoFrameRateForLowBrAppleHls(self):
        return self.isVideoFrameRateForLowBrAppleHls

    def setIsVideoFrameRateForLowBrAppleHls(self, newIsVideoFrameRateForLowBrAppleHls):
        self.isVideoFrameRateForLowBrAppleHls = newIsVideoFrameRateForLowBrAppleHls

    def getMultiStream(self):
        return self.multiStream

    def setMultiStream(self, newMultiStream):
        self.multiStream = newMultiStream

    def getAnamorphicPixels(self):
        return self.anamorphicPixels

    def setAnamorphicPixels(self, newAnamorphicPixels):
        self.anamorphicPixels = newAnamorphicPixels

    def getIsAvoidForcedKeyFrames(self):
        return self.isAvoidForcedKeyFrames

    def setIsAvoidForcedKeyFrames(self, newIsAvoidForcedKeyFrames):
        self.isAvoidForcedKeyFrames = newIsAvoidForcedKeyFrames

    def getIsCropIMX(self):
        return self.isCropIMX

    def setIsCropIMX(self, newIsCropIMX):
        self.isCropIMX = newIsCropIMX

    def getOptimizationPolicy(self):
        return self.optimizationPolicy

    def setOptimizationPolicy(self, newOptimizationPolicy):
        self.optimizationPolicy = newOptimizationPolicy

    def getMaxFrameRate(self):
        return self.maxFrameRate

    def setMaxFrameRate(self, newMaxFrameRate):
        self.maxFrameRate = newMaxFrameRate

    def getVideoConstantBitrate(self):
        return self.videoConstantBitrate

    def setVideoConstantBitrate(self, newVideoConstantBitrate):
        self.videoConstantBitrate = newVideoConstantBitrate

    def getVideoBitrateTolerance(self):
        return self.videoBitrateTolerance

    def setVideoBitrateTolerance(self, newVideoBitrateTolerance):
        self.videoBitrateTolerance = newVideoBitrateTolerance

    def getWatermarkData(self):
        return self.watermarkData

    def setWatermarkData(self, newWatermarkData):
        self.watermarkData = newWatermarkData

    def getSubtitlesData(self):
        return self.subtitlesData

    def setSubtitlesData(self, newSubtitlesData):
        self.subtitlesData = newSubtitlesData

    def getIsEncrypted(self):
        return self.isEncrypted

    def setIsEncrypted(self, newIsEncrypted):
        self.isEncrypted = newIsEncrypted

    def getContentAwareness(self):
        return self.contentAwareness

    def setContentAwareness(self, newContentAwareness):
        self.contentAwareness = newContentAwareness

    def getClipOffset(self):
        return self.clipOffset

    def setClipOffset(self, newClipOffset):
        self.clipOffset = newClipOffset

    def getClipDuration(self):
        return self.clipDuration

    def setClipDuration(self, newClipDuration):
        self.clipDuration = newClipDuration


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetWithParams(KalturaObjectBase):
    def __init__(self,
            flavorAsset=NotImplemented,
            flavorParams=NotImplemented,
            entryId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The Flavor Asset (Can be null when there are params without asset)
        # @var KalturaFlavorAsset
        self.flavorAsset = flavorAsset

        # The Flavor Params
        # @var KalturaFlavorParams
        self.flavorParams = flavorParams

        # The entry id
        # @var string
        self.entryId = entryId


    PROPERTY_LOADERS = {
        'flavorAsset': (KalturaObjectFactory.create, KalturaFlavorAsset), 
        'flavorParams': (KalturaObjectFactory.create, KalturaFlavorParams), 
        'entryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAssetWithParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaFlavorAssetWithParams")
        kparams.addObjectIfDefined("flavorAsset", self.flavorAsset)
        kparams.addObjectIfDefined("flavorParams", self.flavorParams)
        kparams.addStringIfDefined("entryId", self.entryId)
        return kparams

    def getFlavorAsset(self):
        return self.flavorAsset

    def setFlavorAsset(self, newFlavorAsset):
        self.flavorAsset = newFlavorAsset

    def getFlavorParams(self):
        return self.flavorParams

    def setFlavorParams(self, newFlavorParams):
        self.flavorParams = newFlavorParams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutput(KalturaFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            flavorParamsId=NotImplemented,
            commandLinesStr=NotImplemented,
            flavorParamsVersion=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorAssetVersion=NotImplemented,
            readyBehavior=NotImplemented):
        KalturaFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)

        # @var int
        self.flavorParamsId = flavorParamsId

        # @var string
        self.commandLinesStr = commandLinesStr

        # @var string
        self.flavorParamsVersion = flavorParamsVersion

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var string
        self.flavorAssetVersion = flavorAssetVersion

        # @var int
        self.readyBehavior = readyBehavior


    PROPERTY_LOADERS = {
        'flavorParamsId': getXmlNodeInt, 
        'commandLinesStr': getXmlNodeText, 
        'flavorParamsVersion': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'flavorAssetVersion': getXmlNodeText, 
        'readyBehavior': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParams.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsOutput")
        kparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        kparams.addStringIfDefined("commandLinesStr", self.commandLinesStr)
        kparams.addStringIfDefined("flavorParamsVersion", self.flavorParamsVersion)
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addStringIfDefined("flavorAssetVersion", self.flavorAssetVersion)
        kparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        return kparams

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getCommandLinesStr(self):
        return self.commandLinesStr

    def setCommandLinesStr(self, newCommandLinesStr):
        self.commandLinesStr = newCommandLinesStr

    def getFlavorParamsVersion(self):
        return self.flavorParamsVersion

    def setFlavorParamsVersion(self, newFlavorParamsVersion):
        self.flavorParamsVersion = newFlavorParamsVersion

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorAssetVersion(self):
        return self.flavorAssetVersion

    def setFlavorAssetVersion(self, newFlavorAssetVersion):
        self.flavorAssetVersion = newFlavorAssetVersion

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior


# @package Kaltura
# @subpackage Client
class KalturaSchedulerStatus(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerType=NotImplemented,
            type=NotImplemented,
            value=NotImplemented,
            schedulerId=NotImplemented,
            workerId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # The configured id of the scheduler
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The configured id of the job worker
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The type of the job worker.
        # @var KalturaBatchJobType
        self.workerType = workerType

        # The status type
        # @var KalturaSchedulerStatusType
        self.type = type

        # The status value
        # @var int
        self.value = value

        # The id of the scheduler
        # @var int
        # @readonly
        self.schedulerId = schedulerId

        # The id of the worker
        # @var int
        # @readonly
        self.workerId = workerId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerType': (KalturaEnumsFactory.createString, "KalturaBatchJobType"), 
        'type': (KalturaEnumsFactory.createInt, "KalturaSchedulerStatusType"), 
        'value': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'workerId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSchedulerStatus.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSchedulerStatus")
        kparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        kparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        kparams.addStringEnumIfDefined("workerType", self.workerType)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getId(self):
        return self.id

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerType(self):
        return self.workerType

    def setWorkerType(self, newWorkerType):
        self.workerType = newWorkerType

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getSchedulerId(self):
        return self.schedulerId

    def getWorkerId(self):
        return self.workerId


# @package Kaltura
# @subpackage Client
class KalturaSchedulerConfig(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdBy=NotImplemented,
            updatedBy=NotImplemented,
            commandId=NotImplemented,
            commandStatus=NotImplemented,
            schedulerId=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            schedulerName=NotImplemented,
            workerId=NotImplemented,
            workerConfiguredId=NotImplemented,
            workerName=NotImplemented,
            variable=NotImplemented,
            variablePart=NotImplemented,
            value=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Category
        # @var int
        # @readonly
        self.id = id

        # Creator name
        # @var string
        self.createdBy = createdBy

        # Updater name
        # @var string
        self.updatedBy = updatedBy

        # Id of the control panel command that created this config item
        # @var string
        self.commandId = commandId

        # The status of the control panel command
        # @var string
        self.commandStatus = commandStatus

        # The id of the scheduler
        # @var int
        self.schedulerId = schedulerId

        # The configured id of the scheduler
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The name of the scheduler
        # @var string
        self.schedulerName = schedulerName

        # The id of the job worker
        # @var int
        self.workerId = workerId

        # The configured id of the job worker
        # @var int
        self.workerConfiguredId = workerConfiguredId

        # The name of the job worker
        # @var string
        self.workerName = workerName

        # The name of the variable
        # @var string
        self.variable = variable

        # The part of the variable
        # @var string
        self.variablePart = variablePart

        # The value of the variable
        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdBy': getXmlNodeText, 
        'updatedBy': getXmlNodeText, 
        'commandId': getXmlNodeText, 
        'commandStatus': getXmlNodeText, 
        'schedulerId': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'schedulerName': getXmlNodeText, 
        'workerId': getXmlNodeInt, 
        'workerConfiguredId': getXmlNodeInt, 
        'workerName': getXmlNodeText, 
        'variable': getXmlNodeText, 
        'variablePart': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSchedulerConfig.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSchedulerConfig")
        kparams.addStringIfDefined("createdBy", self.createdBy)
        kparams.addStringIfDefined("updatedBy", self.updatedBy)
        kparams.addStringIfDefined("commandId", self.commandId)
        kparams.addStringIfDefined("commandStatus", self.commandStatus)
        kparams.addIntIfDefined("schedulerId", self.schedulerId)
        kparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        kparams.addStringIfDefined("schedulerName", self.schedulerName)
        kparams.addIntIfDefined("workerId", self.workerId)
        kparams.addIntIfDefined("workerConfiguredId", self.workerConfiguredId)
        kparams.addStringIfDefined("workerName", self.workerName)
        kparams.addStringIfDefined("variable", self.variable)
        kparams.addStringIfDefined("variablePart", self.variablePart)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getId(self):
        return self.id

    def getCreatedBy(self):
        return self.createdBy

    def setCreatedBy(self, newCreatedBy):
        self.createdBy = newCreatedBy

    def getUpdatedBy(self):
        return self.updatedBy

    def setUpdatedBy(self, newUpdatedBy):
        self.updatedBy = newUpdatedBy

    def getCommandId(self):
        return self.commandId

    def setCommandId(self, newCommandId):
        self.commandId = newCommandId

    def getCommandStatus(self):
        return self.commandStatus

    def setCommandStatus(self, newCommandStatus):
        self.commandStatus = newCommandStatus

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getSchedulerName(self):
        return self.schedulerName

    def setSchedulerName(self, newSchedulerName):
        self.schedulerName = newSchedulerName

    def getWorkerId(self):
        return self.workerId

    def setWorkerId(self, newWorkerId):
        self.workerId = newWorkerId

    def getWorkerConfiguredId(self):
        return self.workerConfiguredId

    def setWorkerConfiguredId(self, newWorkerConfiguredId):
        self.workerConfiguredId = newWorkerConfiguredId

    def getWorkerName(self):
        return self.workerName

    def setWorkerName(self, newWorkerName):
        self.workerName = newWorkerName

    def getVariable(self):
        return self.variable

    def setVariable(self, newVariable):
        self.variable = newVariable

    def getVariablePart(self):
        return self.variablePart

    def setVariablePart(self, newVariablePart):
        self.variablePart = newVariablePart

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaSchedulerWorker(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            configuredId=NotImplemented,
            schedulerId=NotImplemented,
            schedulerConfiguredId=NotImplemented,
            type=NotImplemented,
            typeName=NotImplemented,
            name=NotImplemented,
            statuses=NotImplemented,
            configs=NotImplemented,
            lockedJobs=NotImplemented,
            avgWait=NotImplemented,
            avgWork=NotImplemented,
            lastStatus=NotImplemented,
            lastStatusStr=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Worker
        # @var int
        # @readonly
        self.id = id

        # The id as configured in the batch config
        # @var int
        self.configuredId = configuredId

        # The id of the Scheduler
        # @var int
        self.schedulerId = schedulerId

        # The id of the scheduler as configured in the batch config
        # @var int
        self.schedulerConfiguredId = schedulerConfiguredId

        # The worker type
        # @var KalturaBatchJobType
        self.type = type

        # The friendly name of the type
        # @var string
        self.typeName = typeName

        # The scheduler name
        # @var string
        self.name = name

        # Array of the last statuses
        # @var array of KalturaSchedulerStatus
        self.statuses = statuses

        # Array of the last configs
        # @var array of KalturaSchedulerConfig
        self.configs = configs

        # Array of jobs that locked to this worker
        # @var array of KalturaBatchJob
        self.lockedJobs = lockedJobs

        # Avarage time between creation and queue time
        # @var int
        self.avgWait = avgWait

        # Avarage time between queue time end finish time
        # @var int
        self.avgWork = avgWork

        # last status time
        # @var int
        self.lastStatus = lastStatus

        # last status formated
        # @var string
        self.lastStatusStr = lastStatusStr


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'configuredId': getXmlNodeInt, 
        'schedulerId': getXmlNodeInt, 
        'schedulerConfiguredId': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaBatchJobType"), 
        'typeName': getXmlNodeText, 
        'name': getXmlNodeText, 
        'statuses': (KalturaObjectFactory.createArray, KalturaSchedulerStatus), 
        'configs': (KalturaObjectFactory.createArray, KalturaSchedulerConfig), 
        'lockedJobs': (KalturaObjectFactory.createArray, KalturaBatchJob), 
        'avgWait': getXmlNodeInt, 
        'avgWork': getXmlNodeInt, 
        'lastStatus': getXmlNodeInt, 
        'lastStatusStr': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSchedulerWorker.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSchedulerWorker")
        kparams.addIntIfDefined("configuredId", self.configuredId)
        kparams.addIntIfDefined("schedulerId", self.schedulerId)
        kparams.addIntIfDefined("schedulerConfiguredId", self.schedulerConfiguredId)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("typeName", self.typeName)
        kparams.addStringIfDefined("name", self.name)
        kparams.addArrayIfDefined("statuses", self.statuses)
        kparams.addArrayIfDefined("configs", self.configs)
        kparams.addArrayIfDefined("lockedJobs", self.lockedJobs)
        kparams.addIntIfDefined("avgWait", self.avgWait)
        kparams.addIntIfDefined("avgWork", self.avgWork)
        kparams.addIntIfDefined("lastStatus", self.lastStatus)
        kparams.addStringIfDefined("lastStatusStr", self.lastStatusStr)
        return kparams

    def getId(self):
        return self.id

    def getConfiguredId(self):
        return self.configuredId

    def setConfiguredId(self, newConfiguredId):
        self.configuredId = newConfiguredId

    def getSchedulerId(self):
        return self.schedulerId

    def setSchedulerId(self, newSchedulerId):
        self.schedulerId = newSchedulerId

    def getSchedulerConfiguredId(self):
        return self.schedulerConfiguredId

    def setSchedulerConfiguredId(self, newSchedulerConfiguredId):
        self.schedulerConfiguredId = newSchedulerConfiguredId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTypeName(self):
        return self.typeName

    def setTypeName(self, newTypeName):
        self.typeName = newTypeName

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getStatuses(self):
        return self.statuses

    def setStatuses(self, newStatuses):
        self.statuses = newStatuses

    def getConfigs(self):
        return self.configs

    def setConfigs(self, newConfigs):
        self.configs = newConfigs

    def getLockedJobs(self):
        return self.lockedJobs

    def setLockedJobs(self, newLockedJobs):
        self.lockedJobs = newLockedJobs

    def getAvgWait(self):
        return self.avgWait

    def setAvgWait(self, newAvgWait):
        self.avgWait = newAvgWait

    def getAvgWork(self):
        return self.avgWork

    def setAvgWork(self, newAvgWork):
        self.avgWork = newAvgWork

    def getLastStatus(self):
        return self.lastStatus

    def setLastStatus(self, newLastStatus):
        self.lastStatus = newLastStatus

    def getLastStatusStr(self):
        return self.lastStatusStr

    def setLastStatusStr(self, newLastStatusStr):
        self.lastStatusStr = newLastStatusStr


# @package Kaltura
# @subpackage Client
class KalturaScheduler(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            configuredId=NotImplemented,
            name=NotImplemented,
            host=NotImplemented,
            statuses=NotImplemented,
            configs=NotImplemented,
            workers=NotImplemented,
            createdAt=NotImplemented,
            lastStatus=NotImplemented,
            lastStatusStr=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the Scheduler
        # @var int
        # @readonly
        self.id = id

        # The id as configured in the batch config
        # @var int
        self.configuredId = configuredId

        # The scheduler name
        # @var string
        self.name = name

        # The host name
        # @var string
        self.host = host

        # Array of the last statuses
        # @var array of KalturaSchedulerStatus
        # @readonly
        self.statuses = statuses

        # Array of the last configs
        # @var array of KalturaSchedulerConfig
        # @readonly
        self.configs = configs

        # Array of the workers
        # @var array of KalturaSchedulerWorker
        # @readonly
        self.workers = workers

        # creation time
        # @var int
        # @readonly
        self.createdAt = createdAt

        # last status time
        # @var int
        # @readonly
        self.lastStatus = lastStatus

        # last status formated
        # @var string
        # @readonly
        self.lastStatusStr = lastStatusStr


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'configuredId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'host': getXmlNodeText, 
        'statuses': (KalturaObjectFactory.createArray, KalturaSchedulerStatus), 
        'configs': (KalturaObjectFactory.createArray, KalturaSchedulerConfig), 
        'workers': (KalturaObjectFactory.createArray, KalturaSchedulerWorker), 
        'createdAt': getXmlNodeInt, 
        'lastStatus': getXmlNodeInt, 
        'lastStatusStr': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaScheduler.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaScheduler")
        kparams.addIntIfDefined("configuredId", self.configuredId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("host", self.host)
        return kparams

    def getId(self):
        return self.id

    def getConfiguredId(self):
        return self.configuredId

    def setConfiguredId(self, newConfiguredId):
        self.configuredId = newConfiguredId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getHost(self):
        return self.host

    def setHost(self, newHost):
        self.host = newHost

    def getStatuses(self):
        return self.statuses

    def getConfigs(self):
        return self.configs

    def getWorkers(self):
        return self.workers

    def getCreatedAt(self):
        return self.createdAt

    def getLastStatus(self):
        return self.lastStatus

    def getLastStatusStr(self):
        return self.lastStatusStr


# @package Kaltura
# @subpackage Client
class KalturaGroupUser(KalturaObjectBase):
    def __init__(self,
            userId=NotImplemented,
            groupId=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @insertonly
        self.userId = userId

        # @var string
        # @insertonly
        self.groupId = groupId

        # @var KalturaGroupUserStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'groupId': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaGroupUserStatus"), 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGroupUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaGroupUser")
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addStringIfDefined("groupId", self.groupId)
        return kparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getGroupId(self):
        return self.groupId

    def setGroupId(self, newGroupId):
        self.groupId = newGroupId

    def getStatus(self):
        return self.status

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaObject(KalturaObjectBase):
    def __init__(self,
            relatedObjects=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var map
        # @readonly
        self.relatedObjects = relatedObjects


    PROPERTY_LOADERS = {
        'relatedObjects': (KalturaObjectFactory.create, map), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObject.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaObject")
        return kparams

    def getRelatedObjects(self):
        return self.relatedObjects


# @package Kaltura
# @subpackage Client
class KalturaIntegerValue(KalturaValue):
    """An int representation to return an array of ints"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaValue.__init__(self,
            description)

        # @var int
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIntegerValue.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaValue.toParams(self)
        kparams.put("objectType", "KalturaIntegerValue")
        kparams.addIntIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamConfiguration(KalturaObjectBase):
    """A representation of a live stream configuration"""

    def __init__(self,
            protocol=NotImplemented,
            url=NotImplemented,
            publishUrl=NotImplemented,
            backupUrl=NotImplemented,
            streamName=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var KalturaPlaybackProtocol
        self.protocol = protocol

        # @var string
        self.url = url

        # @var string
        self.publishUrl = publishUrl

        # @var string
        self.backupUrl = backupUrl

        # @var string
        self.streamName = streamName


    PROPERTY_LOADERS = {
        'protocol': (KalturaEnumsFactory.createString, "KalturaPlaybackProtocol"), 
        'url': getXmlNodeText, 
        'publishUrl': getXmlNodeText, 
        'backupUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamConfiguration")
        kparams.addStringEnumIfDefined("protocol", self.protocol)
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("publishUrl", self.publishUrl)
        kparams.addStringIfDefined("backupUrl", self.backupUrl)
        kparams.addStringIfDefined("streamName", self.streamName)
        return kparams

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getPublishUrl(self):
        return self.publishUrl

    def setPublishUrl(self, newPublishUrl):
        self.publishUrl = newPublishUrl

    def getBackupUrl(self):
        return self.backupUrl

    def setBackupUrl(self, newBackupUrl):
        self.backupUrl = newBackupUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamPushPublishConfiguration(KalturaObjectBase):
    """Basic push-publish configuration for Kaltura live stream entry"""

    def __init__(self,
            publishUrl=NotImplemented,
            backupPublishUrl=NotImplemented,
            port=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.publishUrl = publishUrl

        # @var string
        self.backupPublishUrl = backupPublishUrl

        # @var string
        self.port = port


    PROPERTY_LOADERS = {
        'publishUrl': getXmlNodeText, 
        'backupPublishUrl': getXmlNodeText, 
        'port': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamPushPublishConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamPushPublishConfiguration")
        kparams.addStringIfDefined("publishUrl", self.publishUrl)
        kparams.addStringIfDefined("backupPublishUrl", self.backupPublishUrl)
        kparams.addStringIfDefined("port", self.port)
        return kparams

    def getPublishUrl(self):
        return self.publishUrl

    def setPublishUrl(self, newPublishUrl):
        self.publishUrl = newPublishUrl

    def getBackupPublishUrl(self):
        return self.backupPublishUrl

    def setBackupPublishUrl(self, newBackupPublishUrl):
        self.backupPublishUrl = newBackupPublishUrl

    def getPort(self):
        return self.port

    def setPort(self, newPort):
        self.port = newPort


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryRecordingOptions(KalturaObjectBase):
    """A representation of a live stream recording entry configuration"""

    def __init__(self,
            shouldCopyEntitlement=NotImplemented,
            shouldCopyScheduling=NotImplemented,
            shouldCopyThumbnail=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var KalturaNullableBoolean
        self.shouldCopyEntitlement = shouldCopyEntitlement

        # @var KalturaNullableBoolean
        self.shouldCopyScheduling = shouldCopyScheduling

        # @var KalturaNullableBoolean
        self.shouldCopyThumbnail = shouldCopyThumbnail


    PROPERTY_LOADERS = {
        'shouldCopyEntitlement': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'shouldCopyScheduling': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'shouldCopyThumbnail': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryRecordingOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryRecordingOptions")
        kparams.addIntEnumIfDefined("shouldCopyEntitlement", self.shouldCopyEntitlement)
        kparams.addIntEnumIfDefined("shouldCopyScheduling", self.shouldCopyScheduling)
        kparams.addIntEnumIfDefined("shouldCopyThumbnail", self.shouldCopyThumbnail)
        return kparams

    def getShouldCopyEntitlement(self):
        return self.shouldCopyEntitlement

    def setShouldCopyEntitlement(self, newShouldCopyEntitlement):
        self.shouldCopyEntitlement = newShouldCopyEntitlement

    def getShouldCopyScheduling(self):
        return self.shouldCopyScheduling

    def setShouldCopyScheduling(self, newShouldCopyScheduling):
        self.shouldCopyScheduling = newShouldCopyScheduling

    def getShouldCopyThumbnail(self):
        return self.shouldCopyThumbnail

    def setShouldCopyThumbnail(self, newShouldCopyThumbnail):
        self.shouldCopyThumbnail = newShouldCopyThumbnail


# @package Kaltura
# @subpackage Client
class KalturaLiveEntry(KalturaMediaEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented):
        KalturaMediaEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled)

        # The message to be presented when the stream is offline
        # @var string
        self.offlineMessage = offlineMessage

        # Recording Status Enabled/Disabled
        # @var KalturaRecordStatus
        self.recordStatus = recordStatus

        # DVR Status Enabled/Disabled
        # @var KalturaDVRStatus
        self.dvrStatus = dvrStatus

        # Window of time which the DVR allows for backwards scrubbing (in minutes)
        # @var int
        self.dvrWindow = dvrWindow

        # Elapsed recording time (in msec) up to the point where the live stream was last stopped (unpublished).
        # @var int
        self.lastElapsedRecordingTime = lastElapsedRecordingTime

        # Array of key value protocol->live stream url objects
        # @var array of KalturaLiveStreamConfiguration
        self.liveStreamConfigurations = liveStreamConfigurations

        # Recorded entry id
        # @var string
        self.recordedEntryId = recordedEntryId

        # Flag denoting whether entry should be published by the media server
        # @var KalturaLivePublishStatus
        self.pushPublishEnabled = pushPublishEnabled

        # Array of publish configurations
        # @var array of KalturaLiveStreamPushPublishConfiguration
        self.publishConfigurations = publishConfigurations

        # The first time in which the entry was broadcast
        # @var int
        # @readonly
        self.firstBroadcast = firstBroadcast

        # The Last time in which the entry was broadcast
        # @var int
        # @readonly
        self.lastBroadcast = lastBroadcast

        # The time (unix timestamp in milliseconds) in which the entry broadcast started or 0 when the entry is off the air
        # @var float
        self.currentBroadcastStartTime = currentBroadcastStartTime

        # @var KalturaLiveEntryRecordingOptions
        self.recordingOptions = recordingOptions

        # the status of the entry of type EntryServerNodeStatus
        # @var KalturaEntryServerNodeStatus
        # @readonly
        self.liveStatus = liveStatus


    PROPERTY_LOADERS = {
        'offlineMessage': getXmlNodeText, 
        'recordStatus': (KalturaEnumsFactory.createInt, "KalturaRecordStatus"), 
        'dvrStatus': (KalturaEnumsFactory.createInt, "KalturaDVRStatus"), 
        'dvrWindow': getXmlNodeInt, 
        'lastElapsedRecordingTime': getXmlNodeInt, 
        'liveStreamConfigurations': (KalturaObjectFactory.createArray, KalturaLiveStreamConfiguration), 
        'recordedEntryId': getXmlNodeText, 
        'pushPublishEnabled': (KalturaEnumsFactory.createInt, "KalturaLivePublishStatus"), 
        'publishConfigurations': (KalturaObjectFactory.createArray, KalturaLiveStreamPushPublishConfiguration), 
        'firstBroadcast': getXmlNodeInt, 
        'lastBroadcast': getXmlNodeInt, 
        'currentBroadcastStartTime': getXmlNodeFloat, 
        'recordingOptions': (KalturaObjectFactory.create, KalturaLiveEntryRecordingOptions), 
        'liveStatus': (KalturaEnumsFactory.createInt, "KalturaEntryServerNodeStatus"), 
    }

    def fromXml(self, node):
        KalturaMediaEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaEntry.toParams(self)
        kparams.put("objectType", "KalturaLiveEntry")
        kparams.addStringIfDefined("offlineMessage", self.offlineMessage)
        kparams.addIntEnumIfDefined("recordStatus", self.recordStatus)
        kparams.addIntEnumIfDefined("dvrStatus", self.dvrStatus)
        kparams.addIntIfDefined("dvrWindow", self.dvrWindow)
        kparams.addIntIfDefined("lastElapsedRecordingTime", self.lastElapsedRecordingTime)
        kparams.addArrayIfDefined("liveStreamConfigurations", self.liveStreamConfigurations)
        kparams.addStringIfDefined("recordedEntryId", self.recordedEntryId)
        kparams.addIntEnumIfDefined("pushPublishEnabled", self.pushPublishEnabled)
        kparams.addArrayIfDefined("publishConfigurations", self.publishConfigurations)
        kparams.addFloatIfDefined("currentBroadcastStartTime", self.currentBroadcastStartTime)
        kparams.addObjectIfDefined("recordingOptions", self.recordingOptions)
        return kparams

    def getOfflineMessage(self):
        return self.offlineMessage

    def setOfflineMessage(self, newOfflineMessage):
        self.offlineMessage = newOfflineMessage

    def getRecordStatus(self):
        return self.recordStatus

    def setRecordStatus(self, newRecordStatus):
        self.recordStatus = newRecordStatus

    def getDvrStatus(self):
        return self.dvrStatus

    def setDvrStatus(self, newDvrStatus):
        self.dvrStatus = newDvrStatus

    def getDvrWindow(self):
        return self.dvrWindow

    def setDvrWindow(self, newDvrWindow):
        self.dvrWindow = newDvrWindow

    def getLastElapsedRecordingTime(self):
        return self.lastElapsedRecordingTime

    def setLastElapsedRecordingTime(self, newLastElapsedRecordingTime):
        self.lastElapsedRecordingTime = newLastElapsedRecordingTime

    def getLiveStreamConfigurations(self):
        return self.liveStreamConfigurations

    def setLiveStreamConfigurations(self, newLiveStreamConfigurations):
        self.liveStreamConfigurations = newLiveStreamConfigurations

    def getRecordedEntryId(self):
        return self.recordedEntryId

    def setRecordedEntryId(self, newRecordedEntryId):
        self.recordedEntryId = newRecordedEntryId

    def getPushPublishEnabled(self):
        return self.pushPublishEnabled

    def setPushPublishEnabled(self, newPushPublishEnabled):
        self.pushPublishEnabled = newPushPublishEnabled

    def getPublishConfigurations(self):
        return self.publishConfigurations

    def setPublishConfigurations(self, newPublishConfigurations):
        self.publishConfigurations = newPublishConfigurations

    def getFirstBroadcast(self):
        return self.firstBroadcast

    def getLastBroadcast(self):
        return self.lastBroadcast

    def getCurrentBroadcastStartTime(self):
        return self.currentBroadcastStartTime

    def setCurrentBroadcastStartTime(self, newCurrentBroadcastStartTime):
        self.currentBroadcastStartTime = newCurrentBroadcastStartTime

    def getRecordingOptions(self):
        return self.recordingOptions

    def setRecordingOptions(self, newRecordingOptions):
        self.recordingOptions = newRecordingOptions

    def getLiveStatus(self):
        return self.liveStatus


# @package Kaltura
# @subpackage Client
class KalturaLiveChannel(KalturaLiveEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            playlistId=NotImplemented,
            repeat=NotImplemented):
        KalturaLiveEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus)

        # Playlist id to be played
        # @var string
        self.playlistId = playlistId

        # Indicates that the segments should be repeated for ever
        # @var KalturaNullableBoolean
        self.repeat = repeat


    PROPERTY_LOADERS = {
        'playlistId': getXmlNodeText, 
        'repeat': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaLiveEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannel.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntry.toParams(self)
        kparams.put("objectType", "KalturaLiveChannel")
        kparams.addStringIfDefined("playlistId", self.playlistId)
        kparams.addIntEnumIfDefined("repeat", self.repeat)
        return kparams

    def getPlaylistId(self):
        return self.playlistId

    def setPlaylistId(self, newPlaylistId):
        self.playlistId = newPlaylistId

    def getRepeat(self):
        return self.repeat

    def setRepeat(self, newRepeat):
        self.repeat = newRepeat


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegment(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            type=NotImplemented,
            status=NotImplemented,
            channelId=NotImplemented,
            entryId=NotImplemented,
            triggerType=NotImplemented,
            triggerSegmentId=NotImplemented,
            startTime=NotImplemented,
            duration=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Unique identifier
        # @var string
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Segment creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Segment update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Segment name
        # @var string
        self.name = name

        # Segment description
        # @var string
        self.description = description

        # Segment tags
        # @var string
        self.tags = tags

        # Segment could be associated with the main stream, as additional stream or as overlay
        # @var KalturaLiveChannelSegmentType
        self.type = type

        # @var KalturaLiveChannelSegmentStatus
        # @readonly
        self.status = status

        # Live channel id
        # @var string
        self.channelId = channelId

        # Entry id to be played
        # @var string
        self.entryId = entryId

        # Segment start time trigger type
        # @var KalturaLiveChannelSegmentTriggerType
        self.triggerType = triggerType

        # Live channel segment that the trigger relates to
        # @var string
        self.triggerSegmentId = triggerSegmentId

        # Segment play start time, in mili-seconds, according to trigger type
        # @var float
        self.startTime = startTime

        # Segment play duration time, in mili-seconds
        # @var float
        self.duration = duration


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createString, "KalturaLiveChannelSegmentType"), 
        'status': (KalturaEnumsFactory.createString, "KalturaLiveChannelSegmentStatus"), 
        'channelId': getXmlNodeText, 
        'entryId': getXmlNodeText, 
        'triggerType': (KalturaEnumsFactory.createString, "KalturaLiveChannelSegmentTriggerType"), 
        'triggerSegmentId': getXmlNodeText, 
        'startTime': getXmlNodeFloat, 
        'duration': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelSegment.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelSegment")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("channelId", self.channelId)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringEnumIfDefined("triggerType", self.triggerType)
        kparams.addStringIfDefined("triggerSegmentId", self.triggerSegmentId)
        kparams.addFloatIfDefined("startTime", self.startTime)
        kparams.addFloatIfDefined("duration", self.duration)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getStatus(self):
        return self.status

    def getChannelId(self):
        return self.channelId

    def setChannelId(self, newChannelId):
        self.channelId = newChannelId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getTriggerType(self):
        return self.triggerType

    def setTriggerType(self, newTriggerType):
        self.triggerType = newTriggerType

    def getTriggerSegmentId(self):
        return self.triggerSegmentId

    def setTriggerSegmentId(self, newTriggerSegmentId):
        self.triggerSegmentId = newTriggerSegmentId

    def getStartTime(self):
        return self.startTime

    def setStartTime(self, newStartTime):
        self.startTime = newStartTime

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration


# @package Kaltura
# @subpackage Client
class KalturaLiveReportExportParams(KalturaObjectBase):
    def __init__(self,
            entryIds=NotImplemented,
            recpientEmail=NotImplemented,
            timeZoneOffset=NotImplemented,
            applicationUrlTemplate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.entryIds = entryIds

        # @var string
        self.recpientEmail = recpientEmail

        # Time zone offset in minutes (between client to UTC)
        # @var int
        self.timeZoneOffset = timeZoneOffset

        # Optional argument that allows controlling the prefix of the exported csv url
        # @var string
        self.applicationUrlTemplate = applicationUrlTemplate


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'recpientEmail': getXmlNodeText, 
        'timeZoneOffset': getXmlNodeInt, 
        'applicationUrlTemplate': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveReportExportParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveReportExportParams")
        kparams.addStringIfDefined("entryIds", self.entryIds)
        kparams.addStringIfDefined("recpientEmail", self.recpientEmail)
        kparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        kparams.addStringIfDefined("applicationUrlTemplate", self.applicationUrlTemplate)
        return kparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getRecpientEmail(self):
        return self.recpientEmail

    def setRecpientEmail(self, newRecpientEmail):
        self.recpientEmail = newRecpientEmail

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getApplicationUrlTemplate(self):
        return self.applicationUrlTemplate

    def setApplicationUrlTemplate(self, newApplicationUrlTemplate):
        self.applicationUrlTemplate = newApplicationUrlTemplate


# @package Kaltura
# @subpackage Client
class KalturaLiveReportExportResponse(KalturaObjectBase):
    def __init__(self,
            referenceJobId=NotImplemented,
            reportEmail=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.referenceJobId = referenceJobId

        # @var string
        self.reportEmail = reportEmail


    PROPERTY_LOADERS = {
        'referenceJobId': getXmlNodeInt, 
        'reportEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveReportExportResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveReportExportResponse")
        kparams.addIntIfDefined("referenceJobId", self.referenceJobId)
        kparams.addStringIfDefined("reportEmail", self.reportEmail)
        return kparams

    def getReferenceJobId(self):
        return self.referenceJobId

    def setReferenceJobId(self, newReferenceJobId):
        self.referenceJobId = newReferenceJobId

    def getReportEmail(self):
        return self.reportEmail

    def setReportEmail(self, newReportEmail):
        self.reportEmail = newReportEmail


# @package Kaltura
# @subpackage Client
class KalturaLiveReportInputFilter(KalturaObjectBase):
    def __init__(self,
            entryIds=NotImplemented,
            fromTime=NotImplemented,
            toTime=NotImplemented,
            live=NotImplemented,
            orderBy=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.entryIds = entryIds

        # @var int
        self.fromTime = fromTime

        # @var int
        self.toTime = toTime

        # @var KalturaNullableBoolean
        self.live = live

        # @var KalturaLiveReportOrderBy
        self.orderBy = orderBy


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'fromTime': getXmlNodeInt, 
        'toTime': getXmlNodeInt, 
        'live': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaLiveReportOrderBy"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveReportInputFilter")
        kparams.addStringIfDefined("entryIds", self.entryIds)
        kparams.addIntIfDefined("fromTime", self.fromTime)
        kparams.addIntIfDefined("toTime", self.toTime)
        kparams.addIntEnumIfDefined("live", self.live)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        return kparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getFromTime(self):
        return self.fromTime

    def setFromTime(self, newFromTime):
        self.fromTime = newFromTime

    def getToTime(self):
        return self.toTime

    def setToTime(self, newToTime):
        self.toTime = newToTime

    def getLive(self):
        return self.live

    def setLive(self, newLive):
        self.live = newLive

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy


# @package Kaltura
# @subpackage Client
class KalturaLiveStats(KalturaObjectBase):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.audience = audience

        # @var int
        self.dvrAudience = dvrAudience

        # @var float
        self.avgBitrate = avgBitrate

        # @var int
        self.bufferTime = bufferTime

        # @var int
        self.plays = plays

        # @var int
        self.secondsViewed = secondsViewed

        # @var int
        self.startEvent = startEvent

        # @var int
        self.timestamp = timestamp


    PROPERTY_LOADERS = {
        'audience': getXmlNodeInt, 
        'dvrAudience': getXmlNodeInt, 
        'avgBitrate': getXmlNodeFloat, 
        'bufferTime': getXmlNodeInt, 
        'plays': getXmlNodeInt, 
        'secondsViewed': getXmlNodeInt, 
        'startEvent': getXmlNodeInt, 
        'timestamp': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStats")
        kparams.addIntIfDefined("audience", self.audience)
        kparams.addIntIfDefined("dvrAudience", self.dvrAudience)
        kparams.addFloatIfDefined("avgBitrate", self.avgBitrate)
        kparams.addIntIfDefined("bufferTime", self.bufferTime)
        kparams.addIntIfDefined("plays", self.plays)
        kparams.addIntIfDefined("secondsViewed", self.secondsViewed)
        kparams.addIntIfDefined("startEvent", self.startEvent)
        kparams.addIntIfDefined("timestamp", self.timestamp)
        return kparams

    def getAudience(self):
        return self.audience

    def setAudience(self, newAudience):
        self.audience = newAudience

    def getDvrAudience(self):
        return self.dvrAudience

    def setDvrAudience(self, newDvrAudience):
        self.dvrAudience = newDvrAudience

    def getAvgBitrate(self):
        return self.avgBitrate

    def setAvgBitrate(self, newAvgBitrate):
        self.avgBitrate = newAvgBitrate

    def getBufferTime(self):
        return self.bufferTime

    def setBufferTime(self, newBufferTime):
        self.bufferTime = newBufferTime

    def getPlays(self):
        return self.plays

    def setPlays(self, newPlays):
        self.plays = newPlays

    def getSecondsViewed(self):
        return self.secondsViewed

    def setSecondsViewed(self, newSecondsViewed):
        self.secondsViewed = newSecondsViewed

    def getStartEvent(self):
        return self.startEvent

    def setStartEvent(self, newStartEvent):
        self.startEvent = newStartEvent

    def getTimestamp(self):
        return self.timestamp

    def setTimestamp(self, newTimestamp):
        self.timestamp = newTimestamp


# @package Kaltura
# @subpackage Client
class KalturaLiveStatsEvent(KalturaObjectBase):
    """Will hold data from the Kaltura Player components to be passed on to the live analytics system"""

    def __init__(self,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            eventType=NotImplemented,
            sessionId=NotImplemented,
            eventIndex=NotImplemented,
            bufferTime=NotImplemented,
            bitrate=NotImplemented,
            referrer=NotImplemented,
            isLive=NotImplemented,
            startTime=NotImplemented,
            deliveryType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # an integer representing the type of event being sent from the player
        # @var KalturaLiveStatsEventType
        self.eventType = eventType

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # incremental sequence of the event
        # @var int
        self.eventIndex = eventIndex

        # buffer time in seconds from the last 10 seconds
        # @var int
        self.bufferTime = bufferTime

        # bitrate used in the last 10 seconds
        # @var int
        self.bitrate = bitrate

        # the referrer of the client
        # @var string
        self.referrer = referrer

        # @var bool
        self.isLive = isLive

        # the event start time as string
        # @var string
        self.startTime = startTime

        # delivery type used for this stream
        # @var KalturaPlaybackProtocol
        self.deliveryType = deliveryType


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'eventType': (KalturaEnumsFactory.createInt, "KalturaLiveStatsEventType"), 
        'sessionId': getXmlNodeText, 
        'eventIndex': getXmlNodeInt, 
        'bufferTime': getXmlNodeInt, 
        'bitrate': getXmlNodeInt, 
        'referrer': getXmlNodeText, 
        'isLive': getXmlNodeBool, 
        'startTime': getXmlNodeText, 
        'deliveryType': (KalturaEnumsFactory.createString, "KalturaPlaybackProtocol"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStatsEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStatsEvent")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntEnumIfDefined("eventType", self.eventType)
        kparams.addStringIfDefined("sessionId", self.sessionId)
        kparams.addIntIfDefined("eventIndex", self.eventIndex)
        kparams.addIntIfDefined("bufferTime", self.bufferTime)
        kparams.addIntIfDefined("bitrate", self.bitrate)
        kparams.addStringIfDefined("referrer", self.referrer)
        kparams.addBoolIfDefined("isLive", self.isLive)
        kparams.addStringIfDefined("startTime", self.startTime)
        kparams.addStringEnumIfDefined("deliveryType", self.deliveryType)
        return kparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getEventType(self):
        return self.eventType

    def setEventType(self, newEventType):
        self.eventType = newEventType

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getEventIndex(self):
        return self.eventIndex

    def setEventIndex(self, newEventIndex):
        self.eventIndex = newEventIndex

    def getBufferTime(self):
        return self.bufferTime

    def setBufferTime(self, newBufferTime):
        self.bufferTime = newBufferTime

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIsLive(self):
        return self.isLive

    def setIsLive(self, newIsLive):
        self.isLive = newIsLive

    def getStartTime(self):
        return self.startTime

    def setStartTime(self, newStartTime):
        self.startTime = newStartTime

    def getDeliveryType(self):
        return self.deliveryType

    def setDeliveryType(self, newDeliveryType):
        self.deliveryType = newDeliveryType


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamBitrate(KalturaObjectBase):
    def __init__(self,
            bitrate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            tags=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        self.bitrate = bitrate

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var string
        self.tags = tags


    PROPERTY_LOADERS = {
        'bitrate': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'tags': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamBitrate.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamBitrate")
        kparams.addIntIfDefined("bitrate", self.bitrate)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addStringIfDefined("tags", self.tags)
        return kparams

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntry(KalturaLiveEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            streamRemoteId=NotImplemented,
            streamRemoteBackupId=NotImplemented,
            bitrates=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            primaryRtspBroadcastingUrl=NotImplemented,
            secondaryRtspBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamUrl=NotImplemented,
            hlsStreamUrl=NotImplemented,
            urlManager=NotImplemented,
            encodingIP1=NotImplemented,
            encodingIP2=NotImplemented,
            streamPassword=NotImplemented,
            streamUsername=NotImplemented,
            primaryServerNodeId=NotImplemented):
        KalturaLiveEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus)

        # The stream id as provided by the provider
        # @var string
        # @readonly
        self.streamRemoteId = streamRemoteId

        # The backup stream id as provided by the provider
        # @var string
        # @readonly
        self.streamRemoteBackupId = streamRemoteBackupId

        # Array of supported bitrates
        # @var array of KalturaLiveStreamBitrate
        self.bitrates = bitrates

        # @var string
        self.primaryBroadcastingUrl = primaryBroadcastingUrl

        # @var string
        self.secondaryBroadcastingUrl = secondaryBroadcastingUrl

        # @var string
        self.primaryRtspBroadcastingUrl = primaryRtspBroadcastingUrl

        # @var string
        self.secondaryRtspBroadcastingUrl = secondaryRtspBroadcastingUrl

        # @var string
        self.streamName = streamName

        # The stream url
        # @var string
        self.streamUrl = streamUrl

        # HLS URL - URL for live stream playback on mobile device
        # @var string
        self.hlsStreamUrl = hlsStreamUrl

        # URL Manager to handle the live stream URL (for instance, add token)
        # @var string
        self.urlManager = urlManager

        # The broadcast primary ip
        # @var string
        self.encodingIP1 = encodingIP1

        # The broadcast secondary ip
        # @var string
        self.encodingIP2 = encodingIP2

        # The broadcast password
        # @var string
        self.streamPassword = streamPassword

        # The broadcast username
        # @var string
        # @readonly
        self.streamUsername = streamUsername

        # The Streams primary server node id
        # @var int
        # @readonly
        self.primaryServerNodeId = primaryServerNodeId


    PROPERTY_LOADERS = {
        'streamRemoteId': getXmlNodeText, 
        'streamRemoteBackupId': getXmlNodeText, 
        'bitrates': (KalturaObjectFactory.createArray, KalturaLiveStreamBitrate), 
        'primaryBroadcastingUrl': getXmlNodeText, 
        'secondaryBroadcastingUrl': getXmlNodeText, 
        'primaryRtspBroadcastingUrl': getXmlNodeText, 
        'secondaryRtspBroadcastingUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
        'streamUrl': getXmlNodeText, 
        'hlsStreamUrl': getXmlNodeText, 
        'urlManager': getXmlNodeText, 
        'encodingIP1': getXmlNodeText, 
        'encodingIP2': getXmlNodeText, 
        'streamPassword': getXmlNodeText, 
        'streamUsername': getXmlNodeText, 
        'primaryServerNodeId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaLiveEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntry.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamEntry")
        kparams.addArrayIfDefined("bitrates", self.bitrates)
        kparams.addStringIfDefined("primaryBroadcastingUrl", self.primaryBroadcastingUrl)
        kparams.addStringIfDefined("secondaryBroadcastingUrl", self.secondaryBroadcastingUrl)
        kparams.addStringIfDefined("primaryRtspBroadcastingUrl", self.primaryRtspBroadcastingUrl)
        kparams.addStringIfDefined("secondaryRtspBroadcastingUrl", self.secondaryRtspBroadcastingUrl)
        kparams.addStringIfDefined("streamName", self.streamName)
        kparams.addStringIfDefined("streamUrl", self.streamUrl)
        kparams.addStringIfDefined("hlsStreamUrl", self.hlsStreamUrl)
        kparams.addStringIfDefined("urlManager", self.urlManager)
        kparams.addStringIfDefined("encodingIP1", self.encodingIP1)
        kparams.addStringIfDefined("encodingIP2", self.encodingIP2)
        kparams.addStringIfDefined("streamPassword", self.streamPassword)
        return kparams

    def getStreamRemoteId(self):
        return self.streamRemoteId

    def getStreamRemoteBackupId(self):
        return self.streamRemoteBackupId

    def getBitrates(self):
        return self.bitrates

    def setBitrates(self, newBitrates):
        self.bitrates = newBitrates

    def getPrimaryBroadcastingUrl(self):
        return self.primaryBroadcastingUrl

    def setPrimaryBroadcastingUrl(self, newPrimaryBroadcastingUrl):
        self.primaryBroadcastingUrl = newPrimaryBroadcastingUrl

    def getSecondaryBroadcastingUrl(self):
        return self.secondaryBroadcastingUrl

    def setSecondaryBroadcastingUrl(self, newSecondaryBroadcastingUrl):
        self.secondaryBroadcastingUrl = newSecondaryBroadcastingUrl

    def getPrimaryRtspBroadcastingUrl(self):
        return self.primaryRtspBroadcastingUrl

    def setPrimaryRtspBroadcastingUrl(self, newPrimaryRtspBroadcastingUrl):
        self.primaryRtspBroadcastingUrl = newPrimaryRtspBroadcastingUrl

    def getSecondaryRtspBroadcastingUrl(self):
        return self.secondaryRtspBroadcastingUrl

    def setSecondaryRtspBroadcastingUrl(self, newSecondaryRtspBroadcastingUrl):
        self.secondaryRtspBroadcastingUrl = newSecondaryRtspBroadcastingUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName

    def getStreamUrl(self):
        return self.streamUrl

    def setStreamUrl(self, newStreamUrl):
        self.streamUrl = newStreamUrl

    def getHlsStreamUrl(self):
        return self.hlsStreamUrl

    def setHlsStreamUrl(self, newHlsStreamUrl):
        self.hlsStreamUrl = newHlsStreamUrl

    def getUrlManager(self):
        return self.urlManager

    def setUrlManager(self, newUrlManager):
        self.urlManager = newUrlManager

    def getEncodingIP1(self):
        return self.encodingIP1

    def setEncodingIP1(self, newEncodingIP1):
        self.encodingIP1 = newEncodingIP1

    def getEncodingIP2(self):
        return self.encodingIP2

    def setEncodingIP2(self, newEncodingIP2):
        self.encodingIP2 = newEncodingIP2

    def getStreamPassword(self):
        return self.streamPassword

    def setStreamPassword(self, newStreamPassword):
        self.streamPassword = newStreamPassword

    def getStreamUsername(self):
        return self.streamUsername

    def getPrimaryServerNodeId(self):
        return self.primaryServerNodeId


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamParams(KalturaObjectBase):
    def __init__(self,
            bitrate=NotImplemented,
            flavorId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            codec=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Bit rate of the stream. (i.e. 900)
        # @var int
        self.bitrate = bitrate

        # flavor asset id
        # @var string
        self.flavorId = flavorId

        # Stream's width
        # @var int
        self.width = width

        # Stream's height
        # @var int
        self.height = height

        # Live stream's codec
        # @var string
        self.codec = codec


    PROPERTY_LOADERS = {
        'bitrate': getXmlNodeInt, 
        'flavorId': getXmlNodeText, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'codec': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamParams")
        kparams.addIntIfDefined("bitrate", self.bitrate)
        kparams.addStringIfDefined("flavorId", self.flavorId)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addStringIfDefined("codec", self.codec)
        return kparams

    def getBitrate(self):
        return self.bitrate

    def setBitrate(self, newBitrate):
        self.bitrate = newBitrate

    def getFlavorId(self):
        return self.flavorId

    def setFlavorId(self, newFlavorId):
        self.flavorId = newFlavorId

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getCodec(self):
        return self.codec

    def setCodec(self, newCodec):
        self.codec = newCodec


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # This filter should be in use for retrieving only a specific entry (identified by its entryId).
        # @var string
        self.idEqual = idEqual

        # This filter should be in use for retrieving few specific entries (string should include comma separated list of entryId strings).
        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry names (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameLike = nameLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameMultiLikeOr = nameMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry names, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.nameMultiLikeAnd = nameMultiLikeAnd

        # This filter should be in use for retrieving entries with a specific name.
        # @var string
        self.nameEqual = nameEqual

        # This filter should be in use for retrieving only entries which were uploaded by/assigned to users of a specific Kaltura Partner (identified by Partner ID).
        # @var int
        self.partnerIdEqual = partnerIdEqual

        # This filter should be in use for retrieving only entries within Kaltura network which were uploaded by/assigned to users of few Kaltura Partners  (string should include comma separated list of PartnerIDs)
        # @var string
        self.partnerIdIn = partnerIdIn

        # This filter parameter should be in use for retrieving only entries, uploaded by/assigned to a specific user (identified by user Id).
        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.creatorIdEqual = creatorIdEqual

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsLike = tagsLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # This filter should be in use for retrieving specific entries. It should include only one string to search for in entry tags set by an ADMIN user (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsLike = adminTagsLike

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an OR logic to retrieve entries that contain at least one input string (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsMultiLikeOr = adminTagsMultiLikeOr

        # This filter should be in use for retrieving specific entries. It could include few (comma separated) strings for searching in entry tags, set by an ADMIN user, while applying an AND logic to retrieve entries that contain all input strings (no wildcards, spaces are treated as part of the string).
        # @var string
        self.adminTagsMultiLikeAnd = adminTagsMultiLikeAnd

        # @var string
        self.categoriesMatchAnd = categoriesMatchAnd

        # All entries within these categories or their child categories.
        # @var string
        self.categoriesMatchOr = categoriesMatchOr

        # @var string
        self.categoriesNotContains = categoriesNotContains

        # @var string
        self.categoriesIdsMatchAnd = categoriesIdsMatchAnd

        # All entries of the categories, excluding their child categories.
        # 	 To include entries of the child categories, use categoryAncestorIdIn, or categoriesMatchOr.
        # @var string
        self.categoriesIdsMatchOr = categoriesIdsMatchOr

        # @var string
        self.categoriesIdsNotContains = categoriesIdsNotContains

        # @var KalturaNullableBoolean
        self.categoriesIdsEmpty = categoriesIdsEmpty

        # This filter should be in use for retrieving only entries, at a specific {
        # @var KalturaEntryStatus
        self.statusEqual = statusEqual

        # This filter should be in use for retrieving only entries, not at a specific {
        # @var KalturaEntryStatus
        self.statusNotEqual = statusNotEqual

        # This filter should be in use for retrieving only entries, at few specific {
        # @var string
        self.statusIn = statusIn

        # This filter should be in use for retrieving only entries, not at few specific {
        # @var string
        self.statusNotIn = statusNotIn

        # @var KalturaEntryModerationStatus
        self.moderationStatusEqual = moderationStatusEqual

        # @var KalturaEntryModerationStatus
        self.moderationStatusNotEqual = moderationStatusNotEqual

        # @var string
        self.moderationStatusIn = moderationStatusIn

        # @var string
        self.moderationStatusNotIn = moderationStatusNotIn

        # @var KalturaEntryType
        self.typeEqual = typeEqual

        # This filter should be in use for retrieving entries of few {
        # @var string
        self.typeIn = typeIn

        # This filter parameter should be in use for retrieving only entries which were created at Kaltura system after a specific time/date (standard timestamp format).
        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # This filter parameter should be in use for retrieving only entries which were created at Kaltura system before a specific time/date (standard timestamp format).
        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.totalRankLessThanOrEqual = totalRankLessThanOrEqual

        # @var int
        self.totalRankGreaterThanOrEqual = totalRankGreaterThanOrEqual

        # @var int
        self.groupIdEqual = groupIdEqual

        # This filter should be in use for retrieving specific entries while search match the input string within all of the following metadata attributes: name, description, tags, adminTags.
        # @var string
        self.searchTextMatchAnd = searchTextMatchAnd

        # This filter should be in use for retrieving specific entries while search match the input string within at least one of the following metadata attributes: name, description, tags, adminTags.
        # @var string
        self.searchTextMatchOr = searchTextMatchOr

        # @var int
        self.accessControlIdEqual = accessControlIdEqual

        # @var string
        self.accessControlIdIn = accessControlIdIn

        # @var int
        self.startDateGreaterThanOrEqual = startDateGreaterThanOrEqual

        # @var int
        self.startDateLessThanOrEqual = startDateLessThanOrEqual

        # @var int
        self.startDateGreaterThanOrEqualOrNull = startDateGreaterThanOrEqualOrNull

        # @var int
        self.startDateLessThanOrEqualOrNull = startDateLessThanOrEqualOrNull

        # @var int
        self.endDateGreaterThanOrEqual = endDateGreaterThanOrEqual

        # @var int
        self.endDateLessThanOrEqual = endDateLessThanOrEqual

        # @var int
        self.endDateGreaterThanOrEqualOrNull = endDateGreaterThanOrEqualOrNull

        # @var int
        self.endDateLessThanOrEqualOrNull = endDateLessThanOrEqualOrNull

        # @var string
        self.referenceIdEqual = referenceIdEqual

        # @var string
        self.referenceIdIn = referenceIdIn

        # @var string
        self.replacingEntryIdEqual = replacingEntryIdEqual

        # @var string
        self.replacingEntryIdIn = replacingEntryIdIn

        # @var string
        self.replacedEntryIdEqual = replacedEntryIdEqual

        # @var string
        self.replacedEntryIdIn = replacedEntryIdIn

        # @var KalturaEntryReplacementStatus
        self.replacementStatusEqual = replacementStatusEqual

        # @var string
        self.replacementStatusIn = replacementStatusIn

        # @var int
        self.partnerSortValueGreaterThanOrEqual = partnerSortValueGreaterThanOrEqual

        # @var int
        self.partnerSortValueLessThanOrEqual = partnerSortValueLessThanOrEqual

        # @var string
        self.rootEntryIdEqual = rootEntryIdEqual

        # @var string
        self.rootEntryIdIn = rootEntryIdIn

        # @var string
        self.parentEntryIdEqual = parentEntryIdEqual

        # @var string
        self.entitledUsersEditMatchAnd = entitledUsersEditMatchAnd

        # @var string
        self.entitledUsersEditMatchOr = entitledUsersEditMatchOr

        # @var string
        self.entitledUsersPublishMatchAnd = entitledUsersPublishMatchAnd

        # @var string
        self.entitledUsersPublishMatchOr = entitledUsersPublishMatchOr

        # @var string
        self.tagsNameMultiLikeOr = tagsNameMultiLikeOr

        # @var string
        self.tagsAdminTagsMultiLikeOr = tagsAdminTagsMultiLikeOr

        # @var string
        self.tagsAdminTagsNameMultiLikeOr = tagsAdminTagsNameMultiLikeOr

        # @var string
        self.tagsNameMultiLikeAnd = tagsNameMultiLikeAnd

        # @var string
        self.tagsAdminTagsMultiLikeAnd = tagsAdminTagsMultiLikeAnd

        # @var string
        self.tagsAdminTagsNameMultiLikeAnd = tagsAdminTagsNameMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'nameMultiLikeOr': getXmlNodeText, 
        'nameMultiLikeAnd': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'creatorIdEqual': getXmlNodeText, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'adminTagsLike': getXmlNodeText, 
        'adminTagsMultiLikeOr': getXmlNodeText, 
        'adminTagsMultiLikeAnd': getXmlNodeText, 
        'categoriesMatchAnd': getXmlNodeText, 
        'categoriesMatchOr': getXmlNodeText, 
        'categoriesNotContains': getXmlNodeText, 
        'categoriesIdsMatchAnd': getXmlNodeText, 
        'categoriesIdsMatchOr': getXmlNodeText, 
        'categoriesIdsNotContains': getXmlNodeText, 
        'categoriesIdsEmpty': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaEntryStatus"), 
        'statusNotEqual': (KalturaEnumsFactory.createString, "KalturaEntryStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
        'moderationStatusEqual': (KalturaEnumsFactory.createInt, "KalturaEntryModerationStatus"), 
        'moderationStatusNotEqual': (KalturaEnumsFactory.createInt, "KalturaEntryModerationStatus"), 
        'moderationStatusIn': getXmlNodeText, 
        'moderationStatusNotIn': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaEntryType"), 
        'typeIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'totalRankLessThanOrEqual': getXmlNodeInt, 
        'totalRankGreaterThanOrEqual': getXmlNodeInt, 
        'groupIdEqual': getXmlNodeInt, 
        'searchTextMatchAnd': getXmlNodeText, 
        'searchTextMatchOr': getXmlNodeText, 
        'accessControlIdEqual': getXmlNodeInt, 
        'accessControlIdIn': getXmlNodeText, 
        'startDateGreaterThanOrEqual': getXmlNodeInt, 
        'startDateLessThanOrEqual': getXmlNodeInt, 
        'startDateGreaterThanOrEqualOrNull': getXmlNodeInt, 
        'startDateLessThanOrEqualOrNull': getXmlNodeInt, 
        'endDateGreaterThanOrEqual': getXmlNodeInt, 
        'endDateLessThanOrEqual': getXmlNodeInt, 
        'endDateGreaterThanOrEqualOrNull': getXmlNodeInt, 
        'endDateLessThanOrEqualOrNull': getXmlNodeInt, 
        'referenceIdEqual': getXmlNodeText, 
        'referenceIdIn': getXmlNodeText, 
        'replacingEntryIdEqual': getXmlNodeText, 
        'replacingEntryIdIn': getXmlNodeText, 
        'replacedEntryIdEqual': getXmlNodeText, 
        'replacedEntryIdIn': getXmlNodeText, 
        'replacementStatusEqual': (KalturaEnumsFactory.createString, "KalturaEntryReplacementStatus"), 
        'replacementStatusIn': getXmlNodeText, 
        'partnerSortValueGreaterThanOrEqual': getXmlNodeInt, 
        'partnerSortValueLessThanOrEqual': getXmlNodeInt, 
        'rootEntryIdEqual': getXmlNodeText, 
        'rootEntryIdIn': getXmlNodeText, 
        'parentEntryIdEqual': getXmlNodeText, 
        'entitledUsersEditMatchAnd': getXmlNodeText, 
        'entitledUsersEditMatchOr': getXmlNodeText, 
        'entitledUsersPublishMatchAnd': getXmlNodeText, 
        'entitledUsersPublishMatchOr': getXmlNodeText, 
        'tagsNameMultiLikeOr': getXmlNodeText, 
        'tagsAdminTagsMultiLikeOr': getXmlNodeText, 
        'tagsAdminTagsNameMultiLikeOr': getXmlNodeText, 
        'tagsNameMultiLikeAnd': getXmlNodeText, 
        'tagsAdminTagsMultiLikeAnd': getXmlNodeText, 
        'tagsAdminTagsNameMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryBaseFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("idNotIn", self.idNotIn)
        kparams.addStringIfDefined("nameLike", self.nameLike)
        kparams.addStringIfDefined("nameMultiLikeOr", self.nameMultiLikeOr)
        kparams.addStringIfDefined("nameMultiLikeAnd", self.nameMultiLikeAnd)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addStringIfDefined("userIdIn", self.userIdIn)
        kparams.addStringIfDefined("creatorIdEqual", self.creatorIdEqual)
        kparams.addStringIfDefined("tagsLike", self.tagsLike)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addStringIfDefined("adminTagsLike", self.adminTagsLike)
        kparams.addStringIfDefined("adminTagsMultiLikeOr", self.adminTagsMultiLikeOr)
        kparams.addStringIfDefined("adminTagsMultiLikeAnd", self.adminTagsMultiLikeAnd)
        kparams.addStringIfDefined("categoriesMatchAnd", self.categoriesMatchAnd)
        kparams.addStringIfDefined("categoriesMatchOr", self.categoriesMatchOr)
        kparams.addStringIfDefined("categoriesNotContains", self.categoriesNotContains)
        kparams.addStringIfDefined("categoriesIdsMatchAnd", self.categoriesIdsMatchAnd)
        kparams.addStringIfDefined("categoriesIdsMatchOr", self.categoriesIdsMatchOr)
        kparams.addStringIfDefined("categoriesIdsNotContains", self.categoriesIdsNotContains)
        kparams.addIntEnumIfDefined("categoriesIdsEmpty", self.categoriesIdsEmpty)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringEnumIfDefined("statusNotEqual", self.statusNotEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        kparams.addIntEnumIfDefined("moderationStatusEqual", self.moderationStatusEqual)
        kparams.addIntEnumIfDefined("moderationStatusNotEqual", self.moderationStatusNotEqual)
        kparams.addStringIfDefined("moderationStatusIn", self.moderationStatusIn)
        kparams.addStringIfDefined("moderationStatusNotIn", self.moderationStatusNotIn)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("totalRankLessThanOrEqual", self.totalRankLessThanOrEqual)
        kparams.addIntIfDefined("totalRankGreaterThanOrEqual", self.totalRankGreaterThanOrEqual)
        kparams.addIntIfDefined("groupIdEqual", self.groupIdEqual)
        kparams.addStringIfDefined("searchTextMatchAnd", self.searchTextMatchAnd)
        kparams.addStringIfDefined("searchTextMatchOr", self.searchTextMatchOr)
        kparams.addIntIfDefined("accessControlIdEqual", self.accessControlIdEqual)
        kparams.addStringIfDefined("accessControlIdIn", self.accessControlIdIn)
        kparams.addIntIfDefined("startDateGreaterThanOrEqual", self.startDateGreaterThanOrEqual)
        kparams.addIntIfDefined("startDateLessThanOrEqual", self.startDateLessThanOrEqual)
        kparams.addIntIfDefined("startDateGreaterThanOrEqualOrNull", self.startDateGreaterThanOrEqualOrNull)
        kparams.addIntIfDefined("startDateLessThanOrEqualOrNull", self.startDateLessThanOrEqualOrNull)
        kparams.addIntIfDefined("endDateGreaterThanOrEqual", self.endDateGreaterThanOrEqual)
        kparams.addIntIfDefined("endDateLessThanOrEqual", self.endDateLessThanOrEqual)
        kparams.addIntIfDefined("endDateGreaterThanOrEqualOrNull", self.endDateGreaterThanOrEqualOrNull)
        kparams.addIntIfDefined("endDateLessThanOrEqualOrNull", self.endDateLessThanOrEqualOrNull)
        kparams.addStringIfDefined("referenceIdEqual", self.referenceIdEqual)
        kparams.addStringIfDefined("referenceIdIn", self.referenceIdIn)
        kparams.addStringIfDefined("replacingEntryIdEqual", self.replacingEntryIdEqual)
        kparams.addStringIfDefined("replacingEntryIdIn", self.replacingEntryIdIn)
        kparams.addStringIfDefined("replacedEntryIdEqual", self.replacedEntryIdEqual)
        kparams.addStringIfDefined("replacedEntryIdIn", self.replacedEntryIdIn)
        kparams.addStringEnumIfDefined("replacementStatusEqual", self.replacementStatusEqual)
        kparams.addStringIfDefined("replacementStatusIn", self.replacementStatusIn)
        kparams.addIntIfDefined("partnerSortValueGreaterThanOrEqual", self.partnerSortValueGreaterThanOrEqual)
        kparams.addIntIfDefined("partnerSortValueLessThanOrEqual", self.partnerSortValueLessThanOrEqual)
        kparams.addStringIfDefined("rootEntryIdEqual", self.rootEntryIdEqual)
        kparams.addStringIfDefined("rootEntryIdIn", self.rootEntryIdIn)
        kparams.addStringIfDefined("parentEntryIdEqual", self.parentEntryIdEqual)
        kparams.addStringIfDefined("entitledUsersEditMatchAnd", self.entitledUsersEditMatchAnd)
        kparams.addStringIfDefined("entitledUsersEditMatchOr", self.entitledUsersEditMatchOr)
        kparams.addStringIfDefined("entitledUsersPublishMatchAnd", self.entitledUsersPublishMatchAnd)
        kparams.addStringIfDefined("entitledUsersPublishMatchOr", self.entitledUsersPublishMatchOr)
        kparams.addStringIfDefined("tagsNameMultiLikeOr", self.tagsNameMultiLikeOr)
        kparams.addStringIfDefined("tagsAdminTagsMultiLikeOr", self.tagsAdminTagsMultiLikeOr)
        kparams.addStringIfDefined("tagsAdminTagsNameMultiLikeOr", self.tagsAdminTagsNameMultiLikeOr)
        kparams.addStringIfDefined("tagsNameMultiLikeAnd", self.tagsNameMultiLikeAnd)
        kparams.addStringIfDefined("tagsAdminTagsMultiLikeAnd", self.tagsAdminTagsMultiLikeAnd)
        kparams.addStringIfDefined("tagsAdminTagsNameMultiLikeAnd", self.tagsAdminTagsNameMultiLikeAnd)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getNameMultiLikeOr(self):
        return self.nameMultiLikeOr

    def setNameMultiLikeOr(self, newNameMultiLikeOr):
        self.nameMultiLikeOr = newNameMultiLikeOr

    def getNameMultiLikeAnd(self):
        return self.nameMultiLikeAnd

    def setNameMultiLikeAnd(self, newNameMultiLikeAnd):
        self.nameMultiLikeAnd = newNameMultiLikeAnd

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getCreatorIdEqual(self):
        return self.creatorIdEqual

    def setCreatorIdEqual(self, newCreatorIdEqual):
        self.creatorIdEqual = newCreatorIdEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getAdminTagsLike(self):
        return self.adminTagsLike

    def setAdminTagsLike(self, newAdminTagsLike):
        self.adminTagsLike = newAdminTagsLike

    def getAdminTagsMultiLikeOr(self):
        return self.adminTagsMultiLikeOr

    def setAdminTagsMultiLikeOr(self, newAdminTagsMultiLikeOr):
        self.adminTagsMultiLikeOr = newAdminTagsMultiLikeOr

    def getAdminTagsMultiLikeAnd(self):
        return self.adminTagsMultiLikeAnd

    def setAdminTagsMultiLikeAnd(self, newAdminTagsMultiLikeAnd):
        self.adminTagsMultiLikeAnd = newAdminTagsMultiLikeAnd

    def getCategoriesMatchAnd(self):
        return self.categoriesMatchAnd

    def setCategoriesMatchAnd(self, newCategoriesMatchAnd):
        self.categoriesMatchAnd = newCategoriesMatchAnd

    def getCategoriesMatchOr(self):
        return self.categoriesMatchOr

    def setCategoriesMatchOr(self, newCategoriesMatchOr):
        self.categoriesMatchOr = newCategoriesMatchOr

    def getCategoriesNotContains(self):
        return self.categoriesNotContains

    def setCategoriesNotContains(self, newCategoriesNotContains):
        self.categoriesNotContains = newCategoriesNotContains

    def getCategoriesIdsMatchAnd(self):
        return self.categoriesIdsMatchAnd

    def setCategoriesIdsMatchAnd(self, newCategoriesIdsMatchAnd):
        self.categoriesIdsMatchAnd = newCategoriesIdsMatchAnd

    def getCategoriesIdsMatchOr(self):
        return self.categoriesIdsMatchOr

    def setCategoriesIdsMatchOr(self, newCategoriesIdsMatchOr):
        self.categoriesIdsMatchOr = newCategoriesIdsMatchOr

    def getCategoriesIdsNotContains(self):
        return self.categoriesIdsNotContains

    def setCategoriesIdsNotContains(self, newCategoriesIdsNotContains):
        self.categoriesIdsNotContains = newCategoriesIdsNotContains

    def getCategoriesIdsEmpty(self):
        return self.categoriesIdsEmpty

    def setCategoriesIdsEmpty(self, newCategoriesIdsEmpty):
        self.categoriesIdsEmpty = newCategoriesIdsEmpty

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusNotEqual(self):
        return self.statusNotEqual

    def setStatusNotEqual(self, newStatusNotEqual):
        self.statusNotEqual = newStatusNotEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn

    def getModerationStatusEqual(self):
        return self.moderationStatusEqual

    def setModerationStatusEqual(self, newModerationStatusEqual):
        self.moderationStatusEqual = newModerationStatusEqual

    def getModerationStatusNotEqual(self):
        return self.moderationStatusNotEqual

    def setModerationStatusNotEqual(self, newModerationStatusNotEqual):
        self.moderationStatusNotEqual = newModerationStatusNotEqual

    def getModerationStatusIn(self):
        return self.moderationStatusIn

    def setModerationStatusIn(self, newModerationStatusIn):
        self.moderationStatusIn = newModerationStatusIn

    def getModerationStatusNotIn(self):
        return self.moderationStatusNotIn

    def setModerationStatusNotIn(self, newModerationStatusNotIn):
        self.moderationStatusNotIn = newModerationStatusNotIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getTotalRankLessThanOrEqual(self):
        return self.totalRankLessThanOrEqual

    def setTotalRankLessThanOrEqual(self, newTotalRankLessThanOrEqual):
        self.totalRankLessThanOrEqual = newTotalRankLessThanOrEqual

    def getTotalRankGreaterThanOrEqual(self):
        return self.totalRankGreaterThanOrEqual

    def setTotalRankGreaterThanOrEqual(self, newTotalRankGreaterThanOrEqual):
        self.totalRankGreaterThanOrEqual = newTotalRankGreaterThanOrEqual

    def getGroupIdEqual(self):
        return self.groupIdEqual

    def setGroupIdEqual(self, newGroupIdEqual):
        self.groupIdEqual = newGroupIdEqual

    def getSearchTextMatchAnd(self):
        return self.searchTextMatchAnd

    def setSearchTextMatchAnd(self, newSearchTextMatchAnd):
        self.searchTextMatchAnd = newSearchTextMatchAnd

    def getSearchTextMatchOr(self):
        return self.searchTextMatchOr

    def setSearchTextMatchOr(self, newSearchTextMatchOr):
        self.searchTextMatchOr = newSearchTextMatchOr

    def getAccessControlIdEqual(self):
        return self.accessControlIdEqual

    def setAccessControlIdEqual(self, newAccessControlIdEqual):
        self.accessControlIdEqual = newAccessControlIdEqual

    def getAccessControlIdIn(self):
        return self.accessControlIdIn

    def setAccessControlIdIn(self, newAccessControlIdIn):
        self.accessControlIdIn = newAccessControlIdIn

    def getStartDateGreaterThanOrEqual(self):
        return self.startDateGreaterThanOrEqual

    def setStartDateGreaterThanOrEqual(self, newStartDateGreaterThanOrEqual):
        self.startDateGreaterThanOrEqual = newStartDateGreaterThanOrEqual

    def getStartDateLessThanOrEqual(self):
        return self.startDateLessThanOrEqual

    def setStartDateLessThanOrEqual(self, newStartDateLessThanOrEqual):
        self.startDateLessThanOrEqual = newStartDateLessThanOrEqual

    def getStartDateGreaterThanOrEqualOrNull(self):
        return self.startDateGreaterThanOrEqualOrNull

    def setStartDateGreaterThanOrEqualOrNull(self, newStartDateGreaterThanOrEqualOrNull):
        self.startDateGreaterThanOrEqualOrNull = newStartDateGreaterThanOrEqualOrNull

    def getStartDateLessThanOrEqualOrNull(self):
        return self.startDateLessThanOrEqualOrNull

    def setStartDateLessThanOrEqualOrNull(self, newStartDateLessThanOrEqualOrNull):
        self.startDateLessThanOrEqualOrNull = newStartDateLessThanOrEqualOrNull

    def getEndDateGreaterThanOrEqual(self):
        return self.endDateGreaterThanOrEqual

    def setEndDateGreaterThanOrEqual(self, newEndDateGreaterThanOrEqual):
        self.endDateGreaterThanOrEqual = newEndDateGreaterThanOrEqual

    def getEndDateLessThanOrEqual(self):
        return self.endDateLessThanOrEqual

    def setEndDateLessThanOrEqual(self, newEndDateLessThanOrEqual):
        self.endDateLessThanOrEqual = newEndDateLessThanOrEqual

    def getEndDateGreaterThanOrEqualOrNull(self):
        return self.endDateGreaterThanOrEqualOrNull

    def setEndDateGreaterThanOrEqualOrNull(self, newEndDateGreaterThanOrEqualOrNull):
        self.endDateGreaterThanOrEqualOrNull = newEndDateGreaterThanOrEqualOrNull

    def getEndDateLessThanOrEqualOrNull(self):
        return self.endDateLessThanOrEqualOrNull

    def setEndDateLessThanOrEqualOrNull(self, newEndDateLessThanOrEqualOrNull):
        self.endDateLessThanOrEqualOrNull = newEndDateLessThanOrEqualOrNull

    def getReferenceIdEqual(self):
        return self.referenceIdEqual

    def setReferenceIdEqual(self, newReferenceIdEqual):
        self.referenceIdEqual = newReferenceIdEqual

    def getReferenceIdIn(self):
        return self.referenceIdIn

    def setReferenceIdIn(self, newReferenceIdIn):
        self.referenceIdIn = newReferenceIdIn

    def getReplacingEntryIdEqual(self):
        return self.replacingEntryIdEqual

    def setReplacingEntryIdEqual(self, newReplacingEntryIdEqual):
        self.replacingEntryIdEqual = newReplacingEntryIdEqual

    def getReplacingEntryIdIn(self):
        return self.replacingEntryIdIn

    def setReplacingEntryIdIn(self, newReplacingEntryIdIn):
        self.replacingEntryIdIn = newReplacingEntryIdIn

    def getReplacedEntryIdEqual(self):
        return self.replacedEntryIdEqual

    def setReplacedEntryIdEqual(self, newReplacedEntryIdEqual):
        self.replacedEntryIdEqual = newReplacedEntryIdEqual

    def getReplacedEntryIdIn(self):
        return self.replacedEntryIdIn

    def setReplacedEntryIdIn(self, newReplacedEntryIdIn):
        self.replacedEntryIdIn = newReplacedEntryIdIn

    def getReplacementStatusEqual(self):
        return self.replacementStatusEqual

    def setReplacementStatusEqual(self, newReplacementStatusEqual):
        self.replacementStatusEqual = newReplacementStatusEqual

    def getReplacementStatusIn(self):
        return self.replacementStatusIn

    def setReplacementStatusIn(self, newReplacementStatusIn):
        self.replacementStatusIn = newReplacementStatusIn

    def getPartnerSortValueGreaterThanOrEqual(self):
        return self.partnerSortValueGreaterThanOrEqual

    def setPartnerSortValueGreaterThanOrEqual(self, newPartnerSortValueGreaterThanOrEqual):
        self.partnerSortValueGreaterThanOrEqual = newPartnerSortValueGreaterThanOrEqual

    def getPartnerSortValueLessThanOrEqual(self):
        return self.partnerSortValueLessThanOrEqual

    def setPartnerSortValueLessThanOrEqual(self, newPartnerSortValueLessThanOrEqual):
        self.partnerSortValueLessThanOrEqual = newPartnerSortValueLessThanOrEqual

    def getRootEntryIdEqual(self):
        return self.rootEntryIdEqual

    def setRootEntryIdEqual(self, newRootEntryIdEqual):
        self.rootEntryIdEqual = newRootEntryIdEqual

    def getRootEntryIdIn(self):
        return self.rootEntryIdIn

    def setRootEntryIdIn(self, newRootEntryIdIn):
        self.rootEntryIdIn = newRootEntryIdIn

    def getParentEntryIdEqual(self):
        return self.parentEntryIdEqual

    def setParentEntryIdEqual(self, newParentEntryIdEqual):
        self.parentEntryIdEqual = newParentEntryIdEqual

    def getEntitledUsersEditMatchAnd(self):
        return self.entitledUsersEditMatchAnd

    def setEntitledUsersEditMatchAnd(self, newEntitledUsersEditMatchAnd):
        self.entitledUsersEditMatchAnd = newEntitledUsersEditMatchAnd

    def getEntitledUsersEditMatchOr(self):
        return self.entitledUsersEditMatchOr

    def setEntitledUsersEditMatchOr(self, newEntitledUsersEditMatchOr):
        self.entitledUsersEditMatchOr = newEntitledUsersEditMatchOr

    def getEntitledUsersPublishMatchAnd(self):
        return self.entitledUsersPublishMatchAnd

    def setEntitledUsersPublishMatchAnd(self, newEntitledUsersPublishMatchAnd):
        self.entitledUsersPublishMatchAnd = newEntitledUsersPublishMatchAnd

    def getEntitledUsersPublishMatchOr(self):
        return self.entitledUsersPublishMatchOr

    def setEntitledUsersPublishMatchOr(self, newEntitledUsersPublishMatchOr):
        self.entitledUsersPublishMatchOr = newEntitledUsersPublishMatchOr

    def getTagsNameMultiLikeOr(self):
        return self.tagsNameMultiLikeOr

    def setTagsNameMultiLikeOr(self, newTagsNameMultiLikeOr):
        self.tagsNameMultiLikeOr = newTagsNameMultiLikeOr

    def getTagsAdminTagsMultiLikeOr(self):
        return self.tagsAdminTagsMultiLikeOr

    def setTagsAdminTagsMultiLikeOr(self, newTagsAdminTagsMultiLikeOr):
        self.tagsAdminTagsMultiLikeOr = newTagsAdminTagsMultiLikeOr

    def getTagsAdminTagsNameMultiLikeOr(self):
        return self.tagsAdminTagsNameMultiLikeOr

    def setTagsAdminTagsNameMultiLikeOr(self, newTagsAdminTagsNameMultiLikeOr):
        self.tagsAdminTagsNameMultiLikeOr = newTagsAdminTagsNameMultiLikeOr

    def getTagsNameMultiLikeAnd(self):
        return self.tagsNameMultiLikeAnd

    def setTagsNameMultiLikeAnd(self, newTagsNameMultiLikeAnd):
        self.tagsNameMultiLikeAnd = newTagsNameMultiLikeAnd

    def getTagsAdminTagsMultiLikeAnd(self):
        return self.tagsAdminTagsMultiLikeAnd

    def setTagsAdminTagsMultiLikeAnd(self, newTagsAdminTagsMultiLikeAnd):
        self.tagsAdminTagsMultiLikeAnd = newTagsAdminTagsMultiLikeAnd

    def getTagsAdminTagsNameMultiLikeAnd(self):
        return self.tagsAdminTagsNameMultiLikeAnd

    def setTagsAdminTagsNameMultiLikeAnd(self, newTagsAdminTagsNameMultiLikeAnd):
        self.tagsAdminTagsNameMultiLikeAnd = newTagsAdminTagsNameMultiLikeAnd


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryFilter(KalturaBaseEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        KalturaBaseEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd)

        # @var string
        self.freeText = freeText

        # @var KalturaNullableBoolean
        self.isRoot = isRoot

        # @var string
        self.categoriesFullNameIn = categoriesFullNameIn

        # All entries within this categoy or in child categories
        # @var string
        self.categoryAncestorIdIn = categoryAncestorIdIn

        # The id of the original entry
        # @var string
        self.redirectFromEntryId = redirectFromEntryId


    PROPERTY_LOADERS = {
        'freeText': getXmlNodeText, 
        'isRoot': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'categoriesFullNameIn': getXmlNodeText, 
        'categoryAncestorIdIn': getXmlNodeText, 
        'redirectFromEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryFilter")
        kparams.addStringIfDefined("freeText", self.freeText)
        kparams.addIntEnumIfDefined("isRoot", self.isRoot)
        kparams.addStringIfDefined("categoriesFullNameIn", self.categoriesFullNameIn)
        kparams.addStringIfDefined("categoryAncestorIdIn", self.categoryAncestorIdIn)
        kparams.addStringIfDefined("redirectFromEntryId", self.redirectFromEntryId)
        return kparams

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getIsRoot(self):
        return self.isRoot

    def setIsRoot(self, newIsRoot):
        self.isRoot = newIsRoot

    def getCategoriesFullNameIn(self):
        return self.categoriesFullNameIn

    def setCategoriesFullNameIn(self, newCategoriesFullNameIn):
        self.categoriesFullNameIn = newCategoriesFullNameIn

    def getCategoryAncestorIdIn(self):
        return self.categoryAncestorIdIn

    def setCategoryAncestorIdIn(self, newCategoryAncestorIdIn):
        self.categoryAncestorIdIn = newCategoryAncestorIdIn

    def getRedirectFromEntryId(self):
        return self.redirectFromEntryId

    def setRedirectFromEntryId(self, newRedirectFromEntryId):
        self.redirectFromEntryId = newRedirectFromEntryId


# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryBaseFilter(KalturaBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        KalturaBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)

        # @var int
        self.lastPlayedAtGreaterThanOrEqual = lastPlayedAtGreaterThanOrEqual

        # @var int
        self.lastPlayedAtLessThanOrEqual = lastPlayedAtLessThanOrEqual

        # @var int
        self.durationLessThan = durationLessThan

        # @var int
        self.durationGreaterThan = durationGreaterThan

        # @var int
        self.durationLessThanOrEqual = durationLessThanOrEqual

        # @var int
        self.durationGreaterThanOrEqual = durationGreaterThanOrEqual

        # @var string
        self.durationTypeMatchOr = durationTypeMatchOr


    PROPERTY_LOADERS = {
        'lastPlayedAtGreaterThanOrEqual': getXmlNodeInt, 
        'lastPlayedAtLessThanOrEqual': getXmlNodeInt, 
        'durationLessThan': getXmlNodeInt, 
        'durationGreaterThan': getXmlNodeInt, 
        'durationLessThanOrEqual': getXmlNodeInt, 
        'durationGreaterThanOrEqual': getXmlNodeInt, 
        'durationTypeMatchOr': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayableEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaPlayableEntryBaseFilter")
        kparams.addIntIfDefined("lastPlayedAtGreaterThanOrEqual", self.lastPlayedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("lastPlayedAtLessThanOrEqual", self.lastPlayedAtLessThanOrEqual)
        kparams.addIntIfDefined("durationLessThan", self.durationLessThan)
        kparams.addIntIfDefined("durationGreaterThan", self.durationGreaterThan)
        kparams.addIntIfDefined("durationLessThanOrEqual", self.durationLessThanOrEqual)
        kparams.addIntIfDefined("durationGreaterThanOrEqual", self.durationGreaterThanOrEqual)
        kparams.addStringIfDefined("durationTypeMatchOr", self.durationTypeMatchOr)
        return kparams

    def getLastPlayedAtGreaterThanOrEqual(self):
        return self.lastPlayedAtGreaterThanOrEqual

    def setLastPlayedAtGreaterThanOrEqual(self, newLastPlayedAtGreaterThanOrEqual):
        self.lastPlayedAtGreaterThanOrEqual = newLastPlayedAtGreaterThanOrEqual

    def getLastPlayedAtLessThanOrEqual(self):
        return self.lastPlayedAtLessThanOrEqual

    def setLastPlayedAtLessThanOrEqual(self, newLastPlayedAtLessThanOrEqual):
        self.lastPlayedAtLessThanOrEqual = newLastPlayedAtLessThanOrEqual

    def getDurationLessThan(self):
        return self.durationLessThan

    def setDurationLessThan(self, newDurationLessThan):
        self.durationLessThan = newDurationLessThan

    def getDurationGreaterThan(self):
        return self.durationGreaterThan

    def setDurationGreaterThan(self, newDurationGreaterThan):
        self.durationGreaterThan = newDurationGreaterThan

    def getDurationLessThanOrEqual(self):
        return self.durationLessThanOrEqual

    def setDurationLessThanOrEqual(self, newDurationLessThanOrEqual):
        self.durationLessThanOrEqual = newDurationLessThanOrEqual

    def getDurationGreaterThanOrEqual(self):
        return self.durationGreaterThanOrEqual

    def setDurationGreaterThanOrEqual(self, newDurationGreaterThanOrEqual):
        self.durationGreaterThanOrEqual = newDurationGreaterThanOrEqual

    def getDurationTypeMatchOr(self):
        return self.durationTypeMatchOr

    def setDurationTypeMatchOr(self, newDurationTypeMatchOr):
        self.durationTypeMatchOr = newDurationTypeMatchOr


# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryFilter(KalturaPlayableEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        KalturaPlayableEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPlayableEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayableEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlayableEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaPlayableEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaEntryBaseFilter(KalturaPlayableEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        KalturaPlayableEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)

        # @var KalturaMediaType
        self.mediaTypeEqual = mediaTypeEqual

        # @var string
        self.mediaTypeIn = mediaTypeIn

        # @var KalturaSourceType
        self.sourceTypeEqual = sourceTypeEqual

        # @var KalturaSourceType
        self.sourceTypeNotEqual = sourceTypeNotEqual

        # @var string
        self.sourceTypeIn = sourceTypeIn

        # @var string
        self.sourceTypeNotIn = sourceTypeNotIn

        # @var int
        self.mediaDateGreaterThanOrEqual = mediaDateGreaterThanOrEqual

        # @var int
        self.mediaDateLessThanOrEqual = mediaDateLessThanOrEqual

        # @var string
        self.flavorParamsIdsMatchOr = flavorParamsIdsMatchOr

        # @var string
        self.flavorParamsIdsMatchAnd = flavorParamsIdsMatchAnd


    PROPERTY_LOADERS = {
        'mediaTypeEqual': (KalturaEnumsFactory.createInt, "KalturaMediaType"), 
        'mediaTypeIn': getXmlNodeText, 
        'sourceTypeEqual': (KalturaEnumsFactory.createString, "KalturaSourceType"), 
        'sourceTypeNotEqual': (KalturaEnumsFactory.createString, "KalturaSourceType"), 
        'sourceTypeIn': getXmlNodeText, 
        'sourceTypeNotIn': getXmlNodeText, 
        'mediaDateGreaterThanOrEqual': getXmlNodeInt, 
        'mediaDateLessThanOrEqual': getXmlNodeInt, 
        'flavorParamsIdsMatchOr': getXmlNodeText, 
        'flavorParamsIdsMatchAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPlayableEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlayableEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaEntryBaseFilter")
        kparams.addIntEnumIfDefined("mediaTypeEqual", self.mediaTypeEqual)
        kparams.addStringIfDefined("mediaTypeIn", self.mediaTypeIn)
        kparams.addStringEnumIfDefined("sourceTypeEqual", self.sourceTypeEqual)
        kparams.addStringEnumIfDefined("sourceTypeNotEqual", self.sourceTypeNotEqual)
        kparams.addStringIfDefined("sourceTypeIn", self.sourceTypeIn)
        kparams.addStringIfDefined("sourceTypeNotIn", self.sourceTypeNotIn)
        kparams.addIntIfDefined("mediaDateGreaterThanOrEqual", self.mediaDateGreaterThanOrEqual)
        kparams.addIntIfDefined("mediaDateLessThanOrEqual", self.mediaDateLessThanOrEqual)
        kparams.addStringIfDefined("flavorParamsIdsMatchOr", self.flavorParamsIdsMatchOr)
        kparams.addStringIfDefined("flavorParamsIdsMatchAnd", self.flavorParamsIdsMatchAnd)
        return kparams

    def getMediaTypeEqual(self):
        return self.mediaTypeEqual

    def setMediaTypeEqual(self, newMediaTypeEqual):
        self.mediaTypeEqual = newMediaTypeEqual

    def getMediaTypeIn(self):
        return self.mediaTypeIn

    def setMediaTypeIn(self, newMediaTypeIn):
        self.mediaTypeIn = newMediaTypeIn

    def getSourceTypeEqual(self):
        return self.sourceTypeEqual

    def setSourceTypeEqual(self, newSourceTypeEqual):
        self.sourceTypeEqual = newSourceTypeEqual

    def getSourceTypeNotEqual(self):
        return self.sourceTypeNotEqual

    def setSourceTypeNotEqual(self, newSourceTypeNotEqual):
        self.sourceTypeNotEqual = newSourceTypeNotEqual

    def getSourceTypeIn(self):
        return self.sourceTypeIn

    def setSourceTypeIn(self, newSourceTypeIn):
        self.sourceTypeIn = newSourceTypeIn

    def getSourceTypeNotIn(self):
        return self.sourceTypeNotIn

    def setSourceTypeNotIn(self, newSourceTypeNotIn):
        self.sourceTypeNotIn = newSourceTypeNotIn

    def getMediaDateGreaterThanOrEqual(self):
        return self.mediaDateGreaterThanOrEqual

    def setMediaDateGreaterThanOrEqual(self, newMediaDateGreaterThanOrEqual):
        self.mediaDateGreaterThanOrEqual = newMediaDateGreaterThanOrEqual

    def getMediaDateLessThanOrEqual(self):
        return self.mediaDateLessThanOrEqual

    def setMediaDateLessThanOrEqual(self, newMediaDateLessThanOrEqual):
        self.mediaDateLessThanOrEqual = newMediaDateLessThanOrEqual

    def getFlavorParamsIdsMatchOr(self):
        return self.flavorParamsIdsMatchOr

    def setFlavorParamsIdsMatchOr(self, newFlavorParamsIdsMatchOr):
        self.flavorParamsIdsMatchOr = newFlavorParamsIdsMatchOr

    def getFlavorParamsIdsMatchAnd(self):
        return self.flavorParamsIdsMatchAnd

    def setFlavorParamsIdsMatchAnd(self, newFlavorParamsIdsMatchAnd):
        self.flavorParamsIdsMatchAnd = newFlavorParamsIdsMatchAnd


# @package Kaltura
# @subpackage Client
class KalturaMediaEntryFilter(KalturaMediaEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        KalturaMediaEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaEntryFilterForPlaylist(KalturaMediaEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            limit=NotImplemented):
        KalturaMediaEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)

        # @var int
        self.limit = limit


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaMediaEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntryFilterForPlaylist.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaEntryFilterForPlaylist")
        kparams.addIntIfDefined("limit", self.limit)
        return kparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit


# @package Kaltura
# @subpackage Client
class KalturaMediaInfo(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented,
            containerFormat=NotImplemented,
            containerId=NotImplemented,
            containerProfile=NotImplemented,
            containerDuration=NotImplemented,
            containerBitRate=NotImplemented,
            videoFormat=NotImplemented,
            videoCodecId=NotImplemented,
            videoDuration=NotImplemented,
            videoBitRate=NotImplemented,
            videoBitRateMode=NotImplemented,
            videoWidth=NotImplemented,
            videoHeight=NotImplemented,
            videoFrameRate=NotImplemented,
            videoDar=NotImplemented,
            videoRotation=NotImplemented,
            audioFormat=NotImplemented,
            audioCodecId=NotImplemented,
            audioDuration=NotImplemented,
            audioBitRate=NotImplemented,
            audioBitRateMode=NotImplemented,
            audioChannels=NotImplemented,
            audioSamplingRate=NotImplemented,
            audioResolution=NotImplemented,
            writingLib=NotImplemented,
            rawData=NotImplemented,
            multiStreamInfo=NotImplemented,
            scanType=NotImplemented,
            multiStream=NotImplemented,
            isFastStart=NotImplemented,
            contentStreams=NotImplemented,
            complexityValue=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The id of the media info
        # @var int
        # @readonly
        self.id = id

        # The id of the related flavor asset
        # @var string
        self.flavorAssetId = flavorAssetId

        # The file size
        # @var int
        self.fileSize = fileSize

        # The container format
        # @var string
        self.containerFormat = containerFormat

        # The container id
        # @var string
        self.containerId = containerId

        # The container profile
        # @var string
        self.containerProfile = containerProfile

        # The container duration
        # @var int
        self.containerDuration = containerDuration

        # The container bit rate
        # @var int
        self.containerBitRate = containerBitRate

        # The video format
        # @var string
        self.videoFormat = videoFormat

        # The video codec id
        # @var string
        self.videoCodecId = videoCodecId

        # The video duration
        # @var int
        self.videoDuration = videoDuration

        # The video bit rate
        # @var int
        self.videoBitRate = videoBitRate

        # The video bit rate mode
        # @var KalturaBitRateMode
        self.videoBitRateMode = videoBitRateMode

        # The video width
        # @var int
        self.videoWidth = videoWidth

        # The video height
        # @var int
        self.videoHeight = videoHeight

        # The video frame rate
        # @var float
        self.videoFrameRate = videoFrameRate

        # The video display aspect ratio (dar)
        # @var float
        self.videoDar = videoDar

        # @var int
        self.videoRotation = videoRotation

        # The audio format
        # @var string
        self.audioFormat = audioFormat

        # The audio codec id
        # @var string
        self.audioCodecId = audioCodecId

        # The audio duration
        # @var int
        self.audioDuration = audioDuration

        # The audio bit rate
        # @var int
        self.audioBitRate = audioBitRate

        # The audio bit rate mode
        # @var KalturaBitRateMode
        self.audioBitRateMode = audioBitRateMode

        # The number of audio channels
        # @var int
        self.audioChannels = audioChannels

        # The audio sampling rate
        # @var int
        self.audioSamplingRate = audioSamplingRate

        # The audio resolution
        # @var int
        self.audioResolution = audioResolution

        # The writing library
        # @var string
        self.writingLib = writingLib

        # The data as returned by the mediainfo command line
        # @var string
        self.rawData = rawData

        # @var string
        self.multiStreamInfo = multiStreamInfo

        # @var int
        self.scanType = scanType

        # @var string
        self.multiStream = multiStream

        # @var int
        self.isFastStart = isFastStart

        # @var string
        self.contentStreams = contentStreams

        # @var int
        self.complexityValue = complexityValue


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'flavorAssetId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
        'containerFormat': getXmlNodeText, 
        'containerId': getXmlNodeText, 
        'containerProfile': getXmlNodeText, 
        'containerDuration': getXmlNodeInt, 
        'containerBitRate': getXmlNodeInt, 
        'videoFormat': getXmlNodeText, 
        'videoCodecId': getXmlNodeText, 
        'videoDuration': getXmlNodeInt, 
        'videoBitRate': getXmlNodeInt, 
        'videoBitRateMode': (KalturaEnumsFactory.createInt, "KalturaBitRateMode"), 
        'videoWidth': getXmlNodeInt, 
        'videoHeight': getXmlNodeInt, 
        'videoFrameRate': getXmlNodeFloat, 
        'videoDar': getXmlNodeFloat, 
        'videoRotation': getXmlNodeInt, 
        'audioFormat': getXmlNodeText, 
        'audioCodecId': getXmlNodeText, 
        'audioDuration': getXmlNodeInt, 
        'audioBitRate': getXmlNodeInt, 
        'audioBitRateMode': (KalturaEnumsFactory.createInt, "KalturaBitRateMode"), 
        'audioChannels': getXmlNodeInt, 
        'audioSamplingRate': getXmlNodeInt, 
        'audioResolution': getXmlNodeInt, 
        'writingLib': getXmlNodeText, 
        'rawData': getXmlNodeText, 
        'multiStreamInfo': getXmlNodeText, 
        'scanType': getXmlNodeInt, 
        'multiStream': getXmlNodeText, 
        'isFastStart': getXmlNodeInt, 
        'contentStreams': getXmlNodeText, 
        'complexityValue': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaMediaInfo")
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addIntIfDefined("fileSize", self.fileSize)
        kparams.addStringIfDefined("containerFormat", self.containerFormat)
        kparams.addStringIfDefined("containerId", self.containerId)
        kparams.addStringIfDefined("containerProfile", self.containerProfile)
        kparams.addIntIfDefined("containerDuration", self.containerDuration)
        kparams.addIntIfDefined("containerBitRate", self.containerBitRate)
        kparams.addStringIfDefined("videoFormat", self.videoFormat)
        kparams.addStringIfDefined("videoCodecId", self.videoCodecId)
        kparams.addIntIfDefined("videoDuration", self.videoDuration)
        kparams.addIntIfDefined("videoBitRate", self.videoBitRate)
        kparams.addIntEnumIfDefined("videoBitRateMode", self.videoBitRateMode)
        kparams.addIntIfDefined("videoWidth", self.videoWidth)
        kparams.addIntIfDefined("videoHeight", self.videoHeight)
        kparams.addFloatIfDefined("videoFrameRate", self.videoFrameRate)
        kparams.addFloatIfDefined("videoDar", self.videoDar)
        kparams.addIntIfDefined("videoRotation", self.videoRotation)
        kparams.addStringIfDefined("audioFormat", self.audioFormat)
        kparams.addStringIfDefined("audioCodecId", self.audioCodecId)
        kparams.addIntIfDefined("audioDuration", self.audioDuration)
        kparams.addIntIfDefined("audioBitRate", self.audioBitRate)
        kparams.addIntEnumIfDefined("audioBitRateMode", self.audioBitRateMode)
        kparams.addIntIfDefined("audioChannels", self.audioChannels)
        kparams.addIntIfDefined("audioSamplingRate", self.audioSamplingRate)
        kparams.addIntIfDefined("audioResolution", self.audioResolution)
        kparams.addStringIfDefined("writingLib", self.writingLib)
        kparams.addStringIfDefined("rawData", self.rawData)
        kparams.addStringIfDefined("multiStreamInfo", self.multiStreamInfo)
        kparams.addIntIfDefined("scanType", self.scanType)
        kparams.addStringIfDefined("multiStream", self.multiStream)
        kparams.addIntIfDefined("isFastStart", self.isFastStart)
        kparams.addStringIfDefined("contentStreams", self.contentStreams)
        kparams.addIntIfDefined("complexityValue", self.complexityValue)
        return kparams

    def getId(self):
        return self.id

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getContainerFormat(self):
        return self.containerFormat

    def setContainerFormat(self, newContainerFormat):
        self.containerFormat = newContainerFormat

    def getContainerId(self):
        return self.containerId

    def setContainerId(self, newContainerId):
        self.containerId = newContainerId

    def getContainerProfile(self):
        return self.containerProfile

    def setContainerProfile(self, newContainerProfile):
        self.containerProfile = newContainerProfile

    def getContainerDuration(self):
        return self.containerDuration

    def setContainerDuration(self, newContainerDuration):
        self.containerDuration = newContainerDuration

    def getContainerBitRate(self):
        return self.containerBitRate

    def setContainerBitRate(self, newContainerBitRate):
        self.containerBitRate = newContainerBitRate

    def getVideoFormat(self):
        return self.videoFormat

    def setVideoFormat(self, newVideoFormat):
        self.videoFormat = newVideoFormat

    def getVideoCodecId(self):
        return self.videoCodecId

    def setVideoCodecId(self, newVideoCodecId):
        self.videoCodecId = newVideoCodecId

    def getVideoDuration(self):
        return self.videoDuration

    def setVideoDuration(self, newVideoDuration):
        self.videoDuration = newVideoDuration

    def getVideoBitRate(self):
        return self.videoBitRate

    def setVideoBitRate(self, newVideoBitRate):
        self.videoBitRate = newVideoBitRate

    def getVideoBitRateMode(self):
        return self.videoBitRateMode

    def setVideoBitRateMode(self, newVideoBitRateMode):
        self.videoBitRateMode = newVideoBitRateMode

    def getVideoWidth(self):
        return self.videoWidth

    def setVideoWidth(self, newVideoWidth):
        self.videoWidth = newVideoWidth

    def getVideoHeight(self):
        return self.videoHeight

    def setVideoHeight(self, newVideoHeight):
        self.videoHeight = newVideoHeight

    def getVideoFrameRate(self):
        return self.videoFrameRate

    def setVideoFrameRate(self, newVideoFrameRate):
        self.videoFrameRate = newVideoFrameRate

    def getVideoDar(self):
        return self.videoDar

    def setVideoDar(self, newVideoDar):
        self.videoDar = newVideoDar

    def getVideoRotation(self):
        return self.videoRotation

    def setVideoRotation(self, newVideoRotation):
        self.videoRotation = newVideoRotation

    def getAudioFormat(self):
        return self.audioFormat

    def setAudioFormat(self, newAudioFormat):
        self.audioFormat = newAudioFormat

    def getAudioCodecId(self):
        return self.audioCodecId

    def setAudioCodecId(self, newAudioCodecId):
        self.audioCodecId = newAudioCodecId

    def getAudioDuration(self):
        return self.audioDuration

    def setAudioDuration(self, newAudioDuration):
        self.audioDuration = newAudioDuration

    def getAudioBitRate(self):
        return self.audioBitRate

    def setAudioBitRate(self, newAudioBitRate):
        self.audioBitRate = newAudioBitRate

    def getAudioBitRateMode(self):
        return self.audioBitRateMode

    def setAudioBitRateMode(self, newAudioBitRateMode):
        self.audioBitRateMode = newAudioBitRateMode

    def getAudioChannels(self):
        return self.audioChannels

    def setAudioChannels(self, newAudioChannels):
        self.audioChannels = newAudioChannels

    def getAudioSamplingRate(self):
        return self.audioSamplingRate

    def setAudioSamplingRate(self, newAudioSamplingRate):
        self.audioSamplingRate = newAudioSamplingRate

    def getAudioResolution(self):
        return self.audioResolution

    def setAudioResolution(self, newAudioResolution):
        self.audioResolution = newAudioResolution

    def getWritingLib(self):
        return self.writingLib

    def setWritingLib(self, newWritingLib):
        self.writingLib = newWritingLib

    def getRawData(self):
        return self.rawData

    def setRawData(self, newRawData):
        self.rawData = newRawData

    def getMultiStreamInfo(self):
        return self.multiStreamInfo

    def setMultiStreamInfo(self, newMultiStreamInfo):
        self.multiStreamInfo = newMultiStreamInfo

    def getScanType(self):
        return self.scanType

    def setScanType(self, newScanType):
        self.scanType = newScanType

    def getMultiStream(self):
        return self.multiStream

    def setMultiStream(self, newMultiStream):
        self.multiStream = newMultiStream

    def getIsFastStart(self):
        return self.isFastStart

    def setIsFastStart(self, newIsFastStart):
        self.isFastStart = newIsFastStart

    def getContentStreams(self):
        return self.contentStreams

    def setContentStreams(self, newContentStreams):
        self.contentStreams = newContentStreams

    def getComplexityValue(self):
        return self.complexityValue

    def setComplexityValue(self, newComplexityValue):
        self.complexityValue = newComplexityValue


# @package Kaltura
# @subpackage Client
class KalturaMixEntry(KalturaPlayableEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            hasRealThumbnail=NotImplemented,
            editorType=NotImplemented,
            dataContent=NotImplemented):
        KalturaPlayableEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType)

        # Indicates whether the user has submited a real thumbnail to the mix (Not the one that was generated automaticaly)
        # @var bool
        # @readonly
        self.hasRealThumbnail = hasRealThumbnail

        # The editor type used to edit the metadata
        # @var KalturaEditorType
        self.editorType = editorType

        # The xml data of the mix
        # @var string
        self.dataContent = dataContent


    PROPERTY_LOADERS = {
        'hasRealThumbnail': getXmlNodeBool, 
        'editorType': (KalturaEnumsFactory.createInt, "KalturaEditorType"), 
        'dataContent': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPlayableEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlayableEntry.toParams(self)
        kparams.put("objectType", "KalturaMixEntry")
        kparams.addIntEnumIfDefined("editorType", self.editorType)
        kparams.addStringIfDefined("dataContent", self.dataContent)
        return kparams

    def getHasRealThumbnail(self):
        return self.hasRealThumbnail

    def getEditorType(self):
        return self.editorType

    def setEditorType(self, newEditorType):
        self.editorType = newEditorType

    def getDataContent(self):
        return self.dataContent

    def setDataContent(self, newDataContent):
        self.dataContent = newDataContent


# @package Kaltura
# @subpackage Client
class KalturaModerationFlag(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            moderationObjectType=NotImplemented,
            flaggedEntryId=NotImplemented,
            flaggedUserId=NotImplemented,
            status=NotImplemented,
            comments=NotImplemented,
            flagType=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Moderation flag id
        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # The user id that added the moderation flag
        # @var string
        # @readonly
        self.userId = userId

        # The type of the moderation flag (entry or user)
        # @var KalturaModerationObjectType
        # @readonly
        self.moderationObjectType = moderationObjectType

        # If moderation flag is set for entry, this is the flagged entry id
        # @var string
        self.flaggedEntryId = flaggedEntryId

        # If moderation flag is set for user, this is the flagged user id
        # @var string
        self.flaggedUserId = flaggedUserId

        # The moderation flag status
        # @var KalturaModerationFlagStatus
        # @readonly
        self.status = status

        # The comment that was added to the flag
        # @var string
        self.comments = comments

        # @var KalturaModerationFlagType
        self.flagType = flagType

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'moderationObjectType': (KalturaEnumsFactory.createString, "KalturaModerationObjectType"), 
        'flaggedEntryId': getXmlNodeText, 
        'flaggedUserId': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createString, "KalturaModerationFlagStatus"), 
        'comments': getXmlNodeText, 
        'flagType': (KalturaEnumsFactory.createInt, "KalturaModerationFlagType"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaModerationFlag.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaModerationFlag")
        kparams.addStringIfDefined("flaggedEntryId", self.flaggedEntryId)
        kparams.addStringIfDefined("flaggedUserId", self.flaggedUserId)
        kparams.addStringIfDefined("comments", self.comments)
        kparams.addIntEnumIfDefined("flagType", self.flagType)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getModerationObjectType(self):
        return self.moderationObjectType

    def getFlaggedEntryId(self):
        return self.flaggedEntryId

    def setFlaggedEntryId(self, newFlaggedEntryId):
        self.flaggedEntryId = newFlaggedEntryId

    def getFlaggedUserId(self):
        return self.flaggedUserId

    def setFlaggedUserId(self, newFlaggedUserId):
        self.flaggedUserId = newFlaggedUserId

    def getStatus(self):
        return self.status

    def getComments(self):
        return self.comments

    def setComments(self, newComments):
        self.comments = newComments

    def getFlagType(self):
        return self.flagType

    def setFlagType(self, newFlagType):
        self.flagType = newFlagType

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaPartnerStatistics(KalturaObjectBase):
    def __init__(self,
            packageBandwidthAndStorage=NotImplemented,
            hosting=NotImplemented,
            bandwidth=NotImplemented,
            usage=NotImplemented,
            usagePercent=NotImplemented,
            reachedLimitDate=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Package total allowed bandwidth and storage
        # @var int
        # @readonly
        self.packageBandwidthAndStorage = packageBandwidthAndStorage

        # Partner total hosting in GB on the disk
        # @var float
        # @readonly
        self.hosting = hosting

        # Partner total bandwidth in GB
        # @var float
        # @readonly
        self.bandwidth = bandwidth

        # total usage in GB - including bandwidth and storage
        # @var int
        # @readonly
        self.usage = usage

        # Percent of usage out of partner's package. if usage is 5GB and package is 10GB, this value will be 50
        # @var float
        # @readonly
        self.usagePercent = usagePercent

        # date when partner reached the limit of his package (timestamp)
        # @var int
        # @readonly
        self.reachedLimitDate = reachedLimitDate


    PROPERTY_LOADERS = {
        'packageBandwidthAndStorage': getXmlNodeInt, 
        'hosting': getXmlNodeFloat, 
        'bandwidth': getXmlNodeFloat, 
        'usage': getXmlNodeInt, 
        'usagePercent': getXmlNodeFloat, 
        'reachedLimitDate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerStatistics.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerStatistics")
        return kparams

    def getPackageBandwidthAndStorage(self):
        return self.packageBandwidthAndStorage

    def getHosting(self):
        return self.hosting

    def getBandwidth(self):
        return self.bandwidth

    def getUsage(self):
        return self.usage

    def getUsagePercent(self):
        return self.usagePercent

    def getReachedLimitDate(self):
        return self.reachedLimitDate


# @package Kaltura
# @subpackage Client
class KalturaPartnerUsage(KalturaObjectBase):
    def __init__(self,
            hostingGB=NotImplemented,
            Percent=NotImplemented,
            packageBW=NotImplemented,
            usageGB=NotImplemented,
            reachedLimitDate=NotImplemented,
            usageGraph=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Partner total hosting in GB on the disk
        # @var float
        # @readonly
        self.hostingGB = hostingGB

        # percent of usage out of partner's package. if usageGB is 5 and package is 10GB, this value will be 50
        # @var float
        # @readonly
        self.Percent = Percent

        # package total BW - actually this is usage, which represents BW+storage
        # @var int
        # @readonly
        self.packageBW = packageBW

        # total usage in GB - including bandwidth and storage
        # @var float
        # @readonly
        self.usageGB = usageGB

        # date when partner reached the limit of his package (timestamp)
        # @var int
        # @readonly
        self.reachedLimitDate = reachedLimitDate

        # a semi-colon separated list of comma-separated key-values to represent a usage graph.
        # 	 keys could be 1-12 for a year view (1,1.2;2,1.1;3,0.9;...;12,1.4;)
        # 	 keys could be 1-[28,29,30,31] depending on the requested month, for a daily view in a given month (1,0.4;2,0.2;...;31,0.1;)
        # @var string
        # @readonly
        self.usageGraph = usageGraph


    PROPERTY_LOADERS = {
        'hostingGB': getXmlNodeFloat, 
        'Percent': getXmlNodeFloat, 
        'packageBW': getXmlNodeInt, 
        'usageGB': getXmlNodeFloat, 
        'reachedLimitDate': getXmlNodeInt, 
        'usageGraph': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerUsage.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPartnerUsage")
        return kparams

    def getHostingGB(self):
        return self.hostingGB

    def getPercent(self):
        return self.Percent

    def getPackageBW(self):
        return self.packageBW

    def getUsageGB(self):
        return self.usageGB

    def getReachedLimitDate(self):
        return self.reachedLimitDate

    def getUsageGraph(self):
        return self.usageGraph


# @package Kaltura
# @subpackage Client
class KalturaPermission(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            name=NotImplemented,
            friendlyName=NotImplemented,
            description=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            dependsOnPermissionNames=NotImplemented,
            tags=NotImplemented,
            permissionItemsIds=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerGroup=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var KalturaPermissionType
        # @readonly
        self.type = type

        # @var string
        self.name = name

        # @var string
        self.friendlyName = friendlyName

        # @var string
        self.description = description

        # @var KalturaPermissionStatus
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.dependsOnPermissionNames = dependsOnPermissionNames

        # @var string
        self.tags = tags

        # @var string
        self.permissionItemsIds = permissionItemsIds

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var string
        self.partnerGroup = partnerGroup


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createInt, "KalturaPermissionType"), 
        'name': getXmlNodeText, 
        'friendlyName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaPermissionStatus"), 
        'partnerId': getXmlNodeInt, 
        'dependsOnPermissionNames': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'permissionItemsIds': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerGroup': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermission.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPermission")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("friendlyName", self.friendlyName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("dependsOnPermissionNames", self.dependsOnPermissionNames)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("permissionItemsIds", self.permissionItemsIds)
        kparams.addStringIfDefined("partnerGroup", self.partnerGroup)
        return kparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getFriendlyName(self):
        return self.friendlyName

    def setFriendlyName(self, newFriendlyName):
        self.friendlyName = newFriendlyName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getPartnerId(self):
        return self.partnerId

    def getDependsOnPermissionNames(self):
        return self.dependsOnPermissionNames

    def setDependsOnPermissionNames(self, newDependsOnPermissionNames):
        self.dependsOnPermissionNames = newDependsOnPermissionNames

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getPermissionItemsIds(self):
        return self.permissionItemsIds

    def setPermissionItemsIds(self, newPermissionItemsIds):
        self.permissionItemsIds = newPermissionItemsIds

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerGroup(self):
        return self.partnerGroup

    def setPartnerGroup(self, newPartnerGroup):
        self.partnerGroup = newPartnerGroup


# @package Kaltura
# @subpackage Client
class KalturaPermissionItem(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var KalturaPermissionItemType
        # @readonly
        self.type = type

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.tags = tags

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaPermissionItemType"), 
        'partnerId': getXmlNodeInt, 
        'tags': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPermissionItem")
        kparams.addStringIfDefined("tags", self.tags)
        return kparams

    def getId(self):
        return self.id

    def getType(self):
        return self.type

    def getPartnerId(self):
        return self.partnerId

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaPlaylist(KalturaBaseEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            playlistContent=NotImplemented,
            filters=NotImplemented,
            totalResults=NotImplemented,
            playlistType=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            duration=NotImplemented,
            executeUrl=NotImplemented):
        KalturaBaseEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId)

        # Content of the playlist - 
        # 	 XML if the playlistType is dynamic 
        # 	 text if the playlistType is static 
        # 	 url if the playlistType is mRss
        # @var string
        self.playlistContent = playlistContent

        # @var array of KalturaMediaEntryFilterForPlaylist
        self.filters = filters

        # Maximum count of results to be returned in playlist execution
        # @var int
        self.totalResults = totalResults

        # Type of playlist
        # @var KalturaPlaylistType
        self.playlistType = playlistType

        # Number of plays
        # @var int
        # @readonly
        self.plays = plays

        # Number of views
        # @var int
        # @readonly
        self.views = views

        # The duration in seconds
        # @var int
        # @readonly
        self.duration = duration

        # The url for this playlist
        # @var string
        # @readonly
        self.executeUrl = executeUrl


    PROPERTY_LOADERS = {
        'playlistContent': getXmlNodeText, 
        'filters': (KalturaObjectFactory.createArray, KalturaMediaEntryFilterForPlaylist), 
        'totalResults': getXmlNodeInt, 
        'playlistType': (KalturaEnumsFactory.createInt, "KalturaPlaylistType"), 
        'plays': getXmlNodeInt, 
        'views': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'executeUrl': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylist.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntry.toParams(self)
        kparams.put("objectType", "KalturaPlaylist")
        kparams.addStringIfDefined("playlistContent", self.playlistContent)
        kparams.addArrayIfDefined("filters", self.filters)
        kparams.addIntIfDefined("totalResults", self.totalResults)
        kparams.addIntEnumIfDefined("playlistType", self.playlistType)
        return kparams

    def getPlaylistContent(self):
        return self.playlistContent

    def setPlaylistContent(self, newPlaylistContent):
        self.playlistContent = newPlaylistContent

    def getFilters(self):
        return self.filters

    def setFilters(self, newFilters):
        self.filters = newFilters

    def getTotalResults(self):
        return self.totalResults

    def setTotalResults(self, newTotalResults):
        self.totalResults = newTotalResults

    def getPlaylistType(self):
        return self.playlistType

    def setPlaylistType(self, newPlaylistType):
        self.playlistType = newPlaylistType

    def getPlays(self):
        return self.plays

    def getViews(self):
        return self.views

    def getDuration(self):
        return self.duration

    def getExecuteUrl(self):
        return self.executeUrl


# @package Kaltura
# @subpackage Client
class KalturaPluginData(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaPluginData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRemotePath(KalturaObjectBase):
    def __init__(self,
            storageProfileId=NotImplemented,
            uri=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.storageProfileId = storageProfileId

        # @var string
        # @readonly
        self.uri = uri


    PROPERTY_LOADERS = {
        'storageProfileId': getXmlNodeInt, 
        'uri': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRemotePath.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRemotePath")
        return kparams

    def getStorageProfileId(self):
        return self.storageProfileId

    def getUri(self):
        return self.uri


# @package Kaltura
# @subpackage Client
class KalturaUrlResource(KalturaContentResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, media file will be downloaded using import job in order to make the asset ready."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented):
        KalturaContentResource.__init__(self)

        # Remote URL, FTP, HTTP or HTTPS
        # @var string
        self.url = url

        # Force Import Job
        # @var bool
        self.forceAsyncDownload = forceAsyncDownload


    PROPERTY_LOADERS = {
        'url': getXmlNodeText, 
        'forceAsyncDownload': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaUrlResource")
        kparams.addStringIfDefined("url", self.url)
        kparams.addBoolIfDefined("forceAsyncDownload", self.forceAsyncDownload)
        return kparams

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getForceAsyncDownload(self):
        return self.forceAsyncDownload

    def setForceAsyncDownload(self, newForceAsyncDownload):
        self.forceAsyncDownload = newForceAsyncDownload


# @package Kaltura
# @subpackage Client
class KalturaRemoteStorageResource(KalturaUrlResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, the media file won't be downloaded but a file sync object of URL type will point to the media URL."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented,
            storageProfileId=NotImplemented):
        KalturaUrlResource.__init__(self,
            url,
            forceAsyncDownload)

        # ID of storage profile to be associated with the created file sync, used for file serving URL composing.
        # @var int
        self.storageProfileId = storageProfileId


    PROPERTY_LOADERS = {
        'storageProfileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaUrlResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRemoteStorageResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlResource.toParams(self)
        kparams.put("objectType", "KalturaRemoteStorageResource")
        kparams.addIntIfDefined("storageProfileId", self.storageProfileId)
        return kparams

    def getStorageProfileId(self):
        return self.storageProfileId

    def setStorageProfileId(self, newStorageProfileId):
        self.storageProfileId = newStorageProfileId


# @package Kaltura
# @subpackage Client
class KalturaReport(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            query=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Report id
        # @var int
        # @readonly
        self.id = id

        # Partner id associated with the report
        # @var int
        self.partnerId = partnerId

        # Report name
        # @var string
        self.name = name

        # Used to identify system reports in a friendly way
        # @var string
        self.systemName = systemName

        # Report description
        # @var string
        self.description = description

        # Report query
        # @var string
        self.query = query

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'query': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReport.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReport")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("query", self.query)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getQuery(self):
        return self.query

    def setQuery(self, newQuery):
        self.query = newQuery

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaReportBaseTotal(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            data=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportBaseTotal.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportBaseTotal")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaReportGraph(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            data=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportGraph.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportGraph")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaReportInputBaseFilter(KalturaObjectBase):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Start date as Unix timestamp (In seconds)
        # @var int
        self.fromDate = fromDate

        # End date as Unix timestamp (In seconds)
        # @var int
        self.toDate = toDate

        # Start day as string (YYYYMMDD)
        # @var string
        self.fromDay = fromDay

        # End date as string (YYYYMMDD)
        # @var string
        self.toDay = toDay


    PROPERTY_LOADERS = {
        'fromDate': getXmlNodeInt, 
        'toDate': getXmlNodeInt, 
        'fromDay': getXmlNodeText, 
        'toDay': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportInputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportInputBaseFilter")
        kparams.addIntIfDefined("fromDate", self.fromDate)
        kparams.addIntIfDefined("toDate", self.toDate)
        kparams.addStringIfDefined("fromDay", self.fromDay)
        kparams.addStringIfDefined("toDay", self.toDay)
        return kparams

    def getFromDate(self):
        return self.fromDate

    def setFromDate(self, newFromDate):
        self.fromDate = newFromDate

    def getToDate(self):
        return self.toDate

    def setToDate(self, newToDate):
        self.toDate = newToDate

    def getFromDay(self):
        return self.fromDay

    def setFromDay(self, newFromDay):
        self.fromDay = newFromDay

    def getToDay(self):
        return self.toDay

    def setToDay(self, newToDay):
        self.toDay = newToDay


# @package Kaltura
# @subpackage Client
class KalturaReportResponse(KalturaObjectBase):
    def __init__(self,
            columns=NotImplemented,
            results=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.columns = columns

        # @var array of KalturaString
        self.results = results


    PROPERTY_LOADERS = {
        'columns': getXmlNodeText, 
        'results': (KalturaObjectFactory.createArray, KalturaString), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportResponse")
        kparams.addStringIfDefined("columns", self.columns)
        kparams.addArrayIfDefined("results", self.results)
        return kparams

    def getColumns(self):
        return self.columns

    def setColumns(self, newColumns):
        self.columns = newColumns

    def getResults(self):
        return self.results

    def setResults(self, newResults):
        self.results = newResults


# @package Kaltura
# @subpackage Client
class KalturaReportTable(KalturaObjectBase):
    def __init__(self,
            header=NotImplemented,
            data=NotImplemented,
            totalCount=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @readonly
        self.header = header

        # @var string
        # @readonly
        self.data = data

        # @var int
        # @readonly
        self.totalCount = totalCount


    PROPERTY_LOADERS = {
        'header': getXmlNodeText, 
        'data': getXmlNodeText, 
        'totalCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportTable.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportTable")
        return kparams

    def getHeader(self):
        return self.header

    def getData(self):
        return self.data

    def getTotalCount(self):
        return self.totalCount


# @package Kaltura
# @subpackage Client
class KalturaReportTotal(KalturaObjectBase):
    def __init__(self,
            header=NotImplemented,
            data=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.header = header

        # @var string
        self.data = data


    PROPERTY_LOADERS = {
        'header': getXmlNodeText, 
        'data': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportTotal.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaReportTotal")
        kparams.addStringIfDefined("header", self.header)
        kparams.addStringIfDefined("data", self.data)
        return kparams

    def getHeader(self):
        return self.header

    def setHeader(self, newHeader):
        self.header = newHeader

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData


# @package Kaltura
# @subpackage Client
class KalturaRequestConfiguration(KalturaObjectBase):
    """Define client request optional configurations
     /"""

    def __init__(self,
            partnerId=NotImplemented,
            ks=NotImplemented,
            responseProfile=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Impersonated partner id
        # @var int
        self.partnerId = partnerId

        # Kaltura API session
        # @var string
        self.ks = ks

        # Response profile - this attribute will be automatically unset after every API call.
        # @var KalturaBaseResponseProfile
        self.responseProfile = responseProfile


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'ks': getXmlNodeText, 
        'responseProfile': (KalturaObjectFactory.create, KalturaBaseResponseProfile), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRequestConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaRequestConfiguration")
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("ks", self.ks)
        kparams.addObjectIfDefined("responseProfile", self.responseProfile)
        return kparams

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getKs(self):
        return self.ks

    def setKs(self, newKs):
        self.ks = newKs

    def getResponseProfile(self):
        return self.responseProfile

    def setResponseProfile(self, newResponseProfile):
        self.responseProfile = newResponseProfile


# @package Kaltura
# @subpackage Client
class KalturaResponseProfile(KalturaDetachedResponseProfile):
    def __init__(self,
            name=NotImplemented,
            type=NotImplemented,
            fields=NotImplemented,
            filter=NotImplemented,
            pager=NotImplemented,
            relatedProfiles=NotImplemented,
            mappings=NotImplemented,
            id=NotImplemented,
            systemName=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            version=NotImplemented):
        KalturaDetachedResponseProfile.__init__(self,
            name,
            type,
            fields,
            filter,
            pager,
            relatedProfiles,
            mappings)

        # Auto generated numeric identifier
        # @var int
        # @readonly
        self.id = id

        # Unique system name
        # @var string
        self.systemName = systemName

        # @var int
        # @readonly
        self.partnerId = partnerId

        # Creation time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Update time as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaResponseProfileStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.version = version


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systemName': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaResponseProfileStatus"), 
        'version': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaDetachedResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDetachedResponseProfile.toParams(self)
        kparams.put("objectType", "KalturaResponseProfile")
        kparams.addStringIfDefined("systemName", self.systemName)
        return kparams

    def getId(self):
        return self.id

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getStatus(self):
        return self.status

    def getVersion(self):
        return self.version


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileCacheRecalculateOptions(KalturaObjectBase):
    def __init__(self,
            limit=NotImplemented,
            cachedObjectType=NotImplemented,
            objectId=NotImplemented,
            startObjectKey=NotImplemented,
            endObjectKey=NotImplemented,
            jobCreatedAt=NotImplemented,
            isFirstLoop=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Maximum number of keys to recalculate
        # @var int
        self.limit = limit

        # Class name
        # @var string
        self.cachedObjectType = cachedObjectType

        # @var string
        self.objectId = objectId

        # @var string
        self.startObjectKey = startObjectKey

        # @var string
        self.endObjectKey = endObjectKey

        # @var int
        self.jobCreatedAt = jobCreatedAt

        # @var bool
        self.isFirstLoop = isFirstLoop


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
        'cachedObjectType': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'startObjectKey': getXmlNodeText, 
        'endObjectKey': getXmlNodeText, 
        'jobCreatedAt': getXmlNodeInt, 
        'isFirstLoop': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileCacheRecalculateOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileCacheRecalculateOptions")
        kparams.addIntIfDefined("limit", self.limit)
        kparams.addStringIfDefined("cachedObjectType", self.cachedObjectType)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addStringIfDefined("startObjectKey", self.startObjectKey)
        kparams.addStringIfDefined("endObjectKey", self.endObjectKey)
        kparams.addIntIfDefined("jobCreatedAt", self.jobCreatedAt)
        kparams.addBoolIfDefined("isFirstLoop", self.isFirstLoop)
        return kparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit

    def getCachedObjectType(self):
        return self.cachedObjectType

    def setCachedObjectType(self, newCachedObjectType):
        self.cachedObjectType = newCachedObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStartObjectKey(self):
        return self.startObjectKey

    def setStartObjectKey(self, newStartObjectKey):
        self.startObjectKey = newStartObjectKey

    def getEndObjectKey(self):
        return self.endObjectKey

    def setEndObjectKey(self, newEndObjectKey):
        self.endObjectKey = newEndObjectKey

    def getJobCreatedAt(self):
        return self.jobCreatedAt

    def setJobCreatedAt(self, newJobCreatedAt):
        self.jobCreatedAt = newJobCreatedAt

    def getIsFirstLoop(self):
        return self.isFirstLoop

    def setIsFirstLoop(self, newIsFirstLoop):
        self.isFirstLoop = newIsFirstLoop


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileCacheRecalculateResults(KalturaObjectBase):
    def __init__(self,
            lastObjectKey=NotImplemented,
            recalculated=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Last recalculated id
        # @var string
        self.lastObjectKey = lastObjectKey

        # Number of recalculated keys
        # @var int
        self.recalculated = recalculated


    PROPERTY_LOADERS = {
        'lastObjectKey': getXmlNodeText, 
        'recalculated': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileCacheRecalculateResults.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileCacheRecalculateResults")
        kparams.addStringIfDefined("lastObjectKey", self.lastObjectKey)
        kparams.addIntIfDefined("recalculated", self.recalculated)
        return kparams

    def getLastObjectKey(self):
        return self.lastObjectKey

    def setLastObjectKey(self, newLastObjectKey):
        self.lastObjectKey = newLastObjectKey

    def getRecalculated(self):
        return self.recalculated

    def setRecalculated(self, newRecalculated):
        self.recalculated = newRecalculated


# @package Kaltura
# @subpackage Client
class KalturaScope(KalturaObjectBase):
    def __init__(self):
        KalturaObjectBase.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaScope.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaScope")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSearch(KalturaObjectBase):
    def __init__(self,
            keyWords=NotImplemented,
            searchSource=NotImplemented,
            mediaType=NotImplemented,
            extraData=NotImplemented,
            authData=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.keyWords = keyWords

        # @var KalturaSearchProviderType
        self.searchSource = searchSource

        # @var KalturaMediaType
        self.mediaType = mediaType

        # Use this field to pass dynamic data for searching
        # 	 For example - if you set this field to "mymovies_$partner_id"
        # 	 The $partner_id will be automatically replcaed with your real partner Id
        # @var string
        self.extraData = extraData

        # @var string
        self.authData = authData


    PROPERTY_LOADERS = {
        'keyWords': getXmlNodeText, 
        'searchSource': (KalturaEnumsFactory.createInt, "KalturaSearchProviderType"), 
        'mediaType': (KalturaEnumsFactory.createInt, "KalturaMediaType"), 
        'extraData': getXmlNodeText, 
        'authData': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearch.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearch")
        kparams.addStringIfDefined("keyWords", self.keyWords)
        kparams.addIntEnumIfDefined("searchSource", self.searchSource)
        kparams.addIntEnumIfDefined("mediaType", self.mediaType)
        kparams.addStringIfDefined("extraData", self.extraData)
        kparams.addStringIfDefined("authData", self.authData)
        return kparams

    def getKeyWords(self):
        return self.keyWords

    def setKeyWords(self, newKeyWords):
        self.keyWords = newKeyWords

    def getSearchSource(self):
        return self.searchSource

    def setSearchSource(self, newSearchSource):
        self.searchSource = newSearchSource

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getExtraData(self):
        return self.extraData

    def setExtraData(self, newExtraData):
        self.extraData = newExtraData

    def getAuthData(self):
        return self.authData

    def setAuthData(self, newAuthData):
        self.authData = newAuthData


# @package Kaltura
# @subpackage Client
class KalturaSearchAuthData(KalturaObjectBase):
    def __init__(self,
            authData=NotImplemented,
            loginUrl=NotImplemented,
            message=NotImplemented):
        KalturaObjectBase.__init__(self)

        # The authentication data that further should be used for search
        # @var string
        self.authData = authData

        # Login URL when user need to sign-in and authorize the search
        # @var string
        self.loginUrl = loginUrl

        # Information when there was an error
        # @var string
        self.message = message


    PROPERTY_LOADERS = {
        'authData': getXmlNodeText, 
        'loginUrl': getXmlNodeText, 
        'message': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchAuthData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchAuthData")
        kparams.addStringIfDefined("authData", self.authData)
        kparams.addStringIfDefined("loginUrl", self.loginUrl)
        kparams.addStringIfDefined("message", self.message)
        return kparams

    def getAuthData(self):
        return self.authData

    def setAuthData(self, newAuthData):
        self.authData = newAuthData

    def getLoginUrl(self):
        return self.loginUrl

    def setLoginUrl(self, newLoginUrl):
        self.loginUrl = newLoginUrl

    def getMessage(self):
        return self.message

    def setMessage(self, newMessage):
        self.message = newMessage


# @package Kaltura
# @subpackage Client
class KalturaSearchResult(KalturaSearch):
    def __init__(self,
            keyWords=NotImplemented,
            searchSource=NotImplemented,
            mediaType=NotImplemented,
            extraData=NotImplemented,
            authData=NotImplemented,
            id=NotImplemented,
            title=NotImplemented,
            thumbUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            url=NotImplemented,
            sourceLink=NotImplemented,
            credit=NotImplemented,
            licenseType=NotImplemented,
            flashPlaybackType=NotImplemented,
            fileExt=NotImplemented):
        KalturaSearch.__init__(self,
            keyWords,
            searchSource,
            mediaType,
            extraData,
            authData)

        # @var string
        self.id = id

        # @var string
        self.title = title

        # @var string
        self.thumbUrl = thumbUrl

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var string
        self.url = url

        # @var string
        self.sourceLink = sourceLink

        # @var string
        self.credit = credit

        # @var KalturaLicenseType
        self.licenseType = licenseType

        # @var string
        self.flashPlaybackType = flashPlaybackType

        # @var string
        self.fileExt = fileExt


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'title': getXmlNodeText, 
        'thumbUrl': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'url': getXmlNodeText, 
        'sourceLink': getXmlNodeText, 
        'credit': getXmlNodeText, 
        'licenseType': (KalturaEnumsFactory.createInt, "KalturaLicenseType"), 
        'flashPlaybackType': getXmlNodeText, 
        'fileExt': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSearch.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearch.toParams(self)
        kparams.put("objectType", "KalturaSearchResult")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("title", self.title)
        kparams.addStringIfDefined("thumbUrl", self.thumbUrl)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("sourceLink", self.sourceLink)
        kparams.addStringIfDefined("credit", self.credit)
        kparams.addIntEnumIfDefined("licenseType", self.licenseType)
        kparams.addStringIfDefined("flashPlaybackType", self.flashPlaybackType)
        kparams.addStringIfDefined("fileExt", self.fileExt)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getTitle(self):
        return self.title

    def setTitle(self, newTitle):
        self.title = newTitle

    def getThumbUrl(self):
        return self.thumbUrl

    def setThumbUrl(self, newThumbUrl):
        self.thumbUrl = newThumbUrl

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getSourceLink(self):
        return self.sourceLink

    def setSourceLink(self, newSourceLink):
        self.sourceLink = newSourceLink

    def getCredit(self):
        return self.credit

    def setCredit(self, newCredit):
        self.credit = newCredit

    def getLicenseType(self):
        return self.licenseType

    def setLicenseType(self, newLicenseType):
        self.licenseType = newLicenseType

    def getFlashPlaybackType(self):
        return self.flashPlaybackType

    def setFlashPlaybackType(self, newFlashPlaybackType):
        self.flashPlaybackType = newFlashPlaybackType

    def getFileExt(self):
        return self.fileExt

    def setFileExt(self, newFileExt):
        self.fileExt = newFileExt


# @package Kaltura
# @subpackage Client
class KalturaSearchResultResponse(KalturaObjectBase):
    def __init__(self,
            objects=NotImplemented,
            needMediaInfo=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var array of KalturaSearchResult
        # @readonly
        self.objects = objects

        # @var bool
        # @readonly
        self.needMediaInfo = needMediaInfo


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaSearchResult), 
        'needMediaInfo': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchResultResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSearchResultResponse")
        return kparams

    def getObjects(self):
        return self.objects

    def getNeedMediaInfo(self):
        return self.needMediaInfo


# @package Kaltura
# @subpackage Client
class KalturaServerNode(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.heartbeatTime = heartbeatTime

        # serverNode name
        # @var string
        self.name = name

        # serverNode uniqe system name
        # @var string
        self.systemName = systemName

        # @var string
        self.description = description

        # serverNode hostName
        # @var string
        self.hostName = hostName

        # @var KalturaServerNodeStatus
        # @readonly
        self.status = status

        # @var KalturaServerNodeType
        # @readonly
        self.type = type

        # serverNode tags
        # @var string
        self.tags = tags

        # DC where the serverNode is located
        # @var int
        # @readonly
        self.dc = dc

        # Id of the parent serverNode
        # @var int
        self.parentId = parentId


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'heartbeatTime': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'hostName': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaServerNodeStatus"), 
        'type': (KalturaEnumsFactory.createString, "KalturaServerNodeType"), 
        'tags': getXmlNodeText, 
        'dc': getXmlNodeInt, 
        'parentId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaServerNode")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("hostName", self.hostName)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addIntIfDefined("parentId", self.parentId)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getHeartbeatTime(self):
        return self.heartbeatTime

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getHostName(self):
        return self.hostName

    def setHostName(self, newHostName):
        self.hostName = newHostName

    def getStatus(self):
        return self.status

    def getType(self):
        return self.type

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDc(self):
        return self.dc

    def getParentId(self):
        return self.parentId

    def setParentId(self, newParentId):
        self.parentId = newParentId


# @package Kaltura
# @subpackage Client
class KalturaSessionInfo(KalturaObjectBase):
    def __init__(self,
            ks=NotImplemented,
            sessionType=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            expiry=NotImplemented,
            privileges=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @readonly
        self.ks = ks

        # @var KalturaSessionType
        # @readonly
        self.sessionType = sessionType

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        # @readonly
        self.userId = userId

        # @var int
        # @readonly
        self.expiry = expiry

        # @var string
        # @readonly
        self.privileges = privileges


    PROPERTY_LOADERS = {
        'ks': getXmlNodeText, 
        'sessionType': (KalturaEnumsFactory.createInt, "KalturaSessionType"), 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'expiry': getXmlNodeInt, 
        'privileges': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSessionInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSessionInfo")
        return kparams

    def getKs(self):
        return self.ks

    def getSessionType(self):
        return self.sessionType

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getExpiry(self):
        return self.expiry

    def getPrivileges(self):
        return self.privileges


# @package Kaltura
# @subpackage Client
class KalturaSourceFileSyncDescriptor(KalturaFileSyncDescriptor):
    def __init__(self,
            fileSyncLocalPath=NotImplemented,
            fileSyncRemoteUrl=NotImplemented,
            fileSyncObjectSubType=NotImplemented,
            actualFileSyncLocalPath=NotImplemented,
            assetId=NotImplemented,
            assetParamsId=NotImplemented):
        KalturaFileSyncDescriptor.__init__(self,
            fileSyncLocalPath,
            fileSyncRemoteUrl,
            fileSyncObjectSubType)

        # The translated path as used by the scheduler
        # @var string
        self.actualFileSyncLocalPath = actualFileSyncLocalPath

        # @var string
        self.assetId = assetId

        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'actualFileSyncLocalPath': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFileSyncDescriptor.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSourceFileSyncDescriptor.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFileSyncDescriptor.toParams(self)
        kparams.put("objectType", "KalturaSourceFileSyncDescriptor")
        kparams.addStringIfDefined("actualFileSyncLocalPath", self.actualFileSyncLocalPath)
        kparams.addStringIfDefined("assetId", self.assetId)
        kparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return kparams

    def getActualFileSyncLocalPath(self):
        return self.actualFileSyncLocalPath

    def setActualFileSyncLocalPath(self, newActualFileSyncLocalPath):
        self.actualFileSyncLocalPath = newActualFileSyncLocalPath

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Kaltura
# @subpackage Client
class KalturaStartWidgetSessionResponse(KalturaObjectBase):
    def __init__(self,
            partnerId=NotImplemented,
            ks=NotImplemented,
            userId=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        # @readonly
        self.ks = ks

        # @var string
        # @readonly
        self.userId = userId


    PROPERTY_LOADERS = {
        'partnerId': getXmlNodeInt, 
        'ks': getXmlNodeText, 
        'userId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStartWidgetSessionResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStartWidgetSessionResponse")
        return kparams

    def getPartnerId(self):
        return self.partnerId

    def getKs(self):
        return self.ks

    def getUserId(self):
        return self.userId


# @package Kaltura
# @subpackage Client
class KalturaStatsEvent(KalturaObjectBase):
    """Will hold data from the Kaltura UI components to be passed on to the reports and analytics system"""

    def __init__(self,
            clientVer=NotImplemented,
            eventType=NotImplemented,
            eventTimestamp=NotImplemented,
            sessionId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            uniqueViewer=NotImplemented,
            widgetId=NotImplemented,
            uiconfId=NotImplemented,
            userId=NotImplemented,
            currentPoint=NotImplemented,
            duration=NotImplemented,
            userIp=NotImplemented,
            processDuration=NotImplemented,
            controlId=NotImplemented,
            seek=NotImplemented,
            newPoint=NotImplemented,
            referrer=NotImplemented,
            isFirstInSession=NotImplemented,
            applicationId=NotImplemented,
            contextId=NotImplemented,
            featureType=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.clientVer = clientVer

        # @var KalturaStatsEventType
        self.eventType = eventType

        # the client's timestamp of this event
        # @var float
        self.eventTimestamp = eventTimestamp

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # the UV cookie - creates in the operational system and should be passed on ofr every event
        # @var string
        self.uniqueViewer = uniqueViewer

        # @var string
        self.widgetId = widgetId

        # @var int
        self.uiconfId = uiconfId

        # the partner's user id
        # @var string
        self.userId = userId

        # the timestamp along the video when the event happend
        # @var int
        self.currentPoint = currentPoint

        # the duration of the video in milliseconds - will make it much faster than quering the db for each entry
        # @var int
        self.duration = duration

        # will be retrieved from the request of the user
        # @var string
        # @readonly
        self.userIp = userIp

        # the time in milliseconds the event took
        # @var int
        self.processDuration = processDuration

        # the id of the GUI control - will be used in the future to better understand what the user clicked
        # @var string
        self.controlId = controlId

        # true if the user ever used seek in this session
        # @var bool
        self.seek = seek

        # timestamp of the new point on the timeline of the video after the user seeks
        # @var int
        self.newPoint = newPoint

        # the referrer of the client
        # @var string
        self.referrer = referrer

        # will indicate if the event is thrown for the first video in the session
        # @var bool
        self.isFirstInSession = isFirstInSession

        # kaltura application name
        # @var string
        self.applicationId = applicationId

        # @var int
        self.contextId = contextId

        # @var KalturaStatsFeatureType
        self.featureType = featureType


    PROPERTY_LOADERS = {
        'clientVer': getXmlNodeText, 
        'eventType': (KalturaEnumsFactory.createInt, "KalturaStatsEventType"), 
        'eventTimestamp': getXmlNodeFloat, 
        'sessionId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'uniqueViewer': getXmlNodeText, 
        'widgetId': getXmlNodeText, 
        'uiconfId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'currentPoint': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
        'userIp': getXmlNodeText, 
        'processDuration': getXmlNodeInt, 
        'controlId': getXmlNodeText, 
        'seek': getXmlNodeBool, 
        'newPoint': getXmlNodeInt, 
        'referrer': getXmlNodeText, 
        'isFirstInSession': getXmlNodeBool, 
        'applicationId': getXmlNodeText, 
        'contextId': getXmlNodeInt, 
        'featureType': (KalturaEnumsFactory.createInt, "KalturaStatsFeatureType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStatsEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStatsEvent")
        kparams.addStringIfDefined("clientVer", self.clientVer)
        kparams.addIntEnumIfDefined("eventType", self.eventType)
        kparams.addFloatIfDefined("eventTimestamp", self.eventTimestamp)
        kparams.addStringIfDefined("sessionId", self.sessionId)
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("uniqueViewer", self.uniqueViewer)
        kparams.addStringIfDefined("widgetId", self.widgetId)
        kparams.addIntIfDefined("uiconfId", self.uiconfId)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addIntIfDefined("currentPoint", self.currentPoint)
        kparams.addIntIfDefined("duration", self.duration)
        kparams.addIntIfDefined("processDuration", self.processDuration)
        kparams.addStringIfDefined("controlId", self.controlId)
        kparams.addBoolIfDefined("seek", self.seek)
        kparams.addIntIfDefined("newPoint", self.newPoint)
        kparams.addStringIfDefined("referrer", self.referrer)
        kparams.addBoolIfDefined("isFirstInSession", self.isFirstInSession)
        kparams.addStringIfDefined("applicationId", self.applicationId)
        kparams.addIntIfDefined("contextId", self.contextId)
        kparams.addIntEnumIfDefined("featureType", self.featureType)
        return kparams

    def getClientVer(self):
        return self.clientVer

    def setClientVer(self, newClientVer):
        self.clientVer = newClientVer

    def getEventType(self):
        return self.eventType

    def setEventType(self, newEventType):
        self.eventType = newEventType

    def getEventTimestamp(self):
        return self.eventTimestamp

    def setEventTimestamp(self, newEventTimestamp):
        self.eventTimestamp = newEventTimestamp

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUniqueViewer(self):
        return self.uniqueViewer

    def setUniqueViewer(self, newUniqueViewer):
        self.uniqueViewer = newUniqueViewer

    def getWidgetId(self):
        return self.widgetId

    def setWidgetId(self, newWidgetId):
        self.widgetId = newWidgetId

    def getUiconfId(self):
        return self.uiconfId

    def setUiconfId(self, newUiconfId):
        self.uiconfId = newUiconfId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getCurrentPoint(self):
        return self.currentPoint

    def setCurrentPoint(self, newCurrentPoint):
        self.currentPoint = newCurrentPoint

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getUserIp(self):
        return self.userIp

    def getProcessDuration(self):
        return self.processDuration

    def setProcessDuration(self, newProcessDuration):
        self.processDuration = newProcessDuration

    def getControlId(self):
        return self.controlId

    def setControlId(self, newControlId):
        self.controlId = newControlId

    def getSeek(self):
        return self.seek

    def setSeek(self, newSeek):
        self.seek = newSeek

    def getNewPoint(self):
        return self.newPoint

    def setNewPoint(self, newNewPoint):
        self.newPoint = newNewPoint

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer

    def getIsFirstInSession(self):
        return self.isFirstInSession

    def setIsFirstInSession(self, newIsFirstInSession):
        self.isFirstInSession = newIsFirstInSession

    def getApplicationId(self):
        return self.applicationId

    def setApplicationId(self, newApplicationId):
        self.applicationId = newApplicationId

    def getContextId(self):
        return self.contextId

    def setContextId(self, newContextId):
        self.contextId = newContextId

    def getFeatureType(self):
        return self.featureType

    def setFeatureType(self, newFeatureType):
        self.featureType = newFeatureType


# @package Kaltura
# @subpackage Client
class KalturaStatsKmcEvent(KalturaObjectBase):
    """Will hold data from the Kaltura UI components to be passed on to the reports and analytics system"""

    def __init__(self,
            clientVer=NotImplemented,
            kmcEventActionPath=NotImplemented,
            kmcEventType=NotImplemented,
            eventTimestamp=NotImplemented,
            sessionId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            widgetId=NotImplemented,
            uiconfId=NotImplemented,
            userId=NotImplemented,
            userIp=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.clientVer = clientVer

        # @var string
        self.kmcEventActionPath = kmcEventActionPath

        # @var KalturaStatsKmcEventType
        self.kmcEventType = kmcEventType

        # the client's timestamp of this event
        # @var float
        self.eventTimestamp = eventTimestamp

        # a unique string generated by the client that will represent the client-side session: the primary component will pass it on to other components that sprout from it
        # @var string
        self.sessionId = sessionId

        # @var int
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # @var string
        self.widgetId = widgetId

        # @var int
        self.uiconfId = uiconfId

        # the partner's user id
        # @var string
        self.userId = userId

        # will be retrieved from the request of the user
        # @var string
        # @readonly
        self.userIp = userIp


    PROPERTY_LOADERS = {
        'clientVer': getXmlNodeText, 
        'kmcEventActionPath': getXmlNodeText, 
        'kmcEventType': (KalturaEnumsFactory.createInt, "KalturaStatsKmcEventType"), 
        'eventTimestamp': getXmlNodeFloat, 
        'sessionId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'widgetId': getXmlNodeText, 
        'uiconfId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'userIp': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStatsKmcEvent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStatsKmcEvent")
        kparams.addStringIfDefined("clientVer", self.clientVer)
        kparams.addStringIfDefined("kmcEventActionPath", self.kmcEventActionPath)
        kparams.addIntEnumIfDefined("kmcEventType", self.kmcEventType)
        kparams.addFloatIfDefined("eventTimestamp", self.eventTimestamp)
        kparams.addStringIfDefined("sessionId", self.sessionId)
        kparams.addIntIfDefined("partnerId", self.partnerId)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("widgetId", self.widgetId)
        kparams.addIntIfDefined("uiconfId", self.uiconfId)
        kparams.addStringIfDefined("userId", self.userId)
        return kparams

    def getClientVer(self):
        return self.clientVer

    def setClientVer(self, newClientVer):
        self.clientVer = newClientVer

    def getKmcEventActionPath(self):
        return self.kmcEventActionPath

    def setKmcEventActionPath(self, newKmcEventActionPath):
        self.kmcEventActionPath = newKmcEventActionPath

    def getKmcEventType(self):
        return self.kmcEventType

    def setKmcEventType(self, newKmcEventType):
        self.kmcEventType = newKmcEventType

    def getEventTimestamp(self):
        return self.eventTimestamp

    def setEventTimestamp(self, newEventTimestamp):
        self.eventTimestamp = newEventTimestamp

    def getSessionId(self):
        return self.sessionId

    def setSessionId(self, newSessionId):
        self.sessionId = newSessionId

    def getPartnerId(self):
        return self.partnerId

    def setPartnerId(self, newPartnerId):
        self.partnerId = newPartnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getWidgetId(self):
        return self.widgetId

    def setWidgetId(self, newWidgetId):
        self.widgetId = newWidgetId

    def getUiconfId(self):
        return self.uiconfId

    def setUiconfId(self, newUiconfId):
        self.uiconfId = newUiconfId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getUserIp(self):
        return self.userIp


# @package Kaltura
# @subpackage Client
class KalturaStorageProfile(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            desciption=NotImplemented,
            status=NotImplemented,
            protocol=NotImplemented,
            storageUrl=NotImplemented,
            storageBaseDir=NotImplemented,
            storageUsername=NotImplemented,
            storagePassword=NotImplemented,
            storageFtpPassiveMode=NotImplemented,
            minFileSize=NotImplemented,
            maxFileSize=NotImplemented,
            flavorParamsIds=NotImplemented,
            maxConcurrentConnections=NotImplemented,
            pathManagerClass=NotImplemented,
            pathManagerParams=NotImplemented,
            trigger=NotImplemented,
            deliveryPriority=NotImplemented,
            deliveryStatus=NotImplemented,
            readyBehavior=NotImplemented,
            allowAutoDelete=NotImplemented,
            createFileLink=NotImplemented,
            rules=NotImplemented,
            deliveryProfileIds=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.desciption = desciption

        # @var KalturaStorageProfileStatus
        self.status = status

        # @var KalturaStorageProfileProtocol
        self.protocol = protocol

        # @var string
        self.storageUrl = storageUrl

        # @var string
        self.storageBaseDir = storageBaseDir

        # @var string
        self.storageUsername = storageUsername

        # @var string
        self.storagePassword = storagePassword

        # @var bool
        self.storageFtpPassiveMode = storageFtpPassiveMode

        # @var int
        self.minFileSize = minFileSize

        # @var int
        self.maxFileSize = maxFileSize

        # @var string
        self.flavorParamsIds = flavorParamsIds

        # @var int
        self.maxConcurrentConnections = maxConcurrentConnections

        # @var string
        self.pathManagerClass = pathManagerClass

        # @var array of KalturaKeyValue
        self.pathManagerParams = pathManagerParams

        # No need to create enum for temp field
        # @var int
        self.trigger = trigger

        # Delivery Priority
        # @var int
        self.deliveryPriority = deliveryPriority

        # @var KalturaStorageProfileDeliveryStatus
        self.deliveryStatus = deliveryStatus

        # @var KalturaStorageProfileReadyBehavior
        self.readyBehavior = readyBehavior

        # Flag sugnifying that the storage exported content should be deleted when soure entry is deleted
        # @var int
        self.allowAutoDelete = allowAutoDelete

        # Indicates to the local file transfer manager to create a link to the file instead of copying it
        # @var bool
        self.createFileLink = createFileLink

        # Holds storage profile export rules
        # @var array of KalturaRule
        self.rules = rules

        # Delivery profile ids
        # @var array of KalturaKeyValue
        self.deliveryProfileIds = deliveryProfileIds

        # @var string
        self.privateKey = privateKey

        # @var string
        self.publicKey = publicKey

        # @var string
        self.passPhrase = passPhrase


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerId': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'desciption': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaStorageProfileStatus"), 
        'protocol': (KalturaEnumsFactory.createString, "KalturaStorageProfileProtocol"), 
        'storageUrl': getXmlNodeText, 
        'storageBaseDir': getXmlNodeText, 
        'storageUsername': getXmlNodeText, 
        'storagePassword': getXmlNodeText, 
        'storageFtpPassiveMode': getXmlNodeBool, 
        'minFileSize': getXmlNodeInt, 
        'maxFileSize': getXmlNodeInt, 
        'flavorParamsIds': getXmlNodeText, 
        'maxConcurrentConnections': getXmlNodeInt, 
        'pathManagerClass': getXmlNodeText, 
        'pathManagerParams': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'trigger': getXmlNodeInt, 
        'deliveryPriority': getXmlNodeInt, 
        'deliveryStatus': (KalturaEnumsFactory.createInt, "KalturaStorageProfileDeliveryStatus"), 
        'readyBehavior': (KalturaEnumsFactory.createInt, "KalturaStorageProfileReadyBehavior"), 
        'allowAutoDelete': getXmlNodeInt, 
        'createFileLink': getXmlNodeBool, 
        'rules': (KalturaObjectFactory.createArray, KalturaRule), 
        'deliveryProfileIds': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'passPhrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaStorageProfile")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("desciption", self.desciption)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringEnumIfDefined("protocol", self.protocol)
        kparams.addStringIfDefined("storageUrl", self.storageUrl)
        kparams.addStringIfDefined("storageBaseDir", self.storageBaseDir)
        kparams.addStringIfDefined("storageUsername", self.storageUsername)
        kparams.addStringIfDefined("storagePassword", self.storagePassword)
        kparams.addBoolIfDefined("storageFtpPassiveMode", self.storageFtpPassiveMode)
        kparams.addIntIfDefined("minFileSize", self.minFileSize)
        kparams.addIntIfDefined("maxFileSize", self.maxFileSize)
        kparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        kparams.addIntIfDefined("maxConcurrentConnections", self.maxConcurrentConnections)
        kparams.addStringIfDefined("pathManagerClass", self.pathManagerClass)
        kparams.addArrayIfDefined("pathManagerParams", self.pathManagerParams)
        kparams.addIntIfDefined("trigger", self.trigger)
        kparams.addIntIfDefined("deliveryPriority", self.deliveryPriority)
        kparams.addIntEnumIfDefined("deliveryStatus", self.deliveryStatus)
        kparams.addIntEnumIfDefined("readyBehavior", self.readyBehavior)
        kparams.addIntIfDefined("allowAutoDelete", self.allowAutoDelete)
        kparams.addBoolIfDefined("createFileLink", self.createFileLink)
        kparams.addArrayIfDefined("rules", self.rules)
        kparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        kparams.addStringIfDefined("privateKey", self.privateKey)
        kparams.addStringIfDefined("publicKey", self.publicKey)
        kparams.addStringIfDefined("passPhrase", self.passPhrase)
        return kparams

    def getId(self):
        return self.id

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerId(self):
        return self.partnerId

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDesciption(self):
        return self.desciption

    def setDesciption(self, newDesciption):
        self.desciption = newDesciption

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getStorageUrl(self):
        return self.storageUrl

    def setStorageUrl(self, newStorageUrl):
        self.storageUrl = newStorageUrl

    def getStorageBaseDir(self):
        return self.storageBaseDir

    def setStorageBaseDir(self, newStorageBaseDir):
        self.storageBaseDir = newStorageBaseDir

    def getStorageUsername(self):
        return self.storageUsername

    def setStorageUsername(self, newStorageUsername):
        self.storageUsername = newStorageUsername

    def getStoragePassword(self):
        return self.storagePassword

    def setStoragePassword(self, newStoragePassword):
        self.storagePassword = newStoragePassword

    def getStorageFtpPassiveMode(self):
        return self.storageFtpPassiveMode

    def setStorageFtpPassiveMode(self, newStorageFtpPassiveMode):
        self.storageFtpPassiveMode = newStorageFtpPassiveMode

    def getMinFileSize(self):
        return self.minFileSize

    def setMinFileSize(self, newMinFileSize):
        self.minFileSize = newMinFileSize

    def getMaxFileSize(self):
        return self.maxFileSize

    def setMaxFileSize(self, newMaxFileSize):
        self.maxFileSize = newMaxFileSize

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getMaxConcurrentConnections(self):
        return self.maxConcurrentConnections

    def setMaxConcurrentConnections(self, newMaxConcurrentConnections):
        self.maxConcurrentConnections = newMaxConcurrentConnections

    def getPathManagerClass(self):
        return self.pathManagerClass

    def setPathManagerClass(self, newPathManagerClass):
        self.pathManagerClass = newPathManagerClass

    def getPathManagerParams(self):
        return self.pathManagerParams

    def setPathManagerParams(self, newPathManagerParams):
        self.pathManagerParams = newPathManagerParams

    def getTrigger(self):
        return self.trigger

    def setTrigger(self, newTrigger):
        self.trigger = newTrigger

    def getDeliveryPriority(self):
        return self.deliveryPriority

    def setDeliveryPriority(self, newDeliveryPriority):
        self.deliveryPriority = newDeliveryPriority

    def getDeliveryStatus(self):
        return self.deliveryStatus

    def setDeliveryStatus(self, newDeliveryStatus):
        self.deliveryStatus = newDeliveryStatus

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getAllowAutoDelete(self):
        return self.allowAutoDelete

    def setAllowAutoDelete(self, newAllowAutoDelete):
        self.allowAutoDelete = newAllowAutoDelete

    def getCreateFileLink(self):
        return self.createFileLink

    def setCreateFileLink(self, newCreateFileLink):
        self.createFileLink = newCreateFileLink

    def getRules(self):
        return self.rules

    def setRules(self, newRules):
        self.rules = newRules

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getPassPhrase(self):
        return self.passPhrase

    def setPassPhrase(self, newPassPhrase):
        self.passPhrase = newPassPhrase


# @package Kaltura
# @subpackage Client
class KalturaSyndicationFeedEntryCount(KalturaObjectBase):
    def __init__(self,
            totalEntryCount=NotImplemented,
            actualEntryCount=NotImplemented,
            requireTranscodingCount=NotImplemented):
        KalturaObjectBase.__init__(self)

        # the total count of entries that should appear in the feed without flavor filtering
        # @var int
        self.totalEntryCount = totalEntryCount

        # count of entries that will appear in the feed (including all relevant filters)
        # @var int
        self.actualEntryCount = actualEntryCount

        # count of entries that requires transcoding in order to be included in feed
        # @var int
        self.requireTranscodingCount = requireTranscodingCount


    PROPERTY_LOADERS = {
        'totalEntryCount': getXmlNodeInt, 
        'actualEntryCount': getXmlNodeInt, 
        'requireTranscodingCount': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSyndicationFeedEntryCount.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaSyndicationFeedEntryCount")
        kparams.addIntIfDefined("totalEntryCount", self.totalEntryCount)
        kparams.addIntIfDefined("actualEntryCount", self.actualEntryCount)
        kparams.addIntIfDefined("requireTranscodingCount", self.requireTranscodingCount)
        return kparams

    def getTotalEntryCount(self):
        return self.totalEntryCount

    def setTotalEntryCount(self, newTotalEntryCount):
        self.totalEntryCount = newTotalEntryCount

    def getActualEntryCount(self):
        return self.actualEntryCount

    def setActualEntryCount(self, newActualEntryCount):
        self.actualEntryCount = newActualEntryCount

    def getRequireTranscodingCount(self):
        return self.requireTranscodingCount

    def setRequireTranscodingCount(self, newRequireTranscodingCount):
        self.requireTranscodingCount = newRequireTranscodingCount


# @package Kaltura
# @subpackage Client
class KalturaThumbAsset(KalturaAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            thumbParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            status=NotImplemented):
        KalturaAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds)

        # The Flavor Params used to create this Flavor Asset
        # @var int
        # @insertonly
        self.thumbParamsId = thumbParamsId

        # The width of the Flavor Asset
        # @var int
        # @readonly
        self.width = width

        # The height of the Flavor Asset
        # @var int
        # @readonly
        self.height = height

        # The status of the asset
        # @var KalturaThumbAssetStatus
        # @readonly
        self.status = status


    PROPERTY_LOADERS = {
        'thumbParamsId': getXmlNodeInt, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaThumbAssetStatus"), 
    }

    def fromXml(self, node):
        KalturaAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAsset.toParams(self)
        kparams.put("objectType", "KalturaThumbAsset")
        kparams.addIntIfDefined("thumbParamsId", self.thumbParamsId)
        return kparams

    def getThumbParamsId(self):
        return self.thumbParamsId

    def setThumbParamsId(self, newThumbParamsId):
        self.thumbParamsId = newThumbParamsId

    def getWidth(self):
        return self.width

    def getHeight(self):
        return self.height

    def getStatus(self):
        return self.status


# @package Kaltura
# @subpackage Client
class KalturaThumbParams(KalturaAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            cropType=NotImplemented,
            quality=NotImplemented,
            cropX=NotImplemented,
            cropY=NotImplemented,
            cropWidth=NotImplemented,
            cropHeight=NotImplemented,
            videoOffset=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            scaleWidth=NotImplemented,
            scaleHeight=NotImplemented,
            backgroundColor=NotImplemented,
            sourceParamsId=NotImplemented,
            format=NotImplemented,
            density=NotImplemented,
            stripProfiles=NotImplemented,
            videoOffsetInPercentage=NotImplemented):
        KalturaAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # @var KalturaThumbCropType
        self.cropType = cropType

        # @var int
        self.quality = quality

        # @var int
        self.cropX = cropX

        # @var int
        self.cropY = cropY

        # @var int
        self.cropWidth = cropWidth

        # @var int
        self.cropHeight = cropHeight

        # @var float
        self.videoOffset = videoOffset

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var float
        self.scaleWidth = scaleWidth

        # @var float
        self.scaleHeight = scaleHeight

        # Hexadecimal value
        # @var string
        self.backgroundColor = backgroundColor

        # Id of the flavor params or the thumbnail params to be used as source for the thumbnail creation
        # @var int
        self.sourceParamsId = sourceParamsId

        # The container format of the Flavor Params
        # @var KalturaContainerFormat
        self.format = format

        # The image density (dpi) for example: 72 or 96
        # @var int
        self.density = density

        # Strip profiles and comments
        # @var bool
        self.stripProfiles = stripProfiles

        # Create thumbnail from the videoLengthpercentage second
        # @var int
        self.videoOffsetInPercentage = videoOffsetInPercentage


    PROPERTY_LOADERS = {
        'cropType': (KalturaEnumsFactory.createInt, "KalturaThumbCropType"), 
        'quality': getXmlNodeInt, 
        'cropX': getXmlNodeInt, 
        'cropY': getXmlNodeInt, 
        'cropWidth': getXmlNodeInt, 
        'cropHeight': getXmlNodeInt, 
        'videoOffset': getXmlNodeFloat, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'scaleWidth': getXmlNodeFloat, 
        'scaleHeight': getXmlNodeFloat, 
        'backgroundColor': getXmlNodeText, 
        'sourceParamsId': getXmlNodeInt, 
        'format': (KalturaEnumsFactory.createString, "KalturaContainerFormat"), 
        'density': getXmlNodeInt, 
        'stripProfiles': getXmlNodeBool, 
        'videoOffsetInPercentage': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParams.toParams(self)
        kparams.put("objectType", "KalturaThumbParams")
        kparams.addIntEnumIfDefined("cropType", self.cropType)
        kparams.addIntIfDefined("quality", self.quality)
        kparams.addIntIfDefined("cropX", self.cropX)
        kparams.addIntIfDefined("cropY", self.cropY)
        kparams.addIntIfDefined("cropWidth", self.cropWidth)
        kparams.addIntIfDefined("cropHeight", self.cropHeight)
        kparams.addFloatIfDefined("videoOffset", self.videoOffset)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addFloatIfDefined("scaleWidth", self.scaleWidth)
        kparams.addFloatIfDefined("scaleHeight", self.scaleHeight)
        kparams.addStringIfDefined("backgroundColor", self.backgroundColor)
        kparams.addIntIfDefined("sourceParamsId", self.sourceParamsId)
        kparams.addStringEnumIfDefined("format", self.format)
        kparams.addIntIfDefined("density", self.density)
        kparams.addBoolIfDefined("stripProfiles", self.stripProfiles)
        kparams.addIntIfDefined("videoOffsetInPercentage", self.videoOffsetInPercentage)
        return kparams

    def getCropType(self):
        return self.cropType

    def setCropType(self, newCropType):
        self.cropType = newCropType

    def getQuality(self):
        return self.quality

    def setQuality(self, newQuality):
        self.quality = newQuality

    def getCropX(self):
        return self.cropX

    def setCropX(self, newCropX):
        self.cropX = newCropX

    def getCropY(self):
        return self.cropY

    def setCropY(self, newCropY):
        self.cropY = newCropY

    def getCropWidth(self):
        return self.cropWidth

    def setCropWidth(self, newCropWidth):
        self.cropWidth = newCropWidth

    def getCropHeight(self):
        return self.cropHeight

    def setCropHeight(self, newCropHeight):
        self.cropHeight = newCropHeight

    def getVideoOffset(self):
        return self.videoOffset

    def setVideoOffset(self, newVideoOffset):
        self.videoOffset = newVideoOffset

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getScaleWidth(self):
        return self.scaleWidth

    def setScaleWidth(self, newScaleWidth):
        self.scaleWidth = newScaleWidth

    def getScaleHeight(self):
        return self.scaleHeight

    def setScaleHeight(self, newScaleHeight):
        self.scaleHeight = newScaleHeight

    def getBackgroundColor(self):
        return self.backgroundColor

    def setBackgroundColor(self, newBackgroundColor):
        self.backgroundColor = newBackgroundColor

    def getSourceParamsId(self):
        return self.sourceParamsId

    def setSourceParamsId(self, newSourceParamsId):
        self.sourceParamsId = newSourceParamsId

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat

    def getDensity(self):
        return self.density

    def setDensity(self, newDensity):
        self.density = newDensity

    def getStripProfiles(self):
        return self.stripProfiles

    def setStripProfiles(self, newStripProfiles):
        self.stripProfiles = newStripProfiles

    def getVideoOffsetInPercentage(self):
        return self.videoOffsetInPercentage

    def setVideoOffsetInPercentage(self, newVideoOffsetInPercentage):
        self.videoOffsetInPercentage = newVideoOffsetInPercentage


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutput(KalturaThumbParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            cropType=NotImplemented,
            quality=NotImplemented,
            cropX=NotImplemented,
            cropY=NotImplemented,
            cropWidth=NotImplemented,
            cropHeight=NotImplemented,
            videoOffset=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            scaleWidth=NotImplemented,
            scaleHeight=NotImplemented,
            backgroundColor=NotImplemented,
            sourceParamsId=NotImplemented,
            format=NotImplemented,
            density=NotImplemented,
            stripProfiles=NotImplemented,
            videoOffsetInPercentage=NotImplemented,
            thumbParamsId=NotImplemented,
            thumbParamsVersion=NotImplemented,
            thumbAssetId=NotImplemented,
            thumbAssetVersion=NotImplemented,
            rotate=NotImplemented):
        KalturaThumbParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            cropType,
            quality,
            cropX,
            cropY,
            cropWidth,
            cropHeight,
            videoOffset,
            width,
            height,
            scaleWidth,
            scaleHeight,
            backgroundColor,
            sourceParamsId,
            format,
            density,
            stripProfiles,
            videoOffsetInPercentage)

        # @var int
        self.thumbParamsId = thumbParamsId

        # @var string
        self.thumbParamsVersion = thumbParamsVersion

        # @var string
        self.thumbAssetId = thumbAssetId

        # @var string
        self.thumbAssetVersion = thumbAssetVersion

        # @var int
        self.rotate = rotate


    PROPERTY_LOADERS = {
        'thumbParamsId': getXmlNodeInt, 
        'thumbParamsVersion': getXmlNodeText, 
        'thumbAssetId': getXmlNodeText, 
        'thumbAssetVersion': getXmlNodeText, 
        'rotate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaThumbParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaThumbParams.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsOutput")
        kparams.addIntIfDefined("thumbParamsId", self.thumbParamsId)
        kparams.addStringIfDefined("thumbParamsVersion", self.thumbParamsVersion)
        kparams.addStringIfDefined("thumbAssetId", self.thumbAssetId)
        kparams.addStringIfDefined("thumbAssetVersion", self.thumbAssetVersion)
        kparams.addIntIfDefined("rotate", self.rotate)
        return kparams

    def getThumbParamsId(self):
        return self.thumbParamsId

    def setThumbParamsId(self, newThumbParamsId):
        self.thumbParamsId = newThumbParamsId

    def getThumbParamsVersion(self):
        return self.thumbParamsVersion

    def setThumbParamsVersion(self, newThumbParamsVersion):
        self.thumbParamsVersion = newThumbParamsVersion

    def getThumbAssetId(self):
        return self.thumbAssetId

    def setThumbAssetId(self, newThumbAssetId):
        self.thumbAssetId = newThumbAssetId

    def getThumbAssetVersion(self):
        return self.thumbAssetVersion

    def setThumbAssetVersion(self, newThumbAssetVersion):
        self.thumbAssetVersion = newThumbAssetVersion

    def getRotate(self):
        return self.rotate

    def setRotate(self, newRotate):
        self.rotate = newRotate


# @package Kaltura
# @subpackage Client
class KalturaThumbnailServeOptions(KalturaObjectBase):
    def __init__(self,
            download=NotImplemented,
            referrer=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var bool
        self.download = download

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'download': getXmlNodeBool, 
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbnailServeOptions.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaThumbnailServeOptions")
        kparams.addBoolIfDefined("download", self.download)
        kparams.addStringIfDefined("referrer", self.referrer)
        return kparams

    def getDownload(self):
        return self.download

    def setDownload(self, newDownload):
        self.download = newDownload

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Kaltura
# @subpackage Client
class KalturaUiConf(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            objType=NotImplemented,
            objTypeAsString=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            htmlParams=NotImplemented,
            swfUrl=NotImplemented,
            confFilePath=NotImplemented,
            confFile=NotImplemented,
            confFileFeatures=NotImplemented,
            config=NotImplemented,
            confVars=NotImplemented,
            useCdn=NotImplemented,
            tags=NotImplemented,
            swfUrlVersion=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            creationMode=NotImplemented,
            html5Url=NotImplemented,
            version=NotImplemented,
            partnerTags=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # Name of the uiConf, this is not a primary key
        # @var string
        self.name = name

        # @var string
        self.description = description

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var KalturaUiConfObjType
        self.objType = objType

        # @var string
        # @readonly
        self.objTypeAsString = objTypeAsString

        # @var int
        self.width = width

        # @var int
        self.height = height

        # @var string
        self.htmlParams = htmlParams

        # @var string
        self.swfUrl = swfUrl

        # @var string
        # @readonly
        self.confFilePath = confFilePath

        # @var string
        self.confFile = confFile

        # @var string
        self.confFileFeatures = confFileFeatures

        # @var string
        self.config = config

        # @var string
        self.confVars = confVars

        # @var bool
        self.useCdn = useCdn

        # @var string
        self.tags = tags

        # @var string
        self.swfUrlVersion = swfUrlVersion

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Entry creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaUiConfCreationMode
        self.creationMode = creationMode

        # @var string
        self.html5Url = html5Url

        # UiConf version
        # @var string
        # @readonly
        self.version = version

        # @var string
        self.partnerTags = partnerTags


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'description': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'objType': (KalturaEnumsFactory.createInt, "KalturaUiConfObjType"), 
        'objTypeAsString': getXmlNodeText, 
        'width': getXmlNodeInt, 
        'height': getXmlNodeInt, 
        'htmlParams': getXmlNodeText, 
        'swfUrl': getXmlNodeText, 
        'confFilePath': getXmlNodeText, 
        'confFile': getXmlNodeText, 
        'confFileFeatures': getXmlNodeText, 
        'config': getXmlNodeText, 
        'confVars': getXmlNodeText, 
        'useCdn': getXmlNodeBool, 
        'tags': getXmlNodeText, 
        'swfUrlVersion': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'creationMode': (KalturaEnumsFactory.createInt, "KalturaUiConfCreationMode"), 
        'html5Url': getXmlNodeText, 
        'version': getXmlNodeText, 
        'partnerTags': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUiConf.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUiConf")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("objType", self.objType)
        kparams.addIntIfDefined("width", self.width)
        kparams.addIntIfDefined("height", self.height)
        kparams.addStringIfDefined("htmlParams", self.htmlParams)
        kparams.addStringIfDefined("swfUrl", self.swfUrl)
        kparams.addStringIfDefined("confFile", self.confFile)
        kparams.addStringIfDefined("confFileFeatures", self.confFileFeatures)
        kparams.addStringIfDefined("config", self.config)
        kparams.addStringIfDefined("confVars", self.confVars)
        kparams.addBoolIfDefined("useCdn", self.useCdn)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("swfUrlVersion", self.swfUrlVersion)
        kparams.addIntEnumIfDefined("creationMode", self.creationMode)
        kparams.addStringIfDefined("html5Url", self.html5Url)
        kparams.addStringIfDefined("partnerTags", self.partnerTags)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getPartnerId(self):
        return self.partnerId

    def getObjType(self):
        return self.objType

    def setObjType(self, newObjType):
        self.objType = newObjType

    def getObjTypeAsString(self):
        return self.objTypeAsString

    def getWidth(self):
        return self.width

    def setWidth(self, newWidth):
        self.width = newWidth

    def getHeight(self):
        return self.height

    def setHeight(self, newHeight):
        self.height = newHeight

    def getHtmlParams(self):
        return self.htmlParams

    def setHtmlParams(self, newHtmlParams):
        self.htmlParams = newHtmlParams

    def getSwfUrl(self):
        return self.swfUrl

    def setSwfUrl(self, newSwfUrl):
        self.swfUrl = newSwfUrl

    def getConfFilePath(self):
        return self.confFilePath

    def getConfFile(self):
        return self.confFile

    def setConfFile(self, newConfFile):
        self.confFile = newConfFile

    def getConfFileFeatures(self):
        return self.confFileFeatures

    def setConfFileFeatures(self, newConfFileFeatures):
        self.confFileFeatures = newConfFileFeatures

    def getConfig(self):
        return self.config

    def setConfig(self, newConfig):
        self.config = newConfig

    def getConfVars(self):
        return self.confVars

    def setConfVars(self, newConfVars):
        self.confVars = newConfVars

    def getUseCdn(self):
        return self.useCdn

    def setUseCdn(self, newUseCdn):
        self.useCdn = newUseCdn

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getSwfUrlVersion(self):
        return self.swfUrlVersion

    def setSwfUrlVersion(self, newSwfUrlVersion):
        self.swfUrlVersion = newSwfUrlVersion

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getCreationMode(self):
        return self.creationMode

    def setCreationMode(self, newCreationMode):
        self.creationMode = newCreationMode

    def getHtml5Url(self):
        return self.html5Url

    def setHtml5Url(self, newHtml5Url):
        self.html5Url = newHtml5Url

    def getVersion(self):
        return self.version

    def getPartnerTags(self):
        return self.partnerTags

    def setPartnerTags(self, newPartnerTags):
        self.partnerTags = newPartnerTags


# @package Kaltura
# @subpackage Client
class KalturaUiConfTypeInfo(KalturaObjectBase):
    """Info about uiconf type"""

    def __init__(self,
            type=NotImplemented,
            versions=NotImplemented,
            directory=NotImplemented,
            filename=NotImplemented):
        KalturaObjectBase.__init__(self)

        # UiConf Type
        # @var KalturaUiConfObjType
        self.type = type

        # Available versions
        # @var array of KalturaString
        self.versions = versions

        # The direcotry this type is saved at
        # @var string
        self.directory = directory

        # Filename for this UiConf type
        # @var string
        self.filename = filename


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createInt, "KalturaUiConfObjType"), 
        'versions': (KalturaObjectFactory.createArray, KalturaString), 
        'directory': getXmlNodeText, 
        'filename': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUiConfTypeInfo.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUiConfTypeInfo")
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addArrayIfDefined("versions", self.versions)
        kparams.addStringIfDefined("directory", self.directory)
        kparams.addStringIfDefined("filename", self.filename)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getVersions(self):
        return self.versions

    def setVersions(self, newVersions):
        self.versions = newVersions

    def getDirectory(self):
        return self.directory

    def setDirectory(self, newDirectory):
        self.directory = newDirectory

    def getFilename(self):
        return self.filename

    def setFilename(self, newFilename):
        self.filename = newFilename


# @package Kaltura
# @subpackage Client
class KalturaUploadResponse(KalturaObjectBase):
    def __init__(self,
            uploadTokenId=NotImplemented,
            fileSize=NotImplemented,
            errorCode=NotImplemented,
            errorDescription=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.uploadTokenId = uploadTokenId

        # @var int
        self.fileSize = fileSize

        # @var KalturaUploadErrorCode
        self.errorCode = errorCode

        # @var string
        self.errorDescription = errorDescription


    PROPERTY_LOADERS = {
        'uploadTokenId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
        'errorCode': (KalturaEnumsFactory.createInt, "KalturaUploadErrorCode"), 
        'errorDescription': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUploadResponse")
        kparams.addStringIfDefined("uploadTokenId", self.uploadTokenId)
        kparams.addIntIfDefined("fileSize", self.fileSize)
        kparams.addIntEnumIfDefined("errorCode", self.errorCode)
        kparams.addStringIfDefined("errorDescription", self.errorDescription)
        return kparams

    def getUploadTokenId(self):
        return self.uploadTokenId

    def setUploadTokenId(self, newUploadTokenId):
        self.uploadTokenId = newUploadTokenId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getErrorCode(self):
        return self.errorCode

    def setErrorCode(self, newErrorCode):
        self.errorCode = newErrorCode

    def getErrorDescription(self):
        return self.errorDescription

    def setErrorDescription(self, newErrorDescription):
        self.errorDescription = newErrorDescription


# @package Kaltura
# @subpackage Client
class KalturaUploadToken(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            status=NotImplemented,
            fileName=NotImplemented,
            fileSize=NotImplemented,
            uploadedFileSize=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # Upload token unique ID
        # @var string
        # @readonly
        self.id = id

        # Partner ID of the upload token
        # @var int
        # @readonly
        self.partnerId = partnerId

        # User id for the upload token
        # @var string
        # @readonly
        self.userId = userId

        # Status of the upload token
        # @var KalturaUploadTokenStatus
        # @readonly
        self.status = status

        # Name of the file for the upload token, can be empty when the upload token is created and will be updated internally after the file is uploaded
        # @var string
        # @insertonly
        self.fileName = fileName

        # File size in bytes, can be empty when the upload token is created and will be updated internally after the file is uploaded
        # @var float
        # @insertonly
        self.fileSize = fileSize

        # Uploaded file size in bytes, can be used to identify how many bytes were uploaded before resuming
        # @var float
        # @readonly
        self.uploadedFileSize = uploadedFileSize

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'userId': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaUploadTokenStatus"), 
        'fileName': getXmlNodeText, 
        'fileSize': getXmlNodeFloat, 
        'uploadedFileSize': getXmlNodeFloat, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadToken.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUploadToken")
        kparams.addStringIfDefined("fileName", self.fileName)
        kparams.addFloatIfDefined("fileSize", self.fileSize)
        return kparams

    def getId(self):
        return self.id

    def getPartnerId(self):
        return self.partnerId

    def getUserId(self):
        return self.userId

    def getStatus(self):
        return self.status

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize

    def getUploadedFileSize(self):
        return self.uploadedFileSize

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaUser(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            type=NotImplemented,
            screenName=NotImplemented,
            fullName=NotImplemented,
            email=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            thumbnailUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            gender=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            indexedPartnerDataInt=NotImplemented,
            indexedPartnerDataString=NotImplemented,
            storageSize=NotImplemented,
            password=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            isAdmin=NotImplemented,
            language=NotImplemented,
            lastLoginTime=NotImplemented,
            statusUpdatedAt=NotImplemented,
            deletedAt=NotImplemented,
            loginEnabled=NotImplemented,
            roleIds=NotImplemented,
            roleNames=NotImplemented,
            isAccountOwner=NotImplemented,
            allowedPartnerIds=NotImplemented,
            allowedPartnerPackages=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var KalturaUserType
        self.type = type

        # @var string
        self.screenName = screenName

        # @var string
        self.fullName = fullName

        # @var string
        self.email = email

        # @var int
        self.dateOfBirth = dateOfBirth

        # @var string
        self.country = country

        # @var string
        self.state = state

        # @var string
        self.city = city

        # @var string
        self.zip = zip

        # @var string
        self.thumbnailUrl = thumbnailUrl

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # Admin tags can be updated only by using an admin session
        # @var string
        self.adminTags = adminTags

        # @var KalturaGender
        self.gender = gender

        # @var KalturaUserStatus
        self.status = status

        # Creation date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.createdAt = createdAt

        # Last update date as Unix timestamp (In seconds)
        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # @var int
        self.indexedPartnerDataInt = indexedPartnerDataInt

        # @var string
        self.indexedPartnerDataString = indexedPartnerDataString

        # @var int
        # @readonly
        self.storageSize = storageSize

        # @var string
        # @insertonly
        self.password = password

        # @var string
        self.firstName = firstName

        # @var string
        self.lastName = lastName

        # @var bool
        self.isAdmin = isAdmin

        # @var KalturaLanguageCode
        self.language = language

        # @var int
        # @readonly
        self.lastLoginTime = lastLoginTime

        # @var int
        # @readonly
        self.statusUpdatedAt = statusUpdatedAt

        # @var int
        # @readonly
        self.deletedAt = deletedAt

        # @var bool
        # @readonly
        self.loginEnabled = loginEnabled

        # @var string
        self.roleIds = roleIds

        # @var string
        # @readonly
        self.roleNames = roleNames

        # @var bool
        # @readonly
        self.isAccountOwner = isAccountOwner

        # @var string
        self.allowedPartnerIds = allowedPartnerIds

        # @var string
        self.allowedPartnerPackages = allowedPartnerPackages


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createInt, "KalturaUserType"), 
        'screenName': getXmlNodeText, 
        'fullName': getXmlNodeText, 
        'email': getXmlNodeText, 
        'dateOfBirth': getXmlNodeInt, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'city': getXmlNodeText, 
        'zip': getXmlNodeText, 
        'thumbnailUrl': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'adminTags': getXmlNodeText, 
        'gender': (KalturaEnumsFactory.createInt, "KalturaGender"), 
        'status': (KalturaEnumsFactory.createInt, "KalturaUserStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'indexedPartnerDataInt': getXmlNodeInt, 
        'indexedPartnerDataString': getXmlNodeText, 
        'storageSize': getXmlNodeInt, 
        'password': getXmlNodeText, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
        'isAdmin': getXmlNodeBool, 
        'language': (KalturaEnumsFactory.createString, "KalturaLanguageCode"), 
        'lastLoginTime': getXmlNodeInt, 
        'statusUpdatedAt': getXmlNodeInt, 
        'deletedAt': getXmlNodeInt, 
        'loginEnabled': getXmlNodeBool, 
        'roleIds': getXmlNodeText, 
        'roleNames': getXmlNodeText, 
        'isAccountOwner': getXmlNodeBool, 
        'allowedPartnerIds': getXmlNodeText, 
        'allowedPartnerPackages': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUser")
        kparams.addStringIfDefined("id", self.id)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("screenName", self.screenName)
        kparams.addStringIfDefined("fullName", self.fullName)
        kparams.addStringIfDefined("email", self.email)
        kparams.addIntIfDefined("dateOfBirth", self.dateOfBirth)
        kparams.addStringIfDefined("country", self.country)
        kparams.addStringIfDefined("state", self.state)
        kparams.addStringIfDefined("city", self.city)
        kparams.addStringIfDefined("zip", self.zip)
        kparams.addStringIfDefined("thumbnailUrl", self.thumbnailUrl)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("adminTags", self.adminTags)
        kparams.addIntEnumIfDefined("gender", self.gender)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addIntIfDefined("indexedPartnerDataInt", self.indexedPartnerDataInt)
        kparams.addStringIfDefined("indexedPartnerDataString", self.indexedPartnerDataString)
        kparams.addStringIfDefined("password", self.password)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        kparams.addBoolIfDefined("isAdmin", self.isAdmin)
        kparams.addStringEnumIfDefined("language", self.language)
        kparams.addStringIfDefined("roleIds", self.roleIds)
        kparams.addStringIfDefined("allowedPartnerIds", self.allowedPartnerIds)
        kparams.addStringIfDefined("allowedPartnerPackages", self.allowedPartnerPackages)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getPartnerId(self):
        return self.partnerId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getScreenName(self):
        return self.screenName

    def setScreenName(self, newScreenName):
        self.screenName = newScreenName

    def getFullName(self):
        return self.fullName

    def setFullName(self, newFullName):
        self.fullName = newFullName

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getDateOfBirth(self):
        return self.dateOfBirth

    def setDateOfBirth(self, newDateOfBirth):
        self.dateOfBirth = newDateOfBirth

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getZip(self):
        return self.zip

    def setZip(self, newZip):
        self.zip = newZip

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def setThumbnailUrl(self, newThumbnailUrl):
        self.thumbnailUrl = newThumbnailUrl

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAdminTags(self):
        return self.adminTags

    def setAdminTags(self, newAdminTags):
        self.adminTags = newAdminTags

    def getGender(self):
        return self.gender

    def setGender(self, newGender):
        self.gender = newGender

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getIndexedPartnerDataInt(self):
        return self.indexedPartnerDataInt

    def setIndexedPartnerDataInt(self, newIndexedPartnerDataInt):
        self.indexedPartnerDataInt = newIndexedPartnerDataInt

    def getIndexedPartnerDataString(self):
        return self.indexedPartnerDataString

    def setIndexedPartnerDataString(self, newIndexedPartnerDataString):
        self.indexedPartnerDataString = newIndexedPartnerDataString

    def getStorageSize(self):
        return self.storageSize

    def getPassword(self):
        return self.password

    def setPassword(self, newPassword):
        self.password = newPassword

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName

    def getIsAdmin(self):
        return self.isAdmin

    def setIsAdmin(self, newIsAdmin):
        self.isAdmin = newIsAdmin

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getLastLoginTime(self):
        return self.lastLoginTime

    def getStatusUpdatedAt(self):
        return self.statusUpdatedAt

    def getDeletedAt(self):
        return self.deletedAt

    def getLoginEnabled(self):
        return self.loginEnabled

    def getRoleIds(self):
        return self.roleIds

    def setRoleIds(self, newRoleIds):
        self.roleIds = newRoleIds

    def getRoleNames(self):
        return self.roleNames

    def getIsAccountOwner(self):
        return self.isAccountOwner

    def getAllowedPartnerIds(self):
        return self.allowedPartnerIds

    def setAllowedPartnerIds(self, newAllowedPartnerIds):
        self.allowedPartnerIds = newAllowedPartnerIds

    def getAllowedPartnerPackages(self):
        return self.allowedPartnerPackages

    def setAllowedPartnerPackages(self, newAllowedPartnerPackages):
        self.allowedPartnerPackages = newAllowedPartnerPackages


# @package Kaltura
# @subpackage Client
class KalturaUserEntry(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            type=NotImplemented):
        KalturaObjectBase.__init__(self)

        # unique auto-generated identifier
        # @var int
        # @readonly
        self.id = id

        # @var string
        # @insertonly
        self.entryId = entryId

        # @var string
        # @insertonly
        self.userId = userId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var KalturaUserEntryStatus
        # @readonly
        self.status = status

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # @var KalturaUserEntryType
        # @readonly
        self.type = type


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'userId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createString, "KalturaUserEntryStatus"), 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'type': (KalturaEnumsFactory.createString, "KalturaUserEntryType"), 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserEntry")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("userId", self.userId)
        return kparams

    def getId(self):
        return self.id

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPartnerId(self):
        return self.partnerId

    def getStatus(self):
        return self.status

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getType(self):
        return self.type


# @package Kaltura
# @subpackage Client
class KalturaUserLoginData(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            loginEmail=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        self.id = id

        # @var string
        self.loginEmail = loginEmail


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'loginEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserLoginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserLoginData")
        kparams.addStringIfDefined("id", self.id)
        kparams.addStringIfDefined("loginEmail", self.loginEmail)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getLoginEmail(self):
        return self.loginEmail

    def setLoginEmail(self, newLoginEmail):
        self.loginEmail = newLoginEmail


# @package Kaltura
# @subpackage Client
class KalturaUserRole(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            status=NotImplemented,
            partnerId=NotImplemented,
            permissionNames=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var int
        # @readonly
        self.id = id

        # @var string
        self.name = name

        # @var string
        self.systemName = systemName

        # @var string
        self.description = description

        # @var KalturaUserRoleStatus
        self.status = status

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.permissionNames = permissionNames

        # @var string
        self.tags = tags

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'name': getXmlNodeText, 
        'systemName': getXmlNodeText, 
        'description': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaUserRoleStatus"), 
        'partnerId': getXmlNodeInt, 
        'permissionNames': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRole.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaUserRole")
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("systemName", self.systemName)
        kparams.addStringIfDefined("description", self.description)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("permissionNames", self.permissionNames)
        kparams.addStringIfDefined("tags", self.tags)
        return kparams

    def getId(self):
        return self.id

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getPartnerId(self):
        return self.partnerId

    def getPermissionNames(self):
        return self.permissionNames

    def setPermissionNames(self, newPermissionNames):
        self.permissionNames = newPermissionNames

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt


# @package Kaltura
# @subpackage Client
class KalturaWidget(KalturaObjectBase):
    def __init__(self,
            id=NotImplemented,
            sourceWidgetId=NotImplemented,
            rootWidgetId=NotImplemented,
            partnerId=NotImplemented,
            entryId=NotImplemented,
            uiConfId=NotImplemented,
            securityType=NotImplemented,
            securityPolicy=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            widgetHTML=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            addEmbedHtml5Support=NotImplemented,
            roles=NotImplemented):
        KalturaObjectBase.__init__(self)

        # @var string
        # @readonly
        self.id = id

        # @var string
        self.sourceWidgetId = sourceWidgetId

        # @var string
        # @readonly
        self.rootWidgetId = rootWidgetId

        # @var int
        # @readonly
        self.partnerId = partnerId

        # @var string
        self.entryId = entryId

        # @var int
        self.uiConfId = uiConfId

        # @var KalturaWidgetSecurityType
        self.securityType = securityType

        # @var int
        self.securityPolicy = securityPolicy

        # @var int
        # @readonly
        self.createdAt = createdAt

        # @var int
        # @readonly
        self.updatedAt = updatedAt

        # Can be used to store various partner related data as a string
        # @var string
        self.partnerData = partnerData

        # @var string
        # @readonly
        self.widgetHTML = widgetHTML

        # Should enforce entitlement on feed entries
        # @var bool
        self.enforceEntitlement = enforceEntitlement

        # Set privacy context for search entries that assiged to private and public categories within a category privacy context.
        # @var string
        self.privacyContext = privacyContext

        # Addes the HTML5 script line to the widget's embed code
        # @var bool
        self.addEmbedHtml5Support = addEmbedHtml5Support

        # @var string
        self.roles = roles


    PROPERTY_LOADERS = {
        'id': getXmlNodeText, 
        'sourceWidgetId': getXmlNodeText, 
        'rootWidgetId': getXmlNodeText, 
        'partnerId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
        'uiConfId': getXmlNodeInt, 
        'securityType': (KalturaEnumsFactory.createInt, "KalturaWidgetSecurityType"), 
        'securityPolicy': getXmlNodeInt, 
        'createdAt': getXmlNodeInt, 
        'updatedAt': getXmlNodeInt, 
        'partnerData': getXmlNodeText, 
        'widgetHTML': getXmlNodeText, 
        'enforceEntitlement': getXmlNodeBool, 
        'privacyContext': getXmlNodeText, 
        'addEmbedHtml5Support': getXmlNodeBool, 
        'roles': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaObjectBase.fromXml(self, node)
        self.fromXmlImpl(node, KalturaWidget.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectBase.toParams(self)
        kparams.put("objectType", "KalturaWidget")
        kparams.addStringIfDefined("sourceWidgetId", self.sourceWidgetId)
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntIfDefined("uiConfId", self.uiConfId)
        kparams.addIntEnumIfDefined("securityType", self.securityType)
        kparams.addIntIfDefined("securityPolicy", self.securityPolicy)
        kparams.addStringIfDefined("partnerData", self.partnerData)
        kparams.addBoolIfDefined("enforceEntitlement", self.enforceEntitlement)
        kparams.addStringIfDefined("privacyContext", self.privacyContext)
        kparams.addBoolIfDefined("addEmbedHtml5Support", self.addEmbedHtml5Support)
        kparams.addStringIfDefined("roles", self.roles)
        return kparams

    def getId(self):
        return self.id

    def getSourceWidgetId(self):
        return self.sourceWidgetId

    def setSourceWidgetId(self, newSourceWidgetId):
        self.sourceWidgetId = newSourceWidgetId

    def getRootWidgetId(self):
        return self.rootWidgetId

    def getPartnerId(self):
        return self.partnerId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getUiConfId(self):
        return self.uiConfId

    def setUiConfId(self, newUiConfId):
        self.uiConfId = newUiConfId

    def getSecurityType(self):
        return self.securityType

    def setSecurityType(self, newSecurityType):
        self.securityType = newSecurityType

    def getSecurityPolicy(self):
        return self.securityPolicy

    def setSecurityPolicy(self, newSecurityPolicy):
        self.securityPolicy = newSecurityPolicy

    def getCreatedAt(self):
        return self.createdAt

    def getUpdatedAt(self):
        return self.updatedAt

    def getPartnerData(self):
        return self.partnerData

    def setPartnerData(self, newPartnerData):
        self.partnerData = newPartnerData

    def getWidgetHTML(self):
        return self.widgetHTML

    def getEnforceEntitlement(self):
        return self.enforceEntitlement

    def setEnforceEntitlement(self, newEnforceEntitlement):
        self.enforceEntitlement = newEnforceEntitlement

    def getPrivacyContext(self):
        return self.privacyContext

    def setPrivacyContext(self, newPrivacyContext):
        self.privacyContext = newPrivacyContext

    def getAddEmbedHtml5Support(self):
        return self.addEmbedHtml5Support

    def setAddEmbedHtml5Support(self, newAddEmbedHtml5Support):
        self.addEmbedHtml5Support = newAddEmbedHtml5Support

    def getRoles(self):
        return self.roles

    def setRoles(self, newRoles):
        self.roles = newRoles


# @package Kaltura
# @subpackage Client
class KalturaBatchJobBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var int
        self.idGreaterThanOrEqual = idGreaterThanOrEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.partnerIdNotIn = partnerIdNotIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.executionAttemptsGreaterThanOrEqual = executionAttemptsGreaterThanOrEqual

        # @var int
        self.executionAttemptsLessThanOrEqual = executionAttemptsLessThanOrEqual

        # @var int
        self.lockVersionGreaterThanOrEqual = lockVersionGreaterThanOrEqual

        # @var int
        self.lockVersionLessThanOrEqual = lockVersionLessThanOrEqual

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var KalturaBatchJobType
        self.jobTypeEqual = jobTypeEqual

        # @var string
        self.jobTypeIn = jobTypeIn

        # @var string
        self.jobTypeNotIn = jobTypeNotIn

        # @var int
        self.jobSubTypeEqual = jobSubTypeEqual

        # @var string
        self.jobSubTypeIn = jobSubTypeIn

        # @var string
        self.jobSubTypeNotIn = jobSubTypeNotIn

        # @var KalturaBatchJobStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn

        # @var int
        self.priorityGreaterThanOrEqual = priorityGreaterThanOrEqual

        # @var int
        self.priorityLessThanOrEqual = priorityLessThanOrEqual

        # @var int
        self.priorityEqual = priorityEqual

        # @var string
        self.priorityIn = priorityIn

        # @var string
        self.priorityNotIn = priorityNotIn

        # @var int
        self.batchVersionGreaterThanOrEqual = batchVersionGreaterThanOrEqual

        # @var int
        self.batchVersionLessThanOrEqual = batchVersionLessThanOrEqual

        # @var int
        self.batchVersionEqual = batchVersionEqual

        # @var int
        self.queueTimeGreaterThanOrEqual = queueTimeGreaterThanOrEqual

        # @var int
        self.queueTimeLessThanOrEqual = queueTimeLessThanOrEqual

        # @var int
        self.finishTimeGreaterThanOrEqual = finishTimeGreaterThanOrEqual

        # @var int
        self.finishTimeLessThanOrEqual = finishTimeLessThanOrEqual

        # @var KalturaBatchJobErrorTypes
        self.errTypeEqual = errTypeEqual

        # @var string
        self.errTypeIn = errTypeIn

        # @var string
        self.errTypeNotIn = errTypeNotIn

        # @var int
        self.errNumberEqual = errNumberEqual

        # @var string
        self.errNumberIn = errNumberIn

        # @var string
        self.errNumberNotIn = errNumberNotIn

        # @var int
        self.estimatedEffortLessThan = estimatedEffortLessThan

        # @var int
        self.estimatedEffortGreaterThan = estimatedEffortGreaterThan

        # @var int
        self.urgencyLessThanOrEqual = urgencyLessThanOrEqual

        # @var int
        self.urgencyGreaterThanOrEqual = urgencyGreaterThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idGreaterThanOrEqual': getXmlNodeInt, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'partnerIdNotIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'executionAttemptsGreaterThanOrEqual': getXmlNodeInt, 
        'executionAttemptsLessThanOrEqual': getXmlNodeInt, 
        'lockVersionGreaterThanOrEqual': getXmlNodeInt, 
        'lockVersionLessThanOrEqual': getXmlNodeInt, 
        'entryIdEqual': getXmlNodeText, 
        'jobTypeEqual': (KalturaEnumsFactory.createString, "KalturaBatchJobType"), 
        'jobTypeIn': getXmlNodeText, 
        'jobTypeNotIn': getXmlNodeText, 
        'jobSubTypeEqual': getXmlNodeInt, 
        'jobSubTypeIn': getXmlNodeText, 
        'jobSubTypeNotIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaBatchJobStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
        'priorityGreaterThanOrEqual': getXmlNodeInt, 
        'priorityLessThanOrEqual': getXmlNodeInt, 
        'priorityEqual': getXmlNodeInt, 
        'priorityIn': getXmlNodeText, 
        'priorityNotIn': getXmlNodeText, 
        'batchVersionGreaterThanOrEqual': getXmlNodeInt, 
        'batchVersionLessThanOrEqual': getXmlNodeInt, 
        'batchVersionEqual': getXmlNodeInt, 
        'queueTimeGreaterThanOrEqual': getXmlNodeInt, 
        'queueTimeLessThanOrEqual': getXmlNodeInt, 
        'finishTimeGreaterThanOrEqual': getXmlNodeInt, 
        'finishTimeLessThanOrEqual': getXmlNodeInt, 
        'errTypeEqual': (KalturaEnumsFactory.createInt, "KalturaBatchJobErrorTypes"), 
        'errTypeIn': getXmlNodeText, 
        'errTypeNotIn': getXmlNodeText, 
        'errNumberEqual': getXmlNodeInt, 
        'errNumberIn': getXmlNodeText, 
        'errNumberNotIn': getXmlNodeText, 
        'estimatedEffortLessThan': getXmlNodeInt, 
        'estimatedEffortGreaterThan': getXmlNodeInt, 
        'urgencyLessThanOrEqual': getXmlNodeInt, 
        'urgencyGreaterThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchJobBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBatchJobBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addIntIfDefined("idGreaterThanOrEqual", self.idGreaterThanOrEqual)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("partnerIdNotIn", self.partnerIdNotIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("executionAttemptsGreaterThanOrEqual", self.executionAttemptsGreaterThanOrEqual)
        kparams.addIntIfDefined("executionAttemptsLessThanOrEqual", self.executionAttemptsLessThanOrEqual)
        kparams.addIntIfDefined("lockVersionGreaterThanOrEqual", self.lockVersionGreaterThanOrEqual)
        kparams.addIntIfDefined("lockVersionLessThanOrEqual", self.lockVersionLessThanOrEqual)
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addStringEnumIfDefined("jobTypeEqual", self.jobTypeEqual)
        kparams.addStringIfDefined("jobTypeIn", self.jobTypeIn)
        kparams.addStringIfDefined("jobTypeNotIn", self.jobTypeNotIn)
        kparams.addIntIfDefined("jobSubTypeEqual", self.jobSubTypeEqual)
        kparams.addStringIfDefined("jobSubTypeIn", self.jobSubTypeIn)
        kparams.addStringIfDefined("jobSubTypeNotIn", self.jobSubTypeNotIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        kparams.addIntIfDefined("priorityGreaterThanOrEqual", self.priorityGreaterThanOrEqual)
        kparams.addIntIfDefined("priorityLessThanOrEqual", self.priorityLessThanOrEqual)
        kparams.addIntIfDefined("priorityEqual", self.priorityEqual)
        kparams.addStringIfDefined("priorityIn", self.priorityIn)
        kparams.addStringIfDefined("priorityNotIn", self.priorityNotIn)
        kparams.addIntIfDefined("batchVersionGreaterThanOrEqual", self.batchVersionGreaterThanOrEqual)
        kparams.addIntIfDefined("batchVersionLessThanOrEqual", self.batchVersionLessThanOrEqual)
        kparams.addIntIfDefined("batchVersionEqual", self.batchVersionEqual)
        kparams.addIntIfDefined("queueTimeGreaterThanOrEqual", self.queueTimeGreaterThanOrEqual)
        kparams.addIntIfDefined("queueTimeLessThanOrEqual", self.queueTimeLessThanOrEqual)
        kparams.addIntIfDefined("finishTimeGreaterThanOrEqual", self.finishTimeGreaterThanOrEqual)
        kparams.addIntIfDefined("finishTimeLessThanOrEqual", self.finishTimeLessThanOrEqual)
        kparams.addIntEnumIfDefined("errTypeEqual", self.errTypeEqual)
        kparams.addStringIfDefined("errTypeIn", self.errTypeIn)
        kparams.addStringIfDefined("errTypeNotIn", self.errTypeNotIn)
        kparams.addIntIfDefined("errNumberEqual", self.errNumberEqual)
        kparams.addStringIfDefined("errNumberIn", self.errNumberIn)
        kparams.addStringIfDefined("errNumberNotIn", self.errNumberNotIn)
        kparams.addIntIfDefined("estimatedEffortLessThan", self.estimatedEffortLessThan)
        kparams.addIntIfDefined("estimatedEffortGreaterThan", self.estimatedEffortGreaterThan)
        kparams.addIntIfDefined("urgencyLessThanOrEqual", self.urgencyLessThanOrEqual)
        kparams.addIntIfDefined("urgencyGreaterThanOrEqual", self.urgencyGreaterThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdGreaterThanOrEqual(self):
        return self.idGreaterThanOrEqual

    def setIdGreaterThanOrEqual(self, newIdGreaterThanOrEqual):
        self.idGreaterThanOrEqual = newIdGreaterThanOrEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getPartnerIdNotIn(self):
        return self.partnerIdNotIn

    def setPartnerIdNotIn(self, newPartnerIdNotIn):
        self.partnerIdNotIn = newPartnerIdNotIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getExecutionAttemptsGreaterThanOrEqual(self):
        return self.executionAttemptsGreaterThanOrEqual

    def setExecutionAttemptsGreaterThanOrEqual(self, newExecutionAttemptsGreaterThanOrEqual):
        self.executionAttemptsGreaterThanOrEqual = newExecutionAttemptsGreaterThanOrEqual

    def getExecutionAttemptsLessThanOrEqual(self):
        return self.executionAttemptsLessThanOrEqual

    def setExecutionAttemptsLessThanOrEqual(self, newExecutionAttemptsLessThanOrEqual):
        self.executionAttemptsLessThanOrEqual = newExecutionAttemptsLessThanOrEqual

    def getLockVersionGreaterThanOrEqual(self):
        return self.lockVersionGreaterThanOrEqual

    def setLockVersionGreaterThanOrEqual(self, newLockVersionGreaterThanOrEqual):
        self.lockVersionGreaterThanOrEqual = newLockVersionGreaterThanOrEqual

    def getLockVersionLessThanOrEqual(self):
        return self.lockVersionLessThanOrEqual

    def setLockVersionLessThanOrEqual(self, newLockVersionLessThanOrEqual):
        self.lockVersionLessThanOrEqual = newLockVersionLessThanOrEqual

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getJobTypeEqual(self):
        return self.jobTypeEqual

    def setJobTypeEqual(self, newJobTypeEqual):
        self.jobTypeEqual = newJobTypeEqual

    def getJobTypeIn(self):
        return self.jobTypeIn

    def setJobTypeIn(self, newJobTypeIn):
        self.jobTypeIn = newJobTypeIn

    def getJobTypeNotIn(self):
        return self.jobTypeNotIn

    def setJobTypeNotIn(self, newJobTypeNotIn):
        self.jobTypeNotIn = newJobTypeNotIn

    def getJobSubTypeEqual(self):
        return self.jobSubTypeEqual

    def setJobSubTypeEqual(self, newJobSubTypeEqual):
        self.jobSubTypeEqual = newJobSubTypeEqual

    def getJobSubTypeIn(self):
        return self.jobSubTypeIn

    def setJobSubTypeIn(self, newJobSubTypeIn):
        self.jobSubTypeIn = newJobSubTypeIn

    def getJobSubTypeNotIn(self):
        return self.jobSubTypeNotIn

    def setJobSubTypeNotIn(self, newJobSubTypeNotIn):
        self.jobSubTypeNotIn = newJobSubTypeNotIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn

    def getPriorityGreaterThanOrEqual(self):
        return self.priorityGreaterThanOrEqual

    def setPriorityGreaterThanOrEqual(self, newPriorityGreaterThanOrEqual):
        self.priorityGreaterThanOrEqual = newPriorityGreaterThanOrEqual

    def getPriorityLessThanOrEqual(self):
        return self.priorityLessThanOrEqual

    def setPriorityLessThanOrEqual(self, newPriorityLessThanOrEqual):
        self.priorityLessThanOrEqual = newPriorityLessThanOrEqual

    def getPriorityEqual(self):
        return self.priorityEqual

    def setPriorityEqual(self, newPriorityEqual):
        self.priorityEqual = newPriorityEqual

    def getPriorityIn(self):
        return self.priorityIn

    def setPriorityIn(self, newPriorityIn):
        self.priorityIn = newPriorityIn

    def getPriorityNotIn(self):
        return self.priorityNotIn

    def setPriorityNotIn(self, newPriorityNotIn):
        self.priorityNotIn = newPriorityNotIn

    def getBatchVersionGreaterThanOrEqual(self):
        return self.batchVersionGreaterThanOrEqual

    def setBatchVersionGreaterThanOrEqual(self, newBatchVersionGreaterThanOrEqual):
        self.batchVersionGreaterThanOrEqual = newBatchVersionGreaterThanOrEqual

    def getBatchVersionLessThanOrEqual(self):
        return self.batchVersionLessThanOrEqual

    def setBatchVersionLessThanOrEqual(self, newBatchVersionLessThanOrEqual):
        self.batchVersionLessThanOrEqual = newBatchVersionLessThanOrEqual

    def getBatchVersionEqual(self):
        return self.batchVersionEqual

    def setBatchVersionEqual(self, newBatchVersionEqual):
        self.batchVersionEqual = newBatchVersionEqual

    def getQueueTimeGreaterThanOrEqual(self):
        return self.queueTimeGreaterThanOrEqual

    def setQueueTimeGreaterThanOrEqual(self, newQueueTimeGreaterThanOrEqual):
        self.queueTimeGreaterThanOrEqual = newQueueTimeGreaterThanOrEqual

    def getQueueTimeLessThanOrEqual(self):
        return self.queueTimeLessThanOrEqual

    def setQueueTimeLessThanOrEqual(self, newQueueTimeLessThanOrEqual):
        self.queueTimeLessThanOrEqual = newQueueTimeLessThanOrEqual

    def getFinishTimeGreaterThanOrEqual(self):
        return self.finishTimeGreaterThanOrEqual

    def setFinishTimeGreaterThanOrEqual(self, newFinishTimeGreaterThanOrEqual):
        self.finishTimeGreaterThanOrEqual = newFinishTimeGreaterThanOrEqual

    def getFinishTimeLessThanOrEqual(self):
        return self.finishTimeLessThanOrEqual

    def setFinishTimeLessThanOrEqual(self, newFinishTimeLessThanOrEqual):
        self.finishTimeLessThanOrEqual = newFinishTimeLessThanOrEqual

    def getErrTypeEqual(self):
        return self.errTypeEqual

    def setErrTypeEqual(self, newErrTypeEqual):
        self.errTypeEqual = newErrTypeEqual

    def getErrTypeIn(self):
        return self.errTypeIn

    def setErrTypeIn(self, newErrTypeIn):
        self.errTypeIn = newErrTypeIn

    def getErrTypeNotIn(self):
        return self.errTypeNotIn

    def setErrTypeNotIn(self, newErrTypeNotIn):
        self.errTypeNotIn = newErrTypeNotIn

    def getErrNumberEqual(self):
        return self.errNumberEqual

    def setErrNumberEqual(self, newErrNumberEqual):
        self.errNumberEqual = newErrNumberEqual

    def getErrNumberIn(self):
        return self.errNumberIn

    def setErrNumberIn(self, newErrNumberIn):
        self.errNumberIn = newErrNumberIn

    def getErrNumberNotIn(self):
        return self.errNumberNotIn

    def setErrNumberNotIn(self, newErrNumberNotIn):
        self.errNumberNotIn = newErrNumberNotIn

    def getEstimatedEffortLessThan(self):
        return self.estimatedEffortLessThan

    def setEstimatedEffortLessThan(self, newEstimatedEffortLessThan):
        self.estimatedEffortLessThan = newEstimatedEffortLessThan

    def getEstimatedEffortGreaterThan(self):
        return self.estimatedEffortGreaterThan

    def setEstimatedEffortGreaterThan(self, newEstimatedEffortGreaterThan):
        self.estimatedEffortGreaterThan = newEstimatedEffortGreaterThan

    def getUrgencyLessThanOrEqual(self):
        return self.urgencyLessThanOrEqual

    def setUrgencyLessThanOrEqual(self, newUrgencyLessThanOrEqual):
        self.urgencyLessThanOrEqual = newUrgencyLessThanOrEqual

    def getUrgencyGreaterThanOrEqual(self):
        return self.urgencyGreaterThanOrEqual

    def setUrgencyGreaterThanOrEqual(self, newUrgencyGreaterThanOrEqual):
        self.urgencyGreaterThanOrEqual = newUrgencyGreaterThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaBatchJobFilter(KalturaBatchJobBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented):
        KalturaBatchJobBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idGreaterThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            partnerIdNotIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            executionAttemptsGreaterThanOrEqual,
            executionAttemptsLessThanOrEqual,
            lockVersionGreaterThanOrEqual,
            lockVersionLessThanOrEqual,
            entryIdEqual,
            jobTypeEqual,
            jobTypeIn,
            jobTypeNotIn,
            jobSubTypeEqual,
            jobSubTypeIn,
            jobSubTypeNotIn,
            statusEqual,
            statusIn,
            statusNotIn,
            priorityGreaterThanOrEqual,
            priorityLessThanOrEqual,
            priorityEqual,
            priorityIn,
            priorityNotIn,
            batchVersionGreaterThanOrEqual,
            batchVersionLessThanOrEqual,
            batchVersionEqual,
            queueTimeGreaterThanOrEqual,
            queueTimeLessThanOrEqual,
            finishTimeGreaterThanOrEqual,
            finishTimeLessThanOrEqual,
            errTypeEqual,
            errTypeIn,
            errTypeNotIn,
            errNumberEqual,
            errNumberIn,
            errNumberNotIn,
            estimatedEffortLessThan,
            estimatedEffortGreaterThan,
            urgencyLessThanOrEqual,
            urgencyGreaterThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBatchJobBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchJobFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBatchJobBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaBatchJobFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAccessControlBlockAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlBlockAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlBlockAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAccessControlLimitDeliveryProfilesAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            deliveryProfileIds=NotImplemented,
            isBlockedList=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)

        # Comma separated list of delivery profile ids
        # @var string
        self.deliveryProfileIds = deliveryProfileIds

        # @var bool
        self.isBlockedList = isBlockedList


    PROPERTY_LOADERS = {
        'deliveryProfileIds': getXmlNodeText, 
        'isBlockedList': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlLimitDeliveryProfilesAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlLimitDeliveryProfilesAction")
        kparams.addStringIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        kparams.addBoolIfDefined("isBlockedList", self.isBlockedList)
        return kparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getIsBlockedList(self):
        return self.isBlockedList

    def setIsBlockedList(self, newIsBlockedList):
        self.isBlockedList = newIsBlockedList


# @package Kaltura
# @subpackage Client
class KalturaAccessControlLimitFlavorsAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            flavorParamsIds=NotImplemented,
            isBlockedList=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)

        # Comma separated list of flavor ids
        # @var string
        self.flavorParamsIds = flavorParamsIds

        # @var bool
        self.isBlockedList = isBlockedList


    PROPERTY_LOADERS = {
        'flavorParamsIds': getXmlNodeText, 
        'isBlockedList': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlLimitFlavorsAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlLimitFlavorsAction")
        kparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        kparams.addBoolIfDefined("isBlockedList", self.isBlockedList)
        return kparams

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds

    def getIsBlockedList(self):
        return self.isBlockedList

    def setIsBlockedList(self, newIsBlockedList):
        self.isBlockedList = newIsBlockedList


# @package Kaltura
# @subpackage Client
class KalturaAccessControlListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaAccessControl
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaAccessControl), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAccessControlListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaAccessControlModifyRequestHostRegexAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            pattern=NotImplemented,
            replacement=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)

        # Request host regex pattern
        # @var string
        self.pattern = pattern

        # Request host regex replacment
        # @var string
        self.replacement = replacement


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'replacement': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlModifyRequestHostRegexAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlModifyRequestHostRegexAction")
        kparams.addStringIfDefined("pattern", self.pattern)
        kparams.addStringIfDefined("replacement", self.replacement)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getReplacement(self):
        return self.replacement

    def setReplacement(self, newReplacement):
        self.replacement = newReplacement


# @package Kaltura
# @subpackage Client
class KalturaAccessControlPreviewAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            limit=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)

        # @var int
        self.limit = limit


    PROPERTY_LOADERS = {
        'limit': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlPreviewAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlPreviewAction")
        kparams.addIntIfDefined("limit", self.limit)
        return kparams

    def getLimit(self):
        return self.limit

    def setLimit(self, newLimit):
        self.limit = newLimit


# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaAccessControlProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaAccessControlProfile), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAccessControlProfileListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaAccessControlServeRemoteEdgeServerAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented,
            edgeServerIds=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)

        # Comma separated list of edge servers playBack should be done from
        # @var string
        self.edgeServerIds = edgeServerIds


    PROPERTY_LOADERS = {
        'edgeServerIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlServeRemoteEdgeServerAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaAccessControlServeRemoteEdgeServerAction")
        kparams.addStringIfDefined("edgeServerIds", self.edgeServerIds)
        return kparams

    def getEdgeServerIds(self):
        return self.edgeServerIds

    def setEdgeServerIds(self, newEdgeServerIds):
        self.edgeServerIds = newEdgeServerIds


# @package Kaltura
# @subpackage Client
class KalturaAdminUser(KalturaUser):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            type=NotImplemented,
            screenName=NotImplemented,
            fullName=NotImplemented,
            email=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            thumbnailUrl=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            gender=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerData=NotImplemented,
            indexedPartnerDataInt=NotImplemented,
            indexedPartnerDataString=NotImplemented,
            storageSize=NotImplemented,
            password=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented,
            isAdmin=NotImplemented,
            language=NotImplemented,
            lastLoginTime=NotImplemented,
            statusUpdatedAt=NotImplemented,
            deletedAt=NotImplemented,
            loginEnabled=NotImplemented,
            roleIds=NotImplemented,
            roleNames=NotImplemented,
            isAccountOwner=NotImplemented,
            allowedPartnerIds=NotImplemented,
            allowedPartnerPackages=NotImplemented):
        KalturaUser.__init__(self,
            id,
            partnerId,
            type,
            screenName,
            fullName,
            email,
            dateOfBirth,
            country,
            state,
            city,
            zip,
            thumbnailUrl,
            description,
            tags,
            adminTags,
            gender,
            status,
            createdAt,
            updatedAt,
            partnerData,
            indexedPartnerDataInt,
            indexedPartnerDataString,
            storageSize,
            password,
            firstName,
            lastName,
            isAdmin,
            language,
            lastLoginTime,
            statusUpdatedAt,
            deletedAt,
            loginEnabled,
            roleIds,
            roleNames,
            isAccountOwner,
            allowedPartnerIds,
            allowedPartnerPackages)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUser.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAdminUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUser.toParams(self)
        kparams.put("objectType", "KalturaAdminUser")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageProfile(KalturaStorageProfile):
    def __init__(self,
            id=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            desciption=NotImplemented,
            status=NotImplemented,
            protocol=NotImplemented,
            storageUrl=NotImplemented,
            storageBaseDir=NotImplemented,
            storageUsername=NotImplemented,
            storagePassword=NotImplemented,
            storageFtpPassiveMode=NotImplemented,
            minFileSize=NotImplemented,
            maxFileSize=NotImplemented,
            flavorParamsIds=NotImplemented,
            maxConcurrentConnections=NotImplemented,
            pathManagerClass=NotImplemented,
            pathManagerParams=NotImplemented,
            trigger=NotImplemented,
            deliveryPriority=NotImplemented,
            deliveryStatus=NotImplemented,
            readyBehavior=NotImplemented,
            allowAutoDelete=NotImplemented,
            createFileLink=NotImplemented,
            rules=NotImplemented,
            deliveryProfileIds=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented,
            filesPermissionInS3=NotImplemented,
            s3Region=NotImplemented,
            sseType=NotImplemented,
            sseKmsKeyId=NotImplemented):
        KalturaStorageProfile.__init__(self,
            id,
            createdAt,
            updatedAt,
            partnerId,
            name,
            systemName,
            desciption,
            status,
            protocol,
            storageUrl,
            storageBaseDir,
            storageUsername,
            storagePassword,
            storageFtpPassiveMode,
            minFileSize,
            maxFileSize,
            flavorParamsIds,
            maxConcurrentConnections,
            pathManagerClass,
            pathManagerParams,
            trigger,
            deliveryPriority,
            deliveryStatus,
            readyBehavior,
            allowAutoDelete,
            createFileLink,
            rules,
            deliveryProfileIds,
            privateKey,
            publicKey,
            passPhrase)

        # @var KalturaAmazonS3StorageProfileFilesPermissionLevel
        self.filesPermissionInS3 = filesPermissionInS3

        # @var string
        self.s3Region = s3Region

        # @var string
        self.sseType = sseType

        # @var string
        self.sseKmsKeyId = sseKmsKeyId


    PROPERTY_LOADERS = {
        'filesPermissionInS3': (KalturaEnumsFactory.createString, "KalturaAmazonS3StorageProfileFilesPermissionLevel"), 
        's3Region': getXmlNodeText, 
        'sseType': getXmlNodeText, 
        'sseKmsKeyId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaStorageProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAmazonS3StorageProfile.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageProfile.toParams(self)
        kparams.put("objectType", "KalturaAmazonS3StorageProfile")
        kparams.addStringEnumIfDefined("filesPermissionInS3", self.filesPermissionInS3)
        kparams.addStringIfDefined("s3Region", self.s3Region)
        kparams.addStringIfDefined("sseType", self.sseType)
        kparams.addStringIfDefined("sseKmsKeyId", self.sseKmsKeyId)
        return kparams

    def getFilesPermissionInS3(self):
        return self.filesPermissionInS3

    def setFilesPermissionInS3(self, newFilesPermissionInS3):
        self.filesPermissionInS3 = newFilesPermissionInS3

    def getS3Region(self):
        return self.s3Region

    def setS3Region(self, newS3Region):
        self.s3Region = newS3Region

    def getSseType(self):
        return self.sseType

    def setSseType(self, newSseType):
        self.sseType = newSseType

    def getSseKmsKeyId(self):
        return self.sseKmsKeyId

    def setSseKmsKeyId(self, newSseKmsKeyId):
        self.sseKmsKeyId = newSseKmsKeyId


# @package Kaltura
# @subpackage Client
class KalturaApiActionPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            service=NotImplemented,
            action=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            type,
            partnerId,
            tags,
            createdAt,
            updatedAt)

        # @var string
        self.service = service

        # @var string
        self.action = action


    PROPERTY_LOADERS = {
        'service': getXmlNodeText, 
        'action': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiActionPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiActionPermissionItem")
        kparams.addStringIfDefined("service", self.service)
        kparams.addStringIfDefined("action", self.action)
        return kparams

    def getService(self):
        return self.service

    def setService(self, newService):
        self.service = newService

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItem(KalturaPermissionItem):
    def __init__(self,
            id=NotImplemented,
            type=NotImplemented,
            partnerId=NotImplemented,
            tags=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            object=NotImplemented,
            parameter=NotImplemented,
            action=NotImplemented):
        KalturaPermissionItem.__init__(self,
            id,
            type,
            partnerId,
            tags,
            createdAt,
            updatedAt)

        # @var string
        self.object = object

        # @var string
        self.parameter = parameter

        # @var KalturaApiParameterPermissionItemAction
        self.action = action


    PROPERTY_LOADERS = {
        'object': getXmlNodeText, 
        'parameter': getXmlNodeText, 
        'action': (KalturaEnumsFactory.createString, "KalturaApiParameterPermissionItemAction"), 
    }

    def fromXml(self, node):
        KalturaPermissionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiParameterPermissionItem.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItem.toParams(self)
        kparams.put("objectType", "KalturaApiParameterPermissionItem")
        kparams.addStringIfDefined("object", self.object)
        kparams.addStringIfDefined("parameter", self.parameter)
        kparams.addStringEnumIfDefined("action", self.action)
        return kparams

    def getObject(self):
        return self.object

    def setObject(self, newObject):
        self.object = newObject

    def getParameter(self):
        return self.parameter

    def setParameter(self, newParameter):
        self.parameter = newParameter

    def getAction(self):
        return self.action

    def setAction(self, newAction):
        self.action = newAction


# @package Kaltura
# @subpackage Client
class KalturaAppTokenBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaAppTokenStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaAppTokenStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAppTokenBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaAppTokenBaseFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaAppTokenListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaAppToken
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaAppToken), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAppTokenListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaAppTokenListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOutput(KalturaAssetParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            assetParamsId=NotImplemented,
            assetParamsVersion=NotImplemented,
            assetId=NotImplemented,
            assetVersion=NotImplemented,
            readyBehavior=NotImplemented,
            format=NotImplemented):
        KalturaAssetParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds)

        # @var int
        self.assetParamsId = assetParamsId

        # @var string
        self.assetParamsVersion = assetParamsVersion

        # @var string
        self.assetId = assetId

        # @var string
        self.assetVersion = assetVersion

        # @var int
        self.readyBehavior = readyBehavior

        # The container format of the Flavor Params
        # @var KalturaContainerFormat
        self.format = format


    PROPERTY_LOADERS = {
        'assetParamsId': getXmlNodeInt, 
        'assetParamsVersion': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'assetVersion': getXmlNodeText, 
        'readyBehavior': getXmlNodeInt, 
        'format': (KalturaEnumsFactory.createString, "KalturaContainerFormat"), 
    }

    def fromXml(self, node):
        KalturaAssetParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParams.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsOutput")
        kparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        kparams.addStringIfDefined("assetParamsVersion", self.assetParamsVersion)
        kparams.addStringIfDefined("assetId", self.assetId)
        kparams.addStringIfDefined("assetVersion", self.assetVersion)
        kparams.addIntIfDefined("readyBehavior", self.readyBehavior)
        kparams.addStringEnumIfDefined("format", self.format)
        return kparams

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId

    def getAssetParamsVersion(self):
        return self.assetParamsVersion

    def setAssetParamsVersion(self, newAssetParamsVersion):
        self.assetParamsVersion = newAssetParamsVersion

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getAssetVersion(self):
        return self.assetVersion

    def setAssetVersion(self, newAssetVersion):
        self.assetVersion = newAssetVersion

    def getReadyBehavior(self):
        return self.readyBehavior

    def setReadyBehavior(self, newReadyBehavior):
        self.readyBehavior = newReadyBehavior

    def getFormat(self):
        return self.format

    def setFormat(self, newFormat):
        self.format = newFormat


# @package Kaltura
# @subpackage Client
class KalturaAssetPropertiesCompareCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            properties=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # Array of key/value objects that holds the property and the value to find and compare on an asset object
        # @var array of KalturaKeyValue
        self.properties = properties


    PROPERTY_LOADERS = {
        'properties': (KalturaObjectFactory.createArray, KalturaKeyValue), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetPropertiesCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaAssetPropertiesCompareCondition")
        kparams.addArrayIfDefined("properties", self.properties)
        return kparams

    def getProperties(self):
        return self.properties

    def setProperties(self, newProperties):
        self.properties = newProperties


# @package Kaltura
# @subpackage Client
class KalturaAssetsParamsResourceContainers(KalturaResource):
    def __init__(self,
            resources=NotImplemented):
        KalturaResource.__init__(self)

        # Array of resources associated with asset params ids
        # @var array of KalturaAssetParamsResourceContainer
        self.resources = resources


    PROPERTY_LOADERS = {
        'resources': (KalturaObjectFactory.createArray, KalturaAssetParamsResourceContainer), 
    }

    def fromXml(self, node):
        KalturaResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetsParamsResourceContainers.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaResource.toParams(self)
        kparams.put("objectType", "KalturaAssetsParamsResourceContainers")
        kparams.addArrayIfDefined("resources", self.resources)
        return kparams

    def getResources(self):
        return self.resources

    def setResources(self, newResources):
        self.resources = newResources


# @package Kaltura
# @subpackage Client
class KalturaAttributeCondition(KalturaSearchItem):
    def __init__(self,
            value=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaAttributeCondition")
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaAuthenticatedCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            privileges=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # The privelege needed to remove the restriction
        # @var array of KalturaStringValue
        self.privileges = privileges


    PROPERTY_LOADERS = {
        'privileges': (KalturaObjectFactory.createArray, KalturaStringValue), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAuthenticatedCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaAuthenticatedCondition")
        kparams.addArrayIfDefined("privileges", self.privileges)
        return kparams

    def getPrivileges(self):
        return self.privileges

    def setPrivileges(self, newPrivileges):
        self.privileges = newPrivileges


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryCloneOptionComponent(KalturaBaseEntryCloneOptionItem):
    def __init__(self,
            itemType=NotImplemented,
            rule=NotImplemented):
        KalturaBaseEntryCloneOptionItem.__init__(self)

        # @var KalturaBaseEntryCloneOptions
        self.itemType = itemType

        # condition rule (include/exclude)
        # @var KalturaCloneComponentSelectorType
        self.rule = rule


    PROPERTY_LOADERS = {
        'itemType': (KalturaEnumsFactory.createString, "KalturaBaseEntryCloneOptions"), 
        'rule': (KalturaEnumsFactory.createString, "KalturaCloneComponentSelectorType"), 
    }

    def fromXml(self, node):
        KalturaBaseEntryCloneOptionItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryCloneOptionComponent.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntryCloneOptionItem.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryCloneOptionComponent")
        kparams.addStringEnumIfDefined("itemType", self.itemType)
        kparams.addStringEnumIfDefined("rule", self.rule)
        return kparams

    def getItemType(self):
        return self.itemType

    def setItemType(self, newItemType):
        self.itemType = newItemType

    def getRule(self):
        return self.rule

    def setRule(self, newRule):
        self.rule = newRule


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaBaseEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaBaseEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaBaseSyndicationFeedBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseSyndicationFeedListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaBaseSyndicationFeed
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaBaseSyndicationFeed), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSyndicationFeedListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBaseSyndicationFeedListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaBatchJobListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaBatchJob
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaBatchJob), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchJobListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBatchJobListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaBulkDownloadJobData(KalturaJobData):
    def __init__(self,
            entryIds=NotImplemented,
            flavorParamsId=NotImplemented,
            puserId=NotImplemented):
        KalturaJobData.__init__(self)

        # Comma separated list of entry ids
        # @var string
        self.entryIds = entryIds

        # Flavor params id to use for conversion
        # @var int
        self.flavorParamsId = flavorParamsId

        # The id of the requesting user
        # @var string
        self.puserId = puserId


    PROPERTY_LOADERS = {
        'entryIds': getXmlNodeText, 
        'flavorParamsId': getXmlNodeInt, 
        'puserId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkDownloadJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaBulkDownloadJobData")
        kparams.addStringIfDefined("entryIds", self.entryIds)
        kparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        kparams.addStringIfDefined("puserId", self.puserId)
        return kparams

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId

    def getPuserId(self):
        return self.puserId

    def setPuserId(self, newPuserId):
        self.puserId = newPuserId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            uploadedOnGreaterThanOrEqual=NotImplemented,
            uploadedOnLessThanOrEqual=NotImplemented,
            uploadedOnEqual=NotImplemented,
            statusIn=NotImplemented,
            statusEqual=NotImplemented,
            bulkUploadObjectTypeEqual=NotImplemented,
            bulkUploadObjectTypeIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.uploadedOnGreaterThanOrEqual = uploadedOnGreaterThanOrEqual

        # @var int
        self.uploadedOnLessThanOrEqual = uploadedOnLessThanOrEqual

        # @var int
        self.uploadedOnEqual = uploadedOnEqual

        # @var string
        self.statusIn = statusIn

        # @var KalturaBatchJobStatus
        self.statusEqual = statusEqual

        # @var KalturaBulkUploadObjectType
        self.bulkUploadObjectTypeEqual = bulkUploadObjectTypeEqual

        # @var string
        self.bulkUploadObjectTypeIn = bulkUploadObjectTypeIn


    PROPERTY_LOADERS = {
        'uploadedOnGreaterThanOrEqual': getXmlNodeInt, 
        'uploadedOnLessThanOrEqual': getXmlNodeInt, 
        'uploadedOnEqual': getXmlNodeInt, 
        'statusIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaBatchJobStatus"), 
        'bulkUploadObjectTypeEqual': (KalturaEnumsFactory.createString, "KalturaBulkUploadObjectType"), 
        'bulkUploadObjectTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadBaseFilter")
        kparams.addIntIfDefined("uploadedOnGreaterThanOrEqual", self.uploadedOnGreaterThanOrEqual)
        kparams.addIntIfDefined("uploadedOnLessThanOrEqual", self.uploadedOnLessThanOrEqual)
        kparams.addIntIfDefined("uploadedOnEqual", self.uploadedOnEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringEnumIfDefined("bulkUploadObjectTypeEqual", self.bulkUploadObjectTypeEqual)
        kparams.addStringIfDefined("bulkUploadObjectTypeIn", self.bulkUploadObjectTypeIn)
        return kparams

    def getUploadedOnGreaterThanOrEqual(self):
        return self.uploadedOnGreaterThanOrEqual

    def setUploadedOnGreaterThanOrEqual(self, newUploadedOnGreaterThanOrEqual):
        self.uploadedOnGreaterThanOrEqual = newUploadedOnGreaterThanOrEqual

    def getUploadedOnLessThanOrEqual(self):
        return self.uploadedOnLessThanOrEqual

    def setUploadedOnLessThanOrEqual(self, newUploadedOnLessThanOrEqual):
        self.uploadedOnLessThanOrEqual = newUploadedOnLessThanOrEqual

    def getUploadedOnEqual(self):
        return self.uploadedOnEqual

    def setUploadedOnEqual(self, newUploadedOnEqual):
        self.uploadedOnEqual = newUploadedOnEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getBulkUploadObjectTypeEqual(self):
        return self.bulkUploadObjectTypeEqual

    def setBulkUploadObjectTypeEqual(self, newBulkUploadObjectTypeEqual):
        self.bulkUploadObjectTypeEqual = newBulkUploadObjectTypeEqual

    def getBulkUploadObjectTypeIn(self):
        return self.bulkUploadObjectTypeIn

    def setBulkUploadObjectTypeIn(self, newBulkUploadObjectTypeIn):
        self.bulkUploadObjectTypeIn = newBulkUploadObjectTypeIn


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadCategoryData(KalturaBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        KalturaBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadCategoryData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadCategoryData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadCategoryEntryData(KalturaBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        KalturaBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadCategoryEntryData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadCategoryEntryData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadCategoryUserData(KalturaBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        KalturaBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadCategoryUserData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadCategoryUserData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadEntryData(KalturaBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self,
            conversionProfileId=NotImplemented):
        KalturaBulkUploadObjectData.__init__(self)

        # Selected profile id for all bulk entries
        # @var int
        self.conversionProfileId = conversionProfileId


    PROPERTY_LOADERS = {
        'conversionProfileId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadEntryData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadEntryData")
        kparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        return kparams

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadJobData(KalturaJobData):
    def __init__(self,
            userId=NotImplemented,
            uploadedBy=NotImplemented,
            conversionProfileId=NotImplemented,
            resultsFileLocalPath=NotImplemented,
            resultsFileUrl=NotImplemented,
            numOfEntries=NotImplemented,
            numOfObjects=NotImplemented,
            filePath=NotImplemented,
            bulkUploadObjectType=NotImplemented,
            fileName=NotImplemented,
            objectData=NotImplemented,
            type=NotImplemented,
            emailRecipients=NotImplemented,
            numOfErrorObjects=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        # @readonly
        self.userId = userId

        # The screen name of the user
        # @var string
        # @readonly
        self.uploadedBy = uploadedBy

        # Selected profile id for all bulk entries
        # @var int
        # @readonly
        self.conversionProfileId = conversionProfileId

        # Created by the API
        # @var string
        # @readonly
        self.resultsFileLocalPath = resultsFileLocalPath

        # Created by the API
        # @var string
        # @readonly
        self.resultsFileUrl = resultsFileUrl

        # Number of created entries
        # @var int
        # @readonly
        self.numOfEntries = numOfEntries

        # Number of created objects
        # @var int
        # @readonly
        self.numOfObjects = numOfObjects

        # The bulk upload file path
        # @var string
        # @readonly
        self.filePath = filePath

        # Type of object for bulk upload
        # @var KalturaBulkUploadObjectType
        # @readonly
        self.bulkUploadObjectType = bulkUploadObjectType

        # Friendly name of the file, used to be recognized later in the logs.
        # @var string
        self.fileName = fileName

        # Data pertaining to the objects being uploaded
        # @var KalturaBulkUploadObjectData
        # @readonly
        self.objectData = objectData

        # Type of bulk upload
        # @var KalturaBulkUploadType
        # @readonly
        self.type = type

        # Recipients of the email for bulk upload success/failure
        # @var string
        self.emailRecipients = emailRecipients

        # Number of objects that finished on error status
        # @var int
        self.numOfErrorObjects = numOfErrorObjects


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'uploadedBy': getXmlNodeText, 
        'conversionProfileId': getXmlNodeInt, 
        'resultsFileLocalPath': getXmlNodeText, 
        'resultsFileUrl': getXmlNodeText, 
        'numOfEntries': getXmlNodeInt, 
        'numOfObjects': getXmlNodeInt, 
        'filePath': getXmlNodeText, 
        'bulkUploadObjectType': (KalturaEnumsFactory.createString, "KalturaBulkUploadObjectType"), 
        'fileName': getXmlNodeText, 
        'objectData': (KalturaObjectFactory.create, KalturaBulkUploadObjectData), 
        'type': (KalturaEnumsFactory.createString, "KalturaBulkUploadType"), 
        'emailRecipients': getXmlNodeText, 
        'numOfErrorObjects': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadJobData")
        kparams.addStringIfDefined("fileName", self.fileName)
        kparams.addStringIfDefined("emailRecipients", self.emailRecipients)
        kparams.addIntIfDefined("numOfErrorObjects", self.numOfErrorObjects)
        return kparams

    def getUserId(self):
        return self.userId

    def getUploadedBy(self):
        return self.uploadedBy

    def getConversionProfileId(self):
        return self.conversionProfileId

    def getResultsFileLocalPath(self):
        return self.resultsFileLocalPath

    def getResultsFileUrl(self):
        return self.resultsFileUrl

    def getNumOfEntries(self):
        return self.numOfEntries

    def getNumOfObjects(self):
        return self.numOfObjects

    def getFilePath(self):
        return self.filePath

    def getBulkUploadObjectType(self):
        return self.bulkUploadObjectType

    def getFileName(self):
        return self.fileName

    def setFileName(self, newFileName):
        self.fileName = newFileName

    def getObjectData(self):
        return self.objectData

    def getType(self):
        return self.type

    def getEmailRecipients(self):
        return self.emailRecipients

    def setEmailRecipients(self, newEmailRecipients):
        self.emailRecipients = newEmailRecipients

    def getNumOfErrorObjects(self):
        return self.numOfErrorObjects

    def setNumOfErrorObjects(self, newNumOfErrorObjects):
        self.numOfErrorObjects = newNumOfErrorObjects


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaBulkUpload
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaBulkUpload), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultCategory(KalturaBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            relativePath=NotImplemented,
            name=NotImplemented,
            referenceId=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            appearInList=NotImplemented,
            privacy=NotImplemented,
            inheritanceType=NotImplemented,
            userJoinPolicy=NotImplemented,
            defaultPermissionLevel=NotImplemented,
            owner=NotImplemented,
            contributionPolicy=NotImplemented,
            partnerSortValue=NotImplemented,
            moderation=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.relativePath = relativePath

        # @var string
        self.name = name

        # @var string
        self.referenceId = referenceId

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var int
        self.appearInList = appearInList

        # @var int
        self.privacy = privacy

        # @var int
        self.inheritanceType = inheritanceType

        # @var int
        self.userJoinPolicy = userJoinPolicy

        # @var int
        self.defaultPermissionLevel = defaultPermissionLevel

        # @var string
        self.owner = owner

        # @var int
        self.contributionPolicy = contributionPolicy

        # @var int
        self.partnerSortValue = partnerSortValue

        # @var bool
        self.moderation = moderation


    PROPERTY_LOADERS = {
        'relativePath': getXmlNodeText, 
        'name': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'appearInList': getXmlNodeInt, 
        'privacy': getXmlNodeInt, 
        'inheritanceType': getXmlNodeInt, 
        'userJoinPolicy': getXmlNodeInt, 
        'defaultPermissionLevel': getXmlNodeInt, 
        'owner': getXmlNodeText, 
        'contributionPolicy': getXmlNodeInt, 
        'partnerSortValue': getXmlNodeInt, 
        'moderation': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResultCategory.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResultCategory")
        kparams.addStringIfDefined("relativePath", self.relativePath)
        kparams.addStringIfDefined("name", self.name)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addIntIfDefined("appearInList", self.appearInList)
        kparams.addIntIfDefined("privacy", self.privacy)
        kparams.addIntIfDefined("inheritanceType", self.inheritanceType)
        kparams.addIntIfDefined("userJoinPolicy", self.userJoinPolicy)
        kparams.addIntIfDefined("defaultPermissionLevel", self.defaultPermissionLevel)
        kparams.addStringIfDefined("owner", self.owner)
        kparams.addIntIfDefined("contributionPolicy", self.contributionPolicy)
        kparams.addIntIfDefined("partnerSortValue", self.partnerSortValue)
        kparams.addBoolIfDefined("moderation", self.moderation)
        return kparams

    def getRelativePath(self):
        return self.relativePath

    def setRelativePath(self, newRelativePath):
        self.relativePath = newRelativePath

    def getName(self):
        return self.name

    def setName(self, newName):
        self.name = newName

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getAppearInList(self):
        return self.appearInList

    def setAppearInList(self, newAppearInList):
        self.appearInList = newAppearInList

    def getPrivacy(self):
        return self.privacy

    def setPrivacy(self, newPrivacy):
        self.privacy = newPrivacy

    def getInheritanceType(self):
        return self.inheritanceType

    def setInheritanceType(self, newInheritanceType):
        self.inheritanceType = newInheritanceType

    def getUserJoinPolicy(self):
        return self.userJoinPolicy

    def setUserJoinPolicy(self, newUserJoinPolicy):
        self.userJoinPolicy = newUserJoinPolicy

    def getDefaultPermissionLevel(self):
        return self.defaultPermissionLevel

    def setDefaultPermissionLevel(self, newDefaultPermissionLevel):
        self.defaultPermissionLevel = newDefaultPermissionLevel

    def getOwner(self):
        return self.owner

    def setOwner(self, newOwner):
        self.owner = newOwner

    def getContributionPolicy(self):
        return self.contributionPolicy

    def setContributionPolicy(self, newContributionPolicy):
        self.contributionPolicy = newContributionPolicy

    def getPartnerSortValue(self):
        return self.partnerSortValue

    def setPartnerSortValue(self, newPartnerSortValue):
        self.partnerSortValue = newPartnerSortValue

    def getModeration(self):
        return self.moderation

    def setModeration(self, newModeration):
        self.moderation = newModeration


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultCategoryEntry(KalturaBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            categoryId=NotImplemented,
            entryId=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var int
        self.categoryId = categoryId

        # @var string
        self.entryId = entryId


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'entryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResultCategoryEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResultCategoryEntry")
        kparams.addIntIfDefined("categoryId", self.categoryId)
        kparams.addStringIfDefined("entryId", self.entryId)
        return kparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultCategoryUser(KalturaBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            categoryId=NotImplemented,
            categoryReferenceId=NotImplemented,
            userId=NotImplemented,
            permissionLevel=NotImplemented,
            updateMethod=NotImplemented,
            requiredObjectStatus=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var int
        self.categoryId = categoryId

        # @var string
        self.categoryReferenceId = categoryReferenceId

        # @var string
        self.userId = userId

        # @var int
        self.permissionLevel = permissionLevel

        # @var int
        self.updateMethod = updateMethod

        # @var int
        self.requiredObjectStatus = requiredObjectStatus


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'categoryReferenceId': getXmlNodeText, 
        'userId': getXmlNodeText, 
        'permissionLevel': getXmlNodeInt, 
        'updateMethod': getXmlNodeInt, 
        'requiredObjectStatus': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResultCategoryUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResultCategoryUser")
        kparams.addIntIfDefined("categoryId", self.categoryId)
        kparams.addStringIfDefined("categoryReferenceId", self.categoryReferenceId)
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addIntIfDefined("permissionLevel", self.permissionLevel)
        kparams.addIntIfDefined("updateMethod", self.updateMethod)
        kparams.addIntIfDefined("requiredObjectStatus", self.requiredObjectStatus)
        return kparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getCategoryReferenceId(self):
        return self.categoryReferenceId

    def setCategoryReferenceId(self, newCategoryReferenceId):
        self.categoryReferenceId = newCategoryReferenceId

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPermissionLevel(self):
        return self.permissionLevel

    def setPermissionLevel(self, newPermissionLevel):
        self.permissionLevel = newPermissionLevel

    def getUpdateMethod(self):
        return self.updateMethod

    def setUpdateMethod(self, newUpdateMethod):
        self.updateMethod = newUpdateMethod

    def getRequiredObjectStatus(self):
        return self.requiredObjectStatus

    def setRequiredObjectStatus(self, newRequiredObjectStatus):
        self.requiredObjectStatus = newRequiredObjectStatus


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultEntry(KalturaBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            entryId=NotImplemented,
            title=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            url=NotImplemented,
            contentType=NotImplemented,
            conversionProfileId=NotImplemented,
            accessControlProfileId=NotImplemented,
            category=NotImplemented,
            scheduleStartDate=NotImplemented,
            scheduleEndDate=NotImplemented,
            entryStatus=NotImplemented,
            thumbnailUrl=NotImplemented,
            thumbnailSaved=NotImplemented,
            sshPrivateKey=NotImplemented,
            sshPublicKey=NotImplemented,
            sshKeyPassphrase=NotImplemented,
            creatorId=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            ownerId=NotImplemented,
            referenceId=NotImplemented,
            templateEntryId=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.entryId = entryId

        # @var string
        self.title = title

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var string
        self.url = url

        # @var string
        self.contentType = contentType

        # @var int
        self.conversionProfileId = conversionProfileId

        # @var int
        self.accessControlProfileId = accessControlProfileId

        # @var string
        self.category = category

        # @var int
        self.scheduleStartDate = scheduleStartDate

        # @var int
        self.scheduleEndDate = scheduleEndDate

        # @var int
        self.entryStatus = entryStatus

        # @var string
        self.thumbnailUrl = thumbnailUrl

        # @var bool
        self.thumbnailSaved = thumbnailSaved

        # @var string
        self.sshPrivateKey = sshPrivateKey

        # @var string
        self.sshPublicKey = sshPublicKey

        # @var string
        self.sshKeyPassphrase = sshKeyPassphrase

        # @var string
        self.creatorId = creatorId

        # @var string
        self.entitledUsersEdit = entitledUsersEdit

        # @var string
        self.entitledUsersPublish = entitledUsersPublish

        # @var string
        self.ownerId = ownerId

        # @var string
        self.referenceId = referenceId

        # @var string
        self.templateEntryId = templateEntryId


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'title': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'url': getXmlNodeText, 
        'contentType': getXmlNodeText, 
        'conversionProfileId': getXmlNodeInt, 
        'accessControlProfileId': getXmlNodeInt, 
        'category': getXmlNodeText, 
        'scheduleStartDate': getXmlNodeInt, 
        'scheduleEndDate': getXmlNodeInt, 
        'entryStatus': getXmlNodeInt, 
        'thumbnailUrl': getXmlNodeText, 
        'thumbnailSaved': getXmlNodeBool, 
        'sshPrivateKey': getXmlNodeText, 
        'sshPublicKey': getXmlNodeText, 
        'sshKeyPassphrase': getXmlNodeText, 
        'creatorId': getXmlNodeText, 
        'entitledUsersEdit': getXmlNodeText, 
        'entitledUsersPublish': getXmlNodeText, 
        'ownerId': getXmlNodeText, 
        'referenceId': getXmlNodeText, 
        'templateEntryId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResultEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResultEntry")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("title", self.title)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addStringIfDefined("url", self.url)
        kparams.addStringIfDefined("contentType", self.contentType)
        kparams.addIntIfDefined("conversionProfileId", self.conversionProfileId)
        kparams.addIntIfDefined("accessControlProfileId", self.accessControlProfileId)
        kparams.addStringIfDefined("category", self.category)
        kparams.addIntIfDefined("scheduleStartDate", self.scheduleStartDate)
        kparams.addIntIfDefined("scheduleEndDate", self.scheduleEndDate)
        kparams.addIntIfDefined("entryStatus", self.entryStatus)
        kparams.addStringIfDefined("thumbnailUrl", self.thumbnailUrl)
        kparams.addBoolIfDefined("thumbnailSaved", self.thumbnailSaved)
        kparams.addStringIfDefined("sshPrivateKey", self.sshPrivateKey)
        kparams.addStringIfDefined("sshPublicKey", self.sshPublicKey)
        kparams.addStringIfDefined("sshKeyPassphrase", self.sshKeyPassphrase)
        kparams.addStringIfDefined("creatorId", self.creatorId)
        kparams.addStringIfDefined("entitledUsersEdit", self.entitledUsersEdit)
        kparams.addStringIfDefined("entitledUsersPublish", self.entitledUsersPublish)
        kparams.addStringIfDefined("ownerId", self.ownerId)
        kparams.addStringIfDefined("referenceId", self.referenceId)
        kparams.addStringIfDefined("templateEntryId", self.templateEntryId)
        return kparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getTitle(self):
        return self.title

    def setTitle(self, newTitle):
        self.title = newTitle

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getUrl(self):
        return self.url

    def setUrl(self, newUrl):
        self.url = newUrl

    def getContentType(self):
        return self.contentType

    def setContentType(self, newContentType):
        self.contentType = newContentType

    def getConversionProfileId(self):
        return self.conversionProfileId

    def setConversionProfileId(self, newConversionProfileId):
        self.conversionProfileId = newConversionProfileId

    def getAccessControlProfileId(self):
        return self.accessControlProfileId

    def setAccessControlProfileId(self, newAccessControlProfileId):
        self.accessControlProfileId = newAccessControlProfileId

    def getCategory(self):
        return self.category

    def setCategory(self, newCategory):
        self.category = newCategory

    def getScheduleStartDate(self):
        return self.scheduleStartDate

    def setScheduleStartDate(self, newScheduleStartDate):
        self.scheduleStartDate = newScheduleStartDate

    def getScheduleEndDate(self):
        return self.scheduleEndDate

    def setScheduleEndDate(self, newScheduleEndDate):
        self.scheduleEndDate = newScheduleEndDate

    def getEntryStatus(self):
        return self.entryStatus

    def setEntryStatus(self, newEntryStatus):
        self.entryStatus = newEntryStatus

    def getThumbnailUrl(self):
        return self.thumbnailUrl

    def setThumbnailUrl(self, newThumbnailUrl):
        self.thumbnailUrl = newThumbnailUrl

    def getThumbnailSaved(self):
        return self.thumbnailSaved

    def setThumbnailSaved(self, newThumbnailSaved):
        self.thumbnailSaved = newThumbnailSaved

    def getSshPrivateKey(self):
        return self.sshPrivateKey

    def setSshPrivateKey(self, newSshPrivateKey):
        self.sshPrivateKey = newSshPrivateKey

    def getSshPublicKey(self):
        return self.sshPublicKey

    def setSshPublicKey(self, newSshPublicKey):
        self.sshPublicKey = newSshPublicKey

    def getSshKeyPassphrase(self):
        return self.sshKeyPassphrase

    def setSshKeyPassphrase(self, newSshKeyPassphrase):
        self.sshKeyPassphrase = newSshKeyPassphrase

    def getCreatorId(self):
        return self.creatorId

    def setCreatorId(self, newCreatorId):
        self.creatorId = newCreatorId

    def getEntitledUsersEdit(self):
        return self.entitledUsersEdit

    def setEntitledUsersEdit(self, newEntitledUsersEdit):
        self.entitledUsersEdit = newEntitledUsersEdit

    def getEntitledUsersPublish(self):
        return self.entitledUsersPublish

    def setEntitledUsersPublish(self, newEntitledUsersPublish):
        self.entitledUsersPublish = newEntitledUsersPublish

    def getOwnerId(self):
        return self.ownerId

    def setOwnerId(self, newOwnerId):
        self.ownerId = newOwnerId

    def getReferenceId(self):
        return self.referenceId

    def setReferenceId(self, newReferenceId):
        self.referenceId = newReferenceId

    def getTemplateEntryId(self):
        return self.templateEntryId

    def setTemplateEntryId(self, newTemplateEntryId):
        self.templateEntryId = newTemplateEntryId


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadResultUser(KalturaBulkUploadResult):
    def __init__(self,
            id=NotImplemented,
            bulkUploadJobId=NotImplemented,
            lineIndex=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            action=NotImplemented,
            objectId=NotImplemented,
            objectStatus=NotImplemented,
            bulkUploadResultObjectType=NotImplemented,
            rowData=NotImplemented,
            partnerData=NotImplemented,
            objectErrorDescription=NotImplemented,
            pluginsData=NotImplemented,
            errorDescription=NotImplemented,
            errorCode=NotImplemented,
            errorType=NotImplemented,
            userId=NotImplemented,
            screenName=NotImplemented,
            email=NotImplemented,
            description=NotImplemented,
            tags=NotImplemented,
            dateOfBirth=NotImplemented,
            country=NotImplemented,
            state=NotImplemented,
            city=NotImplemented,
            zip=NotImplemented,
            gender=NotImplemented,
            firstName=NotImplemented,
            lastName=NotImplemented):
        KalturaBulkUploadResult.__init__(self,
            id,
            bulkUploadJobId,
            lineIndex,
            partnerId,
            status,
            action,
            objectId,
            objectStatus,
            bulkUploadResultObjectType,
            rowData,
            partnerData,
            objectErrorDescription,
            pluginsData,
            errorDescription,
            errorCode,
            errorType)

        # @var string
        self.userId = userId

        # @var string
        self.screenName = screenName

        # @var string
        self.email = email

        # @var string
        self.description = description

        # @var string
        self.tags = tags

        # @var int
        self.dateOfBirth = dateOfBirth

        # @var string
        self.country = country

        # @var string
        self.state = state

        # @var string
        self.city = city

        # @var string
        self.zip = zip

        # @var int
        self.gender = gender

        # @var string
        self.firstName = firstName

        # @var string
        self.lastName = lastName


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'screenName': getXmlNodeText, 
        'email': getXmlNodeText, 
        'description': getXmlNodeText, 
        'tags': getXmlNodeText, 
        'dateOfBirth': getXmlNodeInt, 
        'country': getXmlNodeText, 
        'state': getXmlNodeText, 
        'city': getXmlNodeText, 
        'zip': getXmlNodeText, 
        'gender': getXmlNodeInt, 
        'firstName': getXmlNodeText, 
        'lastName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBulkUploadResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadResultUser.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadResult.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadResultUser")
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addStringIfDefined("screenName", self.screenName)
        kparams.addStringIfDefined("email", self.email)
        kparams.addStringIfDefined("description", self.description)
        kparams.addStringIfDefined("tags", self.tags)
        kparams.addIntIfDefined("dateOfBirth", self.dateOfBirth)
        kparams.addStringIfDefined("country", self.country)
        kparams.addStringIfDefined("state", self.state)
        kparams.addStringIfDefined("city", self.city)
        kparams.addStringIfDefined("zip", self.zip)
        kparams.addIntIfDefined("gender", self.gender)
        kparams.addStringIfDefined("firstName", self.firstName)
        kparams.addStringIfDefined("lastName", self.lastName)
        return kparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getScreenName(self):
        return self.screenName

    def setScreenName(self, newScreenName):
        self.screenName = newScreenName

    def getEmail(self):
        return self.email

    def setEmail(self, newEmail):
        self.email = newEmail

    def getDescription(self):
        return self.description

    def setDescription(self, newDescription):
        self.description = newDescription

    def getTags(self):
        return self.tags

    def setTags(self, newTags):
        self.tags = newTags

    def getDateOfBirth(self):
        return self.dateOfBirth

    def setDateOfBirth(self, newDateOfBirth):
        self.dateOfBirth = newDateOfBirth

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry

    def getState(self):
        return self.state

    def setState(self, newState):
        self.state = newState

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getZip(self):
        return self.zip

    def setZip(self, newZip):
        self.zip = newZip

    def getGender(self):
        return self.gender

    def setGender(self, newGender):
        self.gender = newGender

    def getFirstName(self):
        return self.firstName

    def setFirstName(self, newFirstName):
        self.firstName = newFirstName

    def getLastName(self):
        return self.lastName

    def setLastName(self, newLastName):
        self.lastName = newLastName


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadUserData(KalturaBulkUploadObjectData):
    """This class represents object-specific data passed to the 
     bulk upload job."""

    def __init__(self):
        KalturaBulkUploadObjectData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadObjectData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadUserData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadObjectData.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadUserData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCaptureThumbJobData(KalturaJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            thumbParamsOutputId=NotImplemented,
            thumbAssetId=NotImplemented,
            srcAssetId=NotImplemented,
            srcAssetType=NotImplemented,
            thumbPath=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.actualSrcFileSyncLocalPath = actualSrcFileSyncLocalPath

        # @var string
        self.srcFileSyncRemoteUrl = srcFileSyncRemoteUrl

        # @var int
        self.thumbParamsOutputId = thumbParamsOutputId

        # @var string
        self.thumbAssetId = thumbAssetId

        # @var string
        self.srcAssetId = srcAssetId

        # @var KalturaAssetType
        self.srcAssetType = srcAssetType

        # @var string
        self.thumbPath = thumbPath


    PROPERTY_LOADERS = {
        'srcFileSyncLocalPath': getXmlNodeText, 
        'actualSrcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncRemoteUrl': getXmlNodeText, 
        'thumbParamsOutputId': getXmlNodeInt, 
        'thumbAssetId': getXmlNodeText, 
        'srcAssetId': getXmlNodeText, 
        'srcAssetType': (KalturaEnumsFactory.createString, "KalturaAssetType"), 
        'thumbPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCaptureThumbJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaCaptureThumbJobData")
        kparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        kparams.addStringIfDefined("actualSrcFileSyncLocalPath", self.actualSrcFileSyncLocalPath)
        kparams.addStringIfDefined("srcFileSyncRemoteUrl", self.srcFileSyncRemoteUrl)
        kparams.addIntIfDefined("thumbParamsOutputId", self.thumbParamsOutputId)
        kparams.addStringIfDefined("thumbAssetId", self.thumbAssetId)
        kparams.addStringIfDefined("srcAssetId", self.srcAssetId)
        kparams.addStringEnumIfDefined("srcAssetType", self.srcAssetType)
        kparams.addStringIfDefined("thumbPath", self.thumbPath)
        return kparams

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getActualSrcFileSyncLocalPath(self):
        return self.actualSrcFileSyncLocalPath

    def setActualSrcFileSyncLocalPath(self, newActualSrcFileSyncLocalPath):
        self.actualSrcFileSyncLocalPath = newActualSrcFileSyncLocalPath

    def getSrcFileSyncRemoteUrl(self):
        return self.srcFileSyncRemoteUrl

    def setSrcFileSyncRemoteUrl(self, newSrcFileSyncRemoteUrl):
        self.srcFileSyncRemoteUrl = newSrcFileSyncRemoteUrl

    def getThumbParamsOutputId(self):
        return self.thumbParamsOutputId

    def setThumbParamsOutputId(self, newThumbParamsOutputId):
        self.thumbParamsOutputId = newThumbParamsOutputId

    def getThumbAssetId(self):
        return self.thumbAssetId

    def setThumbAssetId(self, newThumbAssetId):
        self.thumbAssetId = newThumbAssetId

    def getSrcAssetId(self):
        return self.srcAssetId

    def setSrcAssetId(self, newSrcAssetId):
        self.srcAssetId = newSrcAssetId

    def getSrcAssetType(self):
        return self.srcAssetType

    def setSrcAssetType(self, newSrcAssetType):
        self.srcAssetType = newSrcAssetType

    def getThumbPath(self):
        return self.thumbPath

    def setThumbPath(self, newThumbPath):
        self.thumbPath = newThumbPath


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryAdvancedFilter(KalturaSearchItem):
    def __init__(self,
            categoriesMatchOr=NotImplemented,
            categoryEntryStatusIn=NotImplemented,
            orderBy=NotImplemented,
            categoryIdEqual=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var string
        self.categoriesMatchOr = categoriesMatchOr

        # @var string
        self.categoryEntryStatusIn = categoryEntryStatusIn

        # @var KalturaCategoryEntryAdvancedOrderBy
        self.orderBy = orderBy

        # @var int
        self.categoryIdEqual = categoryIdEqual


    PROPERTY_LOADERS = {
        'categoriesMatchOr': getXmlNodeText, 
        'categoryEntryStatusIn': getXmlNodeText, 
        'orderBy': (KalturaEnumsFactory.createString, "KalturaCategoryEntryAdvancedOrderBy"), 
        'categoryIdEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryEntryAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaCategoryEntryAdvancedFilter")
        kparams.addStringIfDefined("categoriesMatchOr", self.categoriesMatchOr)
        kparams.addStringIfDefined("categoryEntryStatusIn", self.categoryEntryStatusIn)
        kparams.addStringEnumIfDefined("orderBy", self.orderBy)
        kparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        return kparams

    def getCategoriesMatchOr(self):
        return self.categoriesMatchOr

    def setCategoriesMatchOr(self, newCategoriesMatchOr):
        self.categoriesMatchOr = newCategoriesMatchOr

    def getCategoryEntryStatusIn(self):
        return self.categoryEntryStatusIn

    def setCategoryEntryStatusIn(self, newCategoryEntryStatusIn):
        self.categoryEntryStatusIn = newCategoryEntryStatusIn

    def getOrderBy(self):
        return self.orderBy

    def setOrderBy(self, newOrderBy):
        self.orderBy = newOrderBy

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaCategoryEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaCategoryEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCategoryEntryListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaCategoryIdentifier(KalturaObjectIdentifier):
    def __init__(self,
            extendedFeatures=NotImplemented,
            identifier=NotImplemented):
        KalturaObjectIdentifier.__init__(self,
            extendedFeatures)

        # Identifier of the object
        # @var KalturaCategoryIdentifierField
        self.identifier = identifier


    PROPERTY_LOADERS = {
        'identifier': (KalturaEnumsFactory.createString, "KalturaCategoryIdentifierField"), 
    }

    def fromXml(self, node):
        KalturaObjectIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectIdentifier.toParams(self)
        kparams.put("objectType", "KalturaCategoryIdentifier")
        kparams.addStringEnumIfDefined("identifier", self.identifier)
        return kparams

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier


# @package Kaltura
# @subpackage Client
class KalturaCategoryListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaCategory
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaCategory), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCategoryListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaCategoryUserAdvancedFilter(KalturaSearchItem):
    def __init__(self,
            memberIdEq=NotImplemented,
            memberIdIn=NotImplemented,
            memberPermissionsMatchOr=NotImplemented,
            memberPermissionsMatchAnd=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var string
        self.memberIdEq = memberIdEq

        # @var string
        self.memberIdIn = memberIdIn

        # @var string
        self.memberPermissionsMatchOr = memberPermissionsMatchOr

        # @var string
        self.memberPermissionsMatchAnd = memberPermissionsMatchAnd


    PROPERTY_LOADERS = {
        'memberIdEq': getXmlNodeText, 
        'memberIdIn': getXmlNodeText, 
        'memberPermissionsMatchOr': getXmlNodeText, 
        'memberPermissionsMatchAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryUserAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaCategoryUserAdvancedFilter")
        kparams.addStringIfDefined("memberIdEq", self.memberIdEq)
        kparams.addStringIfDefined("memberIdIn", self.memberIdIn)
        kparams.addStringIfDefined("memberPermissionsMatchOr", self.memberPermissionsMatchOr)
        kparams.addStringIfDefined("memberPermissionsMatchAnd", self.memberPermissionsMatchAnd)
        return kparams

    def getMemberIdEq(self):
        return self.memberIdEq

    def setMemberIdEq(self, newMemberIdEq):
        self.memberIdEq = newMemberIdEq

    def getMemberIdIn(self):
        return self.memberIdIn

    def setMemberIdIn(self, newMemberIdIn):
        self.memberIdIn = newMemberIdIn

    def getMemberPermissionsMatchOr(self):
        return self.memberPermissionsMatchOr

    def setMemberPermissionsMatchOr(self, newMemberPermissionsMatchOr):
        self.memberPermissionsMatchOr = newMemberPermissionsMatchOr

    def getMemberPermissionsMatchAnd(self):
        return self.memberPermissionsMatchAnd

    def setMemberPermissionsMatchAnd(self, newMemberPermissionsMatchAnd):
        self.memberPermissionsMatchAnd = newMemberPermissionsMatchAnd


# @package Kaltura
# @subpackage Client
class KalturaCategoryUserListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaCategoryUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaCategoryUser), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaCategoryUserListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaClipAttributes(KalturaOperationAttributes):
    """Clip operation attributes"""

    def __init__(self,
            offset=NotImplemented,
            duration=NotImplemented):
        KalturaOperationAttributes.__init__(self)

        # Offset in milliseconds
        # @var int
        self.offset = offset

        # Duration in milliseconds
        # @var int
        self.duration = duration


    PROPERTY_LOADERS = {
        'offset': getXmlNodeInt, 
        'duration': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaOperationAttributes.fromXml(self, node)
        self.fromXmlImpl(node, KalturaClipAttributes.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOperationAttributes.toParams(self)
        kparams.put("objectType", "KalturaClipAttributes")
        kparams.addIntIfDefined("offset", self.offset)
        kparams.addIntIfDefined("duration", self.duration)
        return kparams

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration


# @package Kaltura
# @subpackage Client
class KalturaCompareCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # Value to evaluate against the field and operator
        # @var KalturaIntegerValue
        self.value = value

        # Comparing operator
        # @var KalturaSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'value': (KalturaObjectFactory.create, KalturaIntegerValue), 
        'comparison': (KalturaEnumsFactory.createString, "KalturaSearchConditionComparison"), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaCompareCondition")
        kparams.addObjectIfDefined("value", self.value)
        kparams.addStringEnumIfDefined("comparison", self.comparison)
        return kparams

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Kaltura
# @subpackage Client
class KalturaDataCenterContentResource(KalturaContentResource):
    def __init__(self):
        KalturaContentResource.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataCenterContentResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaDataCenterContentResource")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaConcatAttributes(KalturaOperationAttributes):
    """Concat operation attributes"""

    def __init__(self,
            resource=NotImplemented):
        KalturaOperationAttributes.__init__(self)

        # The resource to be concatenated
        # @var KalturaDataCenterContentResource
        self.resource = resource


    PROPERTY_LOADERS = {
        'resource': (KalturaObjectFactory.create, KalturaDataCenterContentResource), 
    }

    def fromXml(self, node):
        KalturaOperationAttributes.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConcatAttributes.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaOperationAttributes.toParams(self)
        kparams.put("objectType", "KalturaConcatAttributes")
        kparams.addObjectIfDefined("resource", self.resource)
        return kparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource


# @package Kaltura
# @subpackage Client
class KalturaConcatJobData(KalturaJobData):
    def __init__(self,
            srcFiles=NotImplemented,
            destFilePath=NotImplemented,
            flavorAssetId=NotImplemented,
            offset=NotImplemented,
            duration=NotImplemented,
            concatenatedDuration=NotImplemented):
        KalturaJobData.__init__(self)

        # Source files to be concatenated
        # @var array of KalturaString
        self.srcFiles = srcFiles

        # Output file
        # @var string
        self.destFilePath = destFilePath

        # Flavor asset to be ingested with the output
        # @var string
        self.flavorAssetId = flavorAssetId

        # Clipping offset in seconds
        # @var float
        self.offset = offset

        # Clipping duration in seconds
        # @var float
        self.duration = duration

        # duration of the concated video
        # @var float
        self.concatenatedDuration = concatenatedDuration


    PROPERTY_LOADERS = {
        'srcFiles': (KalturaObjectFactory.createArray, KalturaString), 
        'destFilePath': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'offset': getXmlNodeFloat, 
        'duration': getXmlNodeFloat, 
        'concatenatedDuration': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConcatJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaConcatJobData")
        kparams.addArrayIfDefined("srcFiles", self.srcFiles)
        kparams.addStringIfDefined("destFilePath", self.destFilePath)
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addFloatIfDefined("offset", self.offset)
        kparams.addFloatIfDefined("duration", self.duration)
        kparams.addFloatIfDefined("concatenatedDuration", self.concatenatedDuration)
        return kparams

    def getSrcFiles(self):
        return self.srcFiles

    def setSrcFiles(self, newSrcFiles):
        self.srcFiles = newSrcFiles

    def getDestFilePath(self):
        return self.destFilePath

    def setDestFilePath(self, newDestFilePath):
        self.destFilePath = newDestFilePath

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset

    def getDuration(self):
        return self.duration

    def setDuration(self, newDuration):
        self.duration = newDuration

    def getConcatenatedDuration(self):
        return self.concatenatedDuration

    def setConcatenatedDuration(self, newConcatenatedDuration):
        self.concatenatedDuration = newConcatenatedDuration


# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdByIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            targetTypeEqual=NotImplemented,
            targetTypeIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.createdByIdEqual = createdByIdEqual

        # @var KalturaControlPanelCommandType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var KalturaControlPanelCommandTargetType
        self.targetTypeEqual = targetTypeEqual

        # @var string
        self.targetTypeIn = targetTypeIn

        # @var KalturaControlPanelCommandStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'createdByIdEqual': getXmlNodeInt, 
        'typeEqual': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandType"), 
        'typeIn': getXmlNodeText, 
        'targetTypeEqual': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandTargetType"), 
        'targetTypeIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaControlPanelCommandStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaControlPanelCommandBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaControlPanelCommandBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("createdByIdEqual", self.createdByIdEqual)
        kparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntEnumIfDefined("targetTypeEqual", self.targetTypeEqual)
        kparams.addStringIfDefined("targetTypeIn", self.targetTypeIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCreatedByIdEqual(self):
        return self.createdByIdEqual

    def setCreatedByIdEqual(self, newCreatedByIdEqual):
        self.createdByIdEqual = newCreatedByIdEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getTargetTypeEqual(self):
        return self.targetTypeEqual

    def setTargetTypeEqual(self, newTargetTypeEqual):
        self.targetTypeEqual = newTargetTypeEqual

    def getTargetTypeIn(self):
        return self.targetTypeIn

    def setTargetTypeIn(self, newTargetTypeIn):
        self.targetTypeIn = newTargetTypeIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaControlPanelCommand
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaControlPanelCommand), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaControlPanelCommandListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaControlPanelCommandListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaConvartableJobData(KalturaJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # The translated path as used by the scheduler
        # @var string
        self.actualSrcFileSyncLocalPath = actualSrcFileSyncLocalPath

        # @var string
        self.srcFileSyncRemoteUrl = srcFileSyncRemoteUrl

        # @var array of KalturaSourceFileSyncDescriptor
        self.srcFileSyncs = srcFileSyncs

        # @var int
        self.engineVersion = engineVersion

        # @var int
        self.flavorParamsOutputId = flavorParamsOutputId

        # @var KalturaFlavorParamsOutput
        self.flavorParamsOutput = flavorParamsOutput

        # @var int
        self.mediaInfoId = mediaInfoId

        # @var int
        self.currentOperationSet = currentOperationSet

        # @var int
        self.currentOperationIndex = currentOperationIndex

        # @var array of KalturaKeyValue
        self.pluginData = pluginData


    PROPERTY_LOADERS = {
        'srcFileSyncLocalPath': getXmlNodeText, 
        'actualSrcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncRemoteUrl': getXmlNodeText, 
        'srcFileSyncs': (KalturaObjectFactory.createArray, KalturaSourceFileSyncDescriptor), 
        'engineVersion': getXmlNodeInt, 
        'flavorParamsOutputId': getXmlNodeInt, 
        'flavorParamsOutput': (KalturaObjectFactory.create, KalturaFlavorParamsOutput), 
        'mediaInfoId': getXmlNodeInt, 
        'currentOperationSet': getXmlNodeInt, 
        'currentOperationIndex': getXmlNodeInt, 
        'pluginData': (KalturaObjectFactory.createArray, KalturaKeyValue), 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvartableJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaConvartableJobData")
        kparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        kparams.addStringIfDefined("actualSrcFileSyncLocalPath", self.actualSrcFileSyncLocalPath)
        kparams.addStringIfDefined("srcFileSyncRemoteUrl", self.srcFileSyncRemoteUrl)
        kparams.addArrayIfDefined("srcFileSyncs", self.srcFileSyncs)
        kparams.addIntIfDefined("engineVersion", self.engineVersion)
        kparams.addIntIfDefined("flavorParamsOutputId", self.flavorParamsOutputId)
        kparams.addObjectIfDefined("flavorParamsOutput", self.flavorParamsOutput)
        kparams.addIntIfDefined("mediaInfoId", self.mediaInfoId)
        kparams.addIntIfDefined("currentOperationSet", self.currentOperationSet)
        kparams.addIntIfDefined("currentOperationIndex", self.currentOperationIndex)
        kparams.addArrayIfDefined("pluginData", self.pluginData)
        return kparams

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getActualSrcFileSyncLocalPath(self):
        return self.actualSrcFileSyncLocalPath

    def setActualSrcFileSyncLocalPath(self, newActualSrcFileSyncLocalPath):
        self.actualSrcFileSyncLocalPath = newActualSrcFileSyncLocalPath

    def getSrcFileSyncRemoteUrl(self):
        return self.srcFileSyncRemoteUrl

    def setSrcFileSyncRemoteUrl(self, newSrcFileSyncRemoteUrl):
        self.srcFileSyncRemoteUrl = newSrcFileSyncRemoteUrl

    def getSrcFileSyncs(self):
        return self.srcFileSyncs

    def setSrcFileSyncs(self, newSrcFileSyncs):
        self.srcFileSyncs = newSrcFileSyncs

    def getEngineVersion(self):
        return self.engineVersion

    def setEngineVersion(self, newEngineVersion):
        self.engineVersion = newEngineVersion

    def getFlavorParamsOutputId(self):
        return self.flavorParamsOutputId

    def setFlavorParamsOutputId(self, newFlavorParamsOutputId):
        self.flavorParamsOutputId = newFlavorParamsOutputId

    def getFlavorParamsOutput(self):
        return self.flavorParamsOutput

    def setFlavorParamsOutput(self, newFlavorParamsOutput):
        self.flavorParamsOutput = newFlavorParamsOutput

    def getMediaInfoId(self):
        return self.mediaInfoId

    def setMediaInfoId(self, newMediaInfoId):
        self.mediaInfoId = newMediaInfoId

    def getCurrentOperationSet(self):
        return self.currentOperationSet

    def setCurrentOperationSet(self, newCurrentOperationSet):
        self.currentOperationSet = newCurrentOperationSet

    def getCurrentOperationIndex(self):
        return self.currentOperationIndex

    def setCurrentOperationIndex(self, newCurrentOperationIndex):
        self.currentOperationIndex = newCurrentOperationIndex

    def getPluginData(self):
        return self.pluginData

    def setPluginData(self, newPluginData):
        self.pluginData = newPluginData


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParamsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaConversionProfileAssetParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaConversionProfileAssetParams), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileAssetParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileAssetParamsListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaConversionProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaConversionProfile), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaConvertLiveSegmentJobData(KalturaJobData):
    def __init__(self,
            entryId=NotImplemented,
            assetId=NotImplemented,
            mediaServerIndex=NotImplemented,
            fileIndex=NotImplemented,
            srcFilePath=NotImplemented,
            destFilePath=NotImplemented,
            endTime=NotImplemented,
            destDataFilePath=NotImplemented):
        KalturaJobData.__init__(self)

        # Live stream entry id
        # @var string
        self.entryId = entryId

        # @var string
        self.assetId = assetId

        # Primary or secondary media server
        # @var KalturaEntryServerNodeType
        self.mediaServerIndex = mediaServerIndex

        # The index of the file within the entry
        # @var int
        self.fileIndex = fileIndex

        # The recorded live media
        # @var string
        self.srcFilePath = srcFilePath

        # The output file
        # @var string
        self.destFilePath = destFilePath

        # Duration of the live entry including all recorded segments including the current
        # @var float
        self.endTime = endTime

        # The data output file
        # @var string
        self.destDataFilePath = destDataFilePath


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'assetId': getXmlNodeText, 
        'mediaServerIndex': (KalturaEnumsFactory.createString, "KalturaEntryServerNodeType"), 
        'fileIndex': getXmlNodeInt, 
        'srcFilePath': getXmlNodeText, 
        'destFilePath': getXmlNodeText, 
        'endTime': getXmlNodeFloat, 
        'destDataFilePath': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvertLiveSegmentJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaConvertLiveSegmentJobData")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addStringIfDefined("assetId", self.assetId)
        kparams.addStringEnumIfDefined("mediaServerIndex", self.mediaServerIndex)
        kparams.addIntIfDefined("fileIndex", self.fileIndex)
        kparams.addStringIfDefined("srcFilePath", self.srcFilePath)
        kparams.addStringIfDefined("destFilePath", self.destFilePath)
        kparams.addFloatIfDefined("endTime", self.endTime)
        kparams.addStringIfDefined("destDataFilePath", self.destDataFilePath)
        return kparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId

    def getMediaServerIndex(self):
        return self.mediaServerIndex

    def setMediaServerIndex(self, newMediaServerIndex):
        self.mediaServerIndex = newMediaServerIndex

    def getFileIndex(self):
        return self.fileIndex

    def setFileIndex(self, newFileIndex):
        self.fileIndex = newFileIndex

    def getSrcFilePath(self):
        return self.srcFilePath

    def setSrcFilePath(self, newSrcFilePath):
        self.srcFilePath = newSrcFilePath

    def getDestFilePath(self):
        return self.destFilePath

    def setDestFilePath(self, newDestFilePath):
        self.destFilePath = newDestFilePath

    def getEndTime(self):
        return self.endTime

    def setEndTime(self, newEndTime):
        self.endTime = newEndTime

    def getDestDataFilePath(self):
        return self.destDataFilePath

    def setDestDataFilePath(self, newDestDataFilePath):
        self.destDataFilePath = newDestDataFilePath


# @package Kaltura
# @subpackage Client
class KalturaConvertProfileJobData(KalturaJobData):
    def __init__(self,
            inputFileSyncLocalPath=NotImplemented,
            thumbHeight=NotImplemented,
            thumbBitrate=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.inputFileSyncLocalPath = inputFileSyncLocalPath

        # The height of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbHeight = thumbHeight

        # The bit rate of last created thumbnail, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbBitrate = thumbBitrate


    PROPERTY_LOADERS = {
        'inputFileSyncLocalPath': getXmlNodeText, 
        'thumbHeight': getXmlNodeInt, 
        'thumbBitrate': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvertProfileJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaConvertProfileJobData")
        kparams.addStringIfDefined("inputFileSyncLocalPath", self.inputFileSyncLocalPath)
        kparams.addIntIfDefined("thumbHeight", self.thumbHeight)
        kparams.addIntIfDefined("thumbBitrate", self.thumbBitrate)
        return kparams

    def getInputFileSyncLocalPath(self):
        return self.inputFileSyncLocalPath

    def setInputFileSyncLocalPath(self, newInputFileSyncLocalPath):
        self.inputFileSyncLocalPath = newInputFileSyncLocalPath

    def getThumbHeight(self):
        return self.thumbHeight

    def setThumbHeight(self, newThumbHeight):
        self.thumbHeight = newThumbHeight

    def getThumbBitrate(self):
        return self.thumbBitrate

    def setThumbBitrate(self, newThumbBitrate):
        self.thumbBitrate = newThumbBitrate


# @package Kaltura
# @subpackage Client
class KalturaCopyPartnerJobData(KalturaJobData):
    def __init__(self,
            fromPartnerId=NotImplemented,
            toPartnerId=NotImplemented):
        KalturaJobData.__init__(self)

        # Id of the partner to copy from
        # @var int
        self.fromPartnerId = fromPartnerId

        # Id of the partner to copy to
        # @var int
        self.toPartnerId = toPartnerId


    PROPERTY_LOADERS = {
        'fromPartnerId': getXmlNodeInt, 
        'toPartnerId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCopyPartnerJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaCopyPartnerJobData")
        kparams.addIntIfDefined("fromPartnerId", self.fromPartnerId)
        kparams.addIntIfDefined("toPartnerId", self.toPartnerId)
        return kparams

    def getFromPartnerId(self):
        return self.fromPartnerId

    def setFromPartnerId(self, newFromPartnerId):
        self.fromPartnerId = newFromPartnerId

    def getToPartnerId(self):
        return self.toPartnerId

    def setToPartnerId(self, newToPartnerId):
        self.toPartnerId = newToPartnerId


# @package Kaltura
# @subpackage Client
class KalturaCountryRestriction(KalturaBaseRestriction):
    def __init__(self,
            countryRestrictionType=NotImplemented,
            countryList=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # Country restriction type (Allow or deny)
        # @var KalturaCountryRestrictionType
        self.countryRestrictionType = countryRestrictionType

        # Comma separated list of country codes to allow to deny
        # @var string
        self.countryList = countryList


    PROPERTY_LOADERS = {
        'countryRestrictionType': (KalturaEnumsFactory.createInt, "KalturaCountryRestrictionType"), 
        'countryList': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaCountryRestriction")
        kparams.addIntEnumIfDefined("countryRestrictionType", self.countryRestrictionType)
        kparams.addStringIfDefined("countryList", self.countryList)
        return kparams

    def getCountryRestrictionType(self):
        return self.countryRestrictionType

    def setCountryRestrictionType(self, newCountryRestrictionType):
        self.countryRestrictionType = newCountryRestrictionType

    def getCountryList(self):
        return self.countryList

    def setCountryList(self, newCountryList):
        self.countryList = newCountryList


# @package Kaltura
# @subpackage Client
class KalturaDataListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaDataEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaDataEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDataListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaDeleteFileJobData(KalturaJobData):
    def __init__(self,
            localFileSyncPath=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.localFileSyncPath = localFileSyncPath


    PROPERTY_LOADERS = {
        'localFileSyncPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeleteFileJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaDeleteFileJobData")
        kparams.addStringIfDefined("localFileSyncPath", self.localFileSyncPath)
        return kparams

    def getLocalFileSyncPath(self):
        return self.localFileSyncPath

    def setLocalFileSyncPath(self, newLocalFileSyncPath):
        self.localFileSyncPath = newLocalFileSyncPath


# @package Kaltura
# @subpackage Client
class KalturaDeleteJobData(KalturaJobData):
    def __init__(self,
            filter=NotImplemented):
        KalturaJobData.__init__(self)

        # The filter should return the list of objects that need to be deleted.
        # @var KalturaFilter
        self.filter = filter


    PROPERTY_LOADERS = {
        'filter': (KalturaObjectFactory.create, KalturaFilter), 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeleteJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaDeleteJobData")
        kparams.addObjectIfDefined("filter", self.filter)
        return kparams

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiAppleHttpManifest(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            supportClipping=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use timing parameters - clipTo / seekFrom
        # @var bool
        self.supportClipping = supportClipping


    PROPERTY_LOADERS = {
        'supportClipping': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiAppleHttpManifest.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiAppleHttpManifest")
        kparams.addBoolIfDefined("supportClipping", self.supportClipping)
        return kparams

    def getSupportClipping(self):
        return self.supportClipping

    def setSupportClipping(self, newSupportClipping):
        self.supportClipping = newSupportClipping


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHds(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            supportClipping=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use timing parameters - clipTo / seekFrom
        # @var bool
        self.supportClipping = supportClipping


    PROPERTY_LOADERS = {
        'supportClipping': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHds.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHds")
        kparams.addBoolIfDefined("supportClipping", self.supportClipping)
        return kparams

    def getSupportClipping(self):
        return self.supportClipping

    def setSupportClipping(self, newSupportClipping):
        self.supportClipping = newSupportClipping


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHttp(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            useIntelliseek=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # Should we use intelliseek
        # @var bool
        self.useIntelliseek = useIntelliseek


    PROPERTY_LOADERS = {
        'useIntelliseek': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHttp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHttp")
        kparams.addBoolIfDefined("useIntelliseek", self.useIntelliseek)
        return kparams

    def getUseIntelliseek(self):
        return self.useIntelliseek

    def setUseIntelliseek(self, newUseIntelliseek):
        self.useIntelliseek = newUseIntelliseek


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaPlaybackProtocol
        self.streamerTypeEqual = streamerTypeEqual

        # @var KalturaDeliveryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'streamerTypeEqual': (KalturaEnumsFactory.createString, "KalturaPlaybackProtocol"), 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaDeliveryStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addStringEnumIfDefined("streamerTypeEqual", self.streamerTypeEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStreamerTypeEqual(self):
        return self.streamerTypeEqual

    def setStreamerTypeEqual(self, newStreamerTypeEqual):
        self.streamerTypeEqual = newStreamerTypeEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            deliveryProfileIds=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # The delivery ids that are accepted by this condition
        # @var array of KalturaIntegerValue
        self.deliveryProfileIds = deliveryProfileIds


    PROPERTY_LOADERS = {
        'deliveryProfileIds': (KalturaObjectFactory.createArray, KalturaIntegerValue), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileCondition")
        kparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        return kparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericAppleHttp(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented,
            manifestRedirect=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass

        # Enable to make playManifest redirect to the domain of the delivery profile
        # @var KalturaNullableBoolean
        self.manifestRedirect = manifestRedirect


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
        'manifestRedirect': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericAppleHttp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericAppleHttp")
        kparams.addStringIfDefined("pattern", self.pattern)
        kparams.addStringIfDefined("rendererClass", self.rendererClass)
        kparams.addIntEnumIfDefined("manifestRedirect", self.manifestRedirect)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass

    def getManifestRedirect(self):
        return self.manifestRedirect

    def setManifestRedirect(self, newManifestRedirect):
        self.manifestRedirect = newManifestRedirect


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHds(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHds.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHds")
        kparams.addStringIfDefined("pattern", self.pattern)
        kparams.addStringIfDefined("rendererClass", self.rendererClass)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHttp(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHttp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHttp")
        kparams.addStringIfDefined("pattern", self.pattern)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericSilverLight(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            pattern=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var string
        self.pattern = pattern


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericSilverLight.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericSilverLight")
        kparams.addStringIfDefined("pattern", self.pattern)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaDeliveryProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaDeliveryProfile), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileLiveAppleHttp(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            disableExtraAttributes=NotImplemented,
            forceProxy=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # @var bool
        self.disableExtraAttributes = disableExtraAttributes

        # @var bool
        self.forceProxy = forceProxy


    PROPERTY_LOADERS = {
        'disableExtraAttributes': getXmlNodeBool, 
        'forceProxy': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileLiveAppleHttp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileLiveAppleHttp")
        kparams.addBoolIfDefined("disableExtraAttributes", self.disableExtraAttributes)
        kparams.addBoolIfDefined("forceProxy", self.forceProxy)
        return kparams

    def getDisableExtraAttributes(self):
        return self.disableExtraAttributes

    def setDisableExtraAttributes(self, newDisableExtraAttributes):
        self.disableExtraAttributes = newDisableExtraAttributes

    def getForceProxy(self):
        return self.forceProxy

    def setForceProxy(self, newForceProxy):
        self.forceProxy = newForceProxy


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileRtmp(KalturaDeliveryProfile):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            enforceRtmpe=NotImplemented,
            prefix=NotImplemented):
        KalturaDeliveryProfile.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams)

        # enforceRtmpe
        # @var bool
        self.enforceRtmpe = enforceRtmpe

        # a prefix that is added to all stream urls (replaces storageProfile::rtmpPrefix)
        # @var string
        self.prefix = prefix


    PROPERTY_LOADERS = {
        'enforceRtmpe': getXmlNodeBool, 
        'prefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileRtmp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfile.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileRtmp")
        kparams.addBoolIfDefined("enforceRtmpe", self.enforceRtmpe)
        kparams.addStringIfDefined("prefix", self.prefix)
        return kparams

    def getEnforceRtmpe(self):
        return self.enforceRtmpe

    def setEnforceRtmpe(self, newEnforceRtmpe):
        self.enforceRtmpe = newEnforceRtmpe

    def getPrefix(self):
        return self.prefix

    def setPrefix(self, newPrefix):
        self.prefix = newPrefix


# @package Kaltura
# @subpackage Client
class KalturaDeliveryServerNode(KalturaServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented):
        KalturaServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId)

        # Delivery server playback Domain
        # @var string
        self.playbackDomain = playbackDomain


    PROPERTY_LOADERS = {
        'playbackDomain': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaServerNode.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaServerNode.toParams(self)
        kparams.put("objectType", "KalturaDeliveryServerNode")
        kparams.addStringIfDefined("playbackDomain", self.playbackDomain)
        return kparams

    def getPlaybackDomain(self):
        return self.playbackDomain

    def setPlaybackDomain(self, newPlaybackDomain):
        self.playbackDomain = newPlaybackDomain


# @package Kaltura
# @subpackage Client
class KalturaDirectoryRestriction(KalturaBaseRestriction):
    def __init__(self,
            directoryRestrictionType=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # Kaltura directory restriction type
        # @var KalturaDirectoryRestrictionType
        self.directoryRestrictionType = directoryRestrictionType


    PROPERTY_LOADERS = {
        'directoryRestrictionType': (KalturaEnumsFactory.createInt, "KalturaDirectoryRestrictionType"), 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDirectoryRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaDirectoryRestriction")
        kparams.addIntEnumIfDefined("directoryRestrictionType", self.directoryRestrictionType)
        return kparams

    def getDirectoryRestrictionType(self):
        return self.directoryRestrictionType

    def setDirectoryRestrictionType(self, newDirectoryRestrictionType):
        self.directoryRestrictionType = newDirectoryRestrictionType


# @package Kaltura
# @subpackage Client
class KalturaDrmEntryContextPluginData(KalturaPluginData):
    def __init__(self,
            flavorData=NotImplemented):
        KalturaPluginData.__init__(self)

        # For the uDRM we give the drm context data which is a json encoding of an array containing the uDRM data
        #      for each flavor that is required from this getContextData request.
        # @var string
        self.flavorData = flavorData


    PROPERTY_LOADERS = {
        'flavorData': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaPluginData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDrmEntryContextPluginData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPluginData.toParams(self)
        kparams.put("objectType", "KalturaDrmEntryContextPluginData")
        kparams.addStringIfDefined("flavorData", self.flavorData)
        return kparams

    def getFlavorData(self):
        return self.flavorData

    def setFlavorData(self, newFlavorData):
        self.flavorData = newFlavorData


# @package Kaltura
# @subpackage Client
class KalturaCategoryUserBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            permissionLevelEqual=NotImplemented,
            permissionLevelIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updateMethodEqual=NotImplemented,
            updateMethodIn=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            categoryFullIdsEqual=NotImplemented,
            permissionNamesMatchAnd=NotImplemented,
            permissionNamesMatchOr=NotImplemented,
            permissionNamesNotContains=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.categoryIdEqual = categoryIdEqual

        # @var string
        self.categoryIdIn = categoryIdIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var KalturaCategoryUserPermissionLevel
        self.permissionLevelEqual = permissionLevelEqual

        # @var string
        self.permissionLevelIn = permissionLevelIn

        # @var KalturaCategoryUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaUpdateMethodType
        self.updateMethodEqual = updateMethodEqual

        # @var string
        self.updateMethodIn = updateMethodIn

        # @var string
        self.categoryFullIdsStartsWith = categoryFullIdsStartsWith

        # @var string
        self.categoryFullIdsEqual = categoryFullIdsEqual

        # @var string
        self.permissionNamesMatchAnd = permissionNamesMatchAnd

        # @var string
        self.permissionNamesMatchOr = permissionNamesMatchOr

        # @var string
        self.permissionNamesNotContains = permissionNamesNotContains


    PROPERTY_LOADERS = {
        'categoryIdEqual': getXmlNodeInt, 
        'categoryIdIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'permissionLevelEqual': (KalturaEnumsFactory.createInt, "KalturaCategoryUserPermissionLevel"), 
        'permissionLevelIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaCategoryUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'updateMethodEqual': (KalturaEnumsFactory.createInt, "KalturaUpdateMethodType"), 
        'updateMethodIn': getXmlNodeText, 
        'categoryFullIdsStartsWith': getXmlNodeText, 
        'categoryFullIdsEqual': getXmlNodeText, 
        'permissionNamesMatchAnd': getXmlNodeText, 
        'permissionNamesMatchOr': getXmlNodeText, 
        'permissionNamesNotContains': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryUserBaseFilter")
        kparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        kparams.addStringIfDefined("categoryIdIn", self.categoryIdIn)
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addStringIfDefined("userIdIn", self.userIdIn)
        kparams.addIntEnumIfDefined("permissionLevelEqual", self.permissionLevelEqual)
        kparams.addStringIfDefined("permissionLevelIn", self.permissionLevelIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntEnumIfDefined("updateMethodEqual", self.updateMethodEqual)
        kparams.addStringIfDefined("updateMethodIn", self.updateMethodIn)
        kparams.addStringIfDefined("categoryFullIdsStartsWith", self.categoryFullIdsStartsWith)
        kparams.addStringIfDefined("categoryFullIdsEqual", self.categoryFullIdsEqual)
        kparams.addStringIfDefined("permissionNamesMatchAnd", self.permissionNamesMatchAnd)
        kparams.addStringIfDefined("permissionNamesMatchOr", self.permissionNamesMatchOr)
        kparams.addStringIfDefined("permissionNamesNotContains", self.permissionNamesNotContains)
        return kparams

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual

    def getCategoryIdIn(self):
        return self.categoryIdIn

    def setCategoryIdIn(self, newCategoryIdIn):
        self.categoryIdIn = newCategoryIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getPermissionLevelEqual(self):
        return self.permissionLevelEqual

    def setPermissionLevelEqual(self, newPermissionLevelEqual):
        self.permissionLevelEqual = newPermissionLevelEqual

    def getPermissionLevelIn(self):
        return self.permissionLevelIn

    def setPermissionLevelIn(self, newPermissionLevelIn):
        self.permissionLevelIn = newPermissionLevelIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getUpdateMethodEqual(self):
        return self.updateMethodEqual

    def setUpdateMethodEqual(self, newUpdateMethodEqual):
        self.updateMethodEqual = newUpdateMethodEqual

    def getUpdateMethodIn(self):
        return self.updateMethodIn

    def setUpdateMethodIn(self, newUpdateMethodIn):
        self.updateMethodIn = newUpdateMethodIn

    def getCategoryFullIdsStartsWith(self):
        return self.categoryFullIdsStartsWith

    def setCategoryFullIdsStartsWith(self, newCategoryFullIdsStartsWith):
        self.categoryFullIdsStartsWith = newCategoryFullIdsStartsWith

    def getCategoryFullIdsEqual(self):
        return self.categoryFullIdsEqual

    def setCategoryFullIdsEqual(self, newCategoryFullIdsEqual):
        self.categoryFullIdsEqual = newCategoryFullIdsEqual

    def getPermissionNamesMatchAnd(self):
        return self.permissionNamesMatchAnd

    def setPermissionNamesMatchAnd(self, newPermissionNamesMatchAnd):
        self.permissionNamesMatchAnd = newPermissionNamesMatchAnd

    def getPermissionNamesMatchOr(self):
        return self.permissionNamesMatchOr

    def setPermissionNamesMatchOr(self, newPermissionNamesMatchOr):
        self.permissionNamesMatchOr = newPermissionNamesMatchOr

    def getPermissionNamesNotContains(self):
        return self.permissionNamesNotContains

    def setPermissionNamesNotContains(self, newPermissionNamesNotContains):
        self.permissionNamesNotContains = newPermissionNamesNotContains


# @package Kaltura
# @subpackage Client
class KalturaCategoryUserFilter(KalturaCategoryUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            permissionLevelEqual=NotImplemented,
            permissionLevelIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updateMethodEqual=NotImplemented,
            updateMethodIn=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            categoryFullIdsEqual=NotImplemented,
            permissionNamesMatchAnd=NotImplemented,
            permissionNamesMatchOr=NotImplemented,
            permissionNamesNotContains=NotImplemented,
            categoryDirectMembers=NotImplemented,
            freeText=NotImplemented,
            relatedGroupsByUserId=NotImplemented):
        KalturaCategoryUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            categoryIdEqual,
            categoryIdIn,
            userIdEqual,
            userIdIn,
            permissionLevelEqual,
            permissionLevelIn,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updateMethodEqual,
            updateMethodIn,
            categoryFullIdsStartsWith,
            categoryFullIdsEqual,
            permissionNamesMatchAnd,
            permissionNamesMatchOr,
            permissionNamesNotContains)

        # Return the list of categoryUser that are not inherited from parent category - only the direct categoryUsers.
        # @var bool
        self.categoryDirectMembers = categoryDirectMembers

        # Free text search on user id or screen name
        # @var string
        self.freeText = freeText

        # Return a list of categoryUser that related to the userId in this field by groups
        # @var string
        self.relatedGroupsByUserId = relatedGroupsByUserId


    PROPERTY_LOADERS = {
        'categoryDirectMembers': getXmlNodeBool, 
        'freeText': getXmlNodeText, 
        'relatedGroupsByUserId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCategoryUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryUserBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryUserFilter")
        kparams.addBoolIfDefined("categoryDirectMembers", self.categoryDirectMembers)
        kparams.addStringIfDefined("freeText", self.freeText)
        kparams.addStringIfDefined("relatedGroupsByUserId", self.relatedGroupsByUserId)
        return kparams

    def getCategoryDirectMembers(self):
        return self.categoryDirectMembers

    def setCategoryDirectMembers(self, newCategoryDirectMembers):
        self.categoryDirectMembers = newCategoryDirectMembers

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getRelatedGroupsByUserId(self):
        return self.relatedGroupsByUserId

    def setRelatedGroupsByUserId(self, newRelatedGroupsByUserId):
        self.relatedGroupsByUserId = newRelatedGroupsByUserId


# @package Kaltura
# @subpackage Client
class KalturaUserBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var KalturaUserType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.screenNameLike = screenNameLike

        # @var string
        self.screenNameStartsWith = screenNameStartsWith

        # @var string
        self.emailLike = emailLike

        # @var string
        self.emailStartsWith = emailStartsWith

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var KalturaUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var string
        self.firstNameStartsWith = firstNameStartsWith

        # @var string
        self.lastNameStartsWith = lastNameStartsWith

        # @var KalturaNullableBoolean
        self.isAdminEqual = isAdminEqual


    PROPERTY_LOADERS = {
        'partnerIdEqual': getXmlNodeInt, 
        'typeEqual': (KalturaEnumsFactory.createInt, "KalturaUserType"), 
        'typeIn': getXmlNodeText, 
        'screenNameLike': getXmlNodeText, 
        'screenNameStartsWith': getXmlNodeText, 
        'emailLike': getXmlNodeText, 
        'emailStartsWith': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'firstNameStartsWith': getXmlNodeText, 
        'lastNameStartsWith': getXmlNodeText, 
        'isAdminEqual': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaUserBaseFilter")
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringIfDefined("screenNameLike", self.screenNameLike)
        kparams.addStringIfDefined("screenNameStartsWith", self.screenNameStartsWith)
        kparams.addStringIfDefined("emailLike", self.emailLike)
        kparams.addStringIfDefined("emailStartsWith", self.emailStartsWith)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addStringIfDefined("firstNameStartsWith", self.firstNameStartsWith)
        kparams.addStringIfDefined("lastNameStartsWith", self.lastNameStartsWith)
        kparams.addIntEnumIfDefined("isAdminEqual", self.isAdminEqual)
        return kparams

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getScreenNameLike(self):
        return self.screenNameLike

    def setScreenNameLike(self, newScreenNameLike):
        self.screenNameLike = newScreenNameLike

    def getScreenNameStartsWith(self):
        return self.screenNameStartsWith

    def setScreenNameStartsWith(self, newScreenNameStartsWith):
        self.screenNameStartsWith = newScreenNameStartsWith

    def getEmailLike(self):
        return self.emailLike

    def setEmailLike(self, newEmailLike):
        self.emailLike = newEmailLike

    def getEmailStartsWith(self):
        return self.emailStartsWith

    def setEmailStartsWith(self, newEmailStartsWith):
        self.emailStartsWith = newEmailStartsWith

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getFirstNameStartsWith(self):
        return self.firstNameStartsWith

    def setFirstNameStartsWith(self, newFirstNameStartsWith):
        self.firstNameStartsWith = newFirstNameStartsWith

    def getLastNameStartsWith(self):
        return self.lastNameStartsWith

    def setLastNameStartsWith(self, newLastNameStartsWith):
        self.lastNameStartsWith = newLastNameStartsWith

    def getIsAdminEqual(self):
        return self.isAdminEqual

    def setIsAdminEqual(self, newIsAdminEqual):
        self.isAdminEqual = newIsAdminEqual


# @package Kaltura
# @subpackage Client
class KalturaUserFilter(KalturaUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        KalturaUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual)

        # @var string
        self.idOrScreenNameStartsWith = idOrScreenNameStartsWith

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var KalturaNullableBoolean
        self.loginEnabledEqual = loginEnabledEqual

        # @var string
        self.roleIdEqual = roleIdEqual

        # @var string
        self.roleIdsEqual = roleIdsEqual

        # @var string
        self.roleIdsIn = roleIdsIn

        # @var string
        self.firstNameOrLastNameStartsWith = firstNameOrLastNameStartsWith

        # Permission names filter expression
        # @var string
        self.permissionNamesMultiLikeOr = permissionNamesMultiLikeOr

        # Permission names filter expression
        # @var string
        self.permissionNamesMultiLikeAnd = permissionNamesMultiLikeAnd


    PROPERTY_LOADERS = {
        'idOrScreenNameStartsWith': getXmlNodeText, 
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'loginEnabledEqual': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'roleIdEqual': getXmlNodeText, 
        'roleIdsEqual': getXmlNodeText, 
        'roleIdsIn': getXmlNodeText, 
        'firstNameOrLastNameStartsWith': getXmlNodeText, 
        'permissionNamesMultiLikeOr': getXmlNodeText, 
        'permissionNamesMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUserFilter")
        kparams.addStringIfDefined("idOrScreenNameStartsWith", self.idOrScreenNameStartsWith)
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntEnumIfDefined("loginEnabledEqual", self.loginEnabledEqual)
        kparams.addStringIfDefined("roleIdEqual", self.roleIdEqual)
        kparams.addStringIfDefined("roleIdsEqual", self.roleIdsEqual)
        kparams.addStringIfDefined("roleIdsIn", self.roleIdsIn)
        kparams.addStringIfDefined("firstNameOrLastNameStartsWith", self.firstNameOrLastNameStartsWith)
        kparams.addStringIfDefined("permissionNamesMultiLikeOr", self.permissionNamesMultiLikeOr)
        kparams.addStringIfDefined("permissionNamesMultiLikeAnd", self.permissionNamesMultiLikeAnd)
        return kparams

    def getIdOrScreenNameStartsWith(self):
        return self.idOrScreenNameStartsWith

    def setIdOrScreenNameStartsWith(self, newIdOrScreenNameStartsWith):
        self.idOrScreenNameStartsWith = newIdOrScreenNameStartsWith

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getLoginEnabledEqual(self):
        return self.loginEnabledEqual

    def setLoginEnabledEqual(self, newLoginEnabledEqual):
        self.loginEnabledEqual = newLoginEnabledEqual

    def getRoleIdEqual(self):
        return self.roleIdEqual

    def setRoleIdEqual(self, newRoleIdEqual):
        self.roleIdEqual = newRoleIdEqual

    def getRoleIdsEqual(self):
        return self.roleIdsEqual

    def setRoleIdsEqual(self, newRoleIdsEqual):
        self.roleIdsEqual = newRoleIdsEqual

    def getRoleIdsIn(self):
        return self.roleIdsIn

    def setRoleIdsIn(self, newRoleIdsIn):
        self.roleIdsIn = newRoleIdsIn

    def getFirstNameOrLastNameStartsWith(self):
        return self.firstNameOrLastNameStartsWith

    def setFirstNameOrLastNameStartsWith(self, newFirstNameOrLastNameStartsWith):
        self.firstNameOrLastNameStartsWith = newFirstNameOrLastNameStartsWith

    def getPermissionNamesMultiLikeOr(self):
        return self.permissionNamesMultiLikeOr

    def setPermissionNamesMultiLikeOr(self, newPermissionNamesMultiLikeOr):
        self.permissionNamesMultiLikeOr = newPermissionNamesMultiLikeOr

    def getPermissionNamesMultiLikeAnd(self):
        return self.permissionNamesMultiLikeAnd

    def setPermissionNamesMultiLikeAnd(self, newPermissionNamesMultiLikeAnd):
        self.permissionNamesMultiLikeAnd = newPermissionNamesMultiLikeAnd


# @package Kaltura
# @subpackage Client
class KalturaEntryContext(KalturaContext):
    def __init__(self,
            entryId=NotImplemented,
            followEntryRedirect=NotImplemented):
        KalturaContext.__init__(self)

        # The entry ID in the context of which the playlist should be built
        # @var string
        self.entryId = entryId

        # Is this a redirected entry followup?
        # @var KalturaNullableBoolean
        self.followEntryRedirect = followEntryRedirect


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'followEntryRedirect': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaContext.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryContext.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContext.toParams(self)
        kparams.put("objectType", "KalturaEntryContext")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntEnumIfDefined("followEntryRedirect", self.followEntryRedirect)
        return kparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getFollowEntryRedirect(self):
        return self.followEntryRedirect

    def setFollowEntryRedirect(self, newFollowEntryRedirect):
        self.followEntryRedirect = newFollowEntryRedirect


# @package Kaltura
# @subpackage Client
class KalturaEntryContextDataParams(KalturaAccessControlScope):
    """Object which contains contextual entry-related data."""

    def __init__(self,
            referrer=NotImplemented,
            ip=NotImplemented,
            ks=NotImplemented,
            userAgent=NotImplemented,
            time=NotImplemented,
            contexts=NotImplemented,
            hashes=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorTags=NotImplemented,
            streamerType=NotImplemented,
            mediaProtocol=NotImplemented):
        KalturaAccessControlScope.__init__(self,
            referrer,
            ip,
            ks,
            userAgent,
            time,
            contexts,
            hashes)

        # Id of the current flavor.
        # @var string
        self.flavorAssetId = flavorAssetId

        # The tags of the flavors that should be used for playback.
        # @var string
        self.flavorTags = flavorTags

        # Playback streamer type: RTMP, HTTP, appleHttps, rtsp, sl.
        # @var string
        self.streamerType = streamerType

        # Protocol of the specific media object.
        # @var string
        self.mediaProtocol = mediaProtocol


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'flavorTags': getXmlNodeText, 
        'streamerType': getXmlNodeText, 
        'mediaProtocol': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAccessControlScope.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryContextDataParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAccessControlScope.toParams(self)
        kparams.put("objectType", "KalturaEntryContextDataParams")
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addStringIfDefined("flavorTags", self.flavorTags)
        kparams.addStringIfDefined("streamerType", self.streamerType)
        kparams.addStringIfDefined("mediaProtocol", self.mediaProtocol)
        return kparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFlavorTags(self):
        return self.flavorTags

    def setFlavorTags(self, newFlavorTags):
        self.flavorTags = newFlavorTags

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getMediaProtocol(self):
        return self.mediaProtocol

    def setMediaProtocol(self, newMediaProtocol):
        self.mediaProtocol = newMediaProtocol


# @package Kaltura
# @subpackage Client
class KalturaEntryContextDataResult(KalturaContextDataResult):
    def __init__(self,
            messages=NotImplemented,
            actions=NotImplemented,
            isSiteRestricted=NotImplemented,
            isCountryRestricted=NotImplemented,
            isSessionRestricted=NotImplemented,
            isIpAddressRestricted=NotImplemented,
            isUserAgentRestricted=NotImplemented,
            previewLength=NotImplemented,
            isScheduledNow=NotImplemented,
            isAdmin=NotImplemented,
            streamerType=NotImplemented,
            mediaProtocol=NotImplemented,
            storageProfilesXML=NotImplemented,
            accessControlMessages=NotImplemented,
            accessControlActions=NotImplemented,
            flavorAssets=NotImplemented,
            msDuration=NotImplemented,
            pluginData=NotImplemented):
        KalturaContextDataResult.__init__(self,
            messages,
            actions)

        # @var bool
        self.isSiteRestricted = isSiteRestricted

        # @var bool
        self.isCountryRestricted = isCountryRestricted

        # @var bool
        self.isSessionRestricted = isSessionRestricted

        # @var bool
        self.isIpAddressRestricted = isIpAddressRestricted

        # @var bool
        self.isUserAgentRestricted = isUserAgentRestricted

        # @var int
        self.previewLength = previewLength

        # @var bool
        self.isScheduledNow = isScheduledNow

        # @var bool
        self.isAdmin = isAdmin

        # http/rtmp/hdnetwork
        # @var string
        self.streamerType = streamerType

        # http/https, rtmp/rtmpe
        # @var string
        self.mediaProtocol = mediaProtocol

        # @var string
        self.storageProfilesXML = storageProfilesXML

        # Array of messages as received from the access control rules that invalidated
        # @var array of KalturaString
        self.accessControlMessages = accessControlMessages

        # Array of actions as received from the access control rules that invalidated
        # @var array of KalturaRuleAction
        self.accessControlActions = accessControlActions

        # Array of allowed flavor assets according to access control limitations and requested tags
        # @var array of KalturaFlavorAsset
        self.flavorAssets = flavorAssets

        # The duration of the entry in milliseconds
        # @var int
        self.msDuration = msDuration

        # Array of allowed flavor assets according to access control limitations and requested tags
        # @var map
        self.pluginData = pluginData


    PROPERTY_LOADERS = {
        'isSiteRestricted': getXmlNodeBool, 
        'isCountryRestricted': getXmlNodeBool, 
        'isSessionRestricted': getXmlNodeBool, 
        'isIpAddressRestricted': getXmlNodeBool, 
        'isUserAgentRestricted': getXmlNodeBool, 
        'previewLength': getXmlNodeInt, 
        'isScheduledNow': getXmlNodeBool, 
        'isAdmin': getXmlNodeBool, 
        'streamerType': getXmlNodeText, 
        'mediaProtocol': getXmlNodeText, 
        'storageProfilesXML': getXmlNodeText, 
        'accessControlMessages': (KalturaObjectFactory.createArray, KalturaString), 
        'accessControlActions': (KalturaObjectFactory.createArray, KalturaRuleAction), 
        'flavorAssets': (KalturaObjectFactory.createArray, KalturaFlavorAsset), 
        'msDuration': getXmlNodeInt, 
        'pluginData': (KalturaObjectFactory.create, map), 
    }

    def fromXml(self, node):
        KalturaContextDataResult.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryContextDataResult.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContextDataResult.toParams(self)
        kparams.put("objectType", "KalturaEntryContextDataResult")
        kparams.addBoolIfDefined("isSiteRestricted", self.isSiteRestricted)
        kparams.addBoolIfDefined("isCountryRestricted", self.isCountryRestricted)
        kparams.addBoolIfDefined("isSessionRestricted", self.isSessionRestricted)
        kparams.addBoolIfDefined("isIpAddressRestricted", self.isIpAddressRestricted)
        kparams.addBoolIfDefined("isUserAgentRestricted", self.isUserAgentRestricted)
        kparams.addIntIfDefined("previewLength", self.previewLength)
        kparams.addBoolIfDefined("isScheduledNow", self.isScheduledNow)
        kparams.addBoolIfDefined("isAdmin", self.isAdmin)
        kparams.addStringIfDefined("streamerType", self.streamerType)
        kparams.addStringIfDefined("mediaProtocol", self.mediaProtocol)
        kparams.addStringIfDefined("storageProfilesXML", self.storageProfilesXML)
        kparams.addArrayIfDefined("accessControlMessages", self.accessControlMessages)
        kparams.addArrayIfDefined("accessControlActions", self.accessControlActions)
        kparams.addArrayIfDefined("flavorAssets", self.flavorAssets)
        kparams.addIntIfDefined("msDuration", self.msDuration)
        kparams.addObjectIfDefined("pluginData", self.pluginData)
        return kparams

    def getIsSiteRestricted(self):
        return self.isSiteRestricted

    def setIsSiteRestricted(self, newIsSiteRestricted):
        self.isSiteRestricted = newIsSiteRestricted

    def getIsCountryRestricted(self):
        return self.isCountryRestricted

    def setIsCountryRestricted(self, newIsCountryRestricted):
        self.isCountryRestricted = newIsCountryRestricted

    def getIsSessionRestricted(self):
        return self.isSessionRestricted

    def setIsSessionRestricted(self, newIsSessionRestricted):
        self.isSessionRestricted = newIsSessionRestricted

    def getIsIpAddressRestricted(self):
        return self.isIpAddressRestricted

    def setIsIpAddressRestricted(self, newIsIpAddressRestricted):
        self.isIpAddressRestricted = newIsIpAddressRestricted

    def getIsUserAgentRestricted(self):
        return self.isUserAgentRestricted

    def setIsUserAgentRestricted(self, newIsUserAgentRestricted):
        self.isUserAgentRestricted = newIsUserAgentRestricted

    def getPreviewLength(self):
        return self.previewLength

    def setPreviewLength(self, newPreviewLength):
        self.previewLength = newPreviewLength

    def getIsScheduledNow(self):
        return self.isScheduledNow

    def setIsScheduledNow(self, newIsScheduledNow):
        self.isScheduledNow = newIsScheduledNow

    def getIsAdmin(self):
        return self.isAdmin

    def setIsAdmin(self, newIsAdmin):
        self.isAdmin = newIsAdmin

    def getStreamerType(self):
        return self.streamerType

    def setStreamerType(self, newStreamerType):
        self.streamerType = newStreamerType

    def getMediaProtocol(self):
        return self.mediaProtocol

    def setMediaProtocol(self, newMediaProtocol):
        self.mediaProtocol = newMediaProtocol

    def getStorageProfilesXML(self):
        return self.storageProfilesXML

    def setStorageProfilesXML(self, newStorageProfilesXML):
        self.storageProfilesXML = newStorageProfilesXML

    def getAccessControlMessages(self):
        return self.accessControlMessages

    def setAccessControlMessages(self, newAccessControlMessages):
        self.accessControlMessages = newAccessControlMessages

    def getAccessControlActions(self):
        return self.accessControlActions

    def setAccessControlActions(self, newAccessControlActions):
        self.accessControlActions = newAccessControlActions

    def getFlavorAssets(self):
        return self.flavorAssets

    def setFlavorAssets(self, newFlavorAssets):
        self.flavorAssets = newFlavorAssets

    def getMsDuration(self):
        return self.msDuration

    def setMsDuration(self, newMsDuration):
        self.msDuration = newMsDuration

    def getPluginData(self):
        return self.pluginData

    def setPluginData(self, newPluginData):
        self.pluginData = newPluginData


# @package Kaltura
# @subpackage Client
class KalturaEntryCuePointSearchFilter(KalturaSearchItem):
    def __init__(self,
            cuePointsFreeText=NotImplemented,
            cuePointTypeIn=NotImplemented,
            cuePointSubTypeEqual=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var string
        self.cuePointsFreeText = cuePointsFreeText

        # @var string
        self.cuePointTypeIn = cuePointTypeIn

        # @var int
        self.cuePointSubTypeEqual = cuePointSubTypeEqual


    PROPERTY_LOADERS = {
        'cuePointsFreeText': getXmlNodeText, 
        'cuePointTypeIn': getXmlNodeText, 
        'cuePointSubTypeEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryCuePointSearchFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaEntryCuePointSearchFilter")
        kparams.addStringIfDefined("cuePointsFreeText", self.cuePointsFreeText)
        kparams.addStringIfDefined("cuePointTypeIn", self.cuePointTypeIn)
        kparams.addIntIfDefined("cuePointSubTypeEqual", self.cuePointSubTypeEqual)
        return kparams

    def getCuePointsFreeText(self):
        return self.cuePointsFreeText

    def setCuePointsFreeText(self, newCuePointsFreeText):
        self.cuePointsFreeText = newCuePointsFreeText

    def getCuePointTypeIn(self):
        return self.cuePointTypeIn

    def setCuePointTypeIn(self, newCuePointTypeIn):
        self.cuePointTypeIn = newCuePointTypeIn

    def getCuePointSubTypeEqual(self):
        return self.cuePointSubTypeEqual

    def setCuePointSubTypeEqual(self, newCuePointSubTypeEqual):
        self.cuePointSubTypeEqual = newCuePointSubTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaEntryIdentifier(KalturaObjectIdentifier):
    def __init__(self,
            extendedFeatures=NotImplemented,
            identifier=NotImplemented):
        KalturaObjectIdentifier.__init__(self,
            extendedFeatures)

        # Identifier of the object
        # @var KalturaEntryIdentifierField
        self.identifier = identifier


    PROPERTY_LOADERS = {
        'identifier': (KalturaEnumsFactory.createString, "KalturaEntryIdentifierField"), 
    }

    def fromXml(self, node):
        KalturaObjectIdentifier.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryIdentifier.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaObjectIdentifier.toParams(self)
        kparams.put("objectType", "KalturaEntryIdentifier")
        kparams.addStringEnumIfDefined("identifier", self.identifier)
        return kparams

    def getIdentifier(self):
        return self.identifier

    def setIdentifier(self, newIdentifier):
        self.identifier = newIdentifier


# @package Kaltura
# @subpackage Client
class KalturaEntryLiveStats(KalturaLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented):
        KalturaLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp)

        # @var string
        self.entryId = entryId

        # @var int
        self.peakAudience = peakAudience

        # @var int
        self.peakDvrAudience = peakDvrAudience


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'peakAudience': getXmlNodeInt, 
        'peakDvrAudience': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStats.toParams(self)
        kparams.put("objectType", "KalturaEntryLiveStats")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntIfDefined("peakAudience", self.peakAudience)
        kparams.addIntIfDefined("peakDvrAudience", self.peakDvrAudience)
        return kparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getPeakAudience(self):
        return self.peakAudience

    def setPeakAudience(self, newPeakAudience):
        self.peakAudience = newPeakAudience

    def getPeakDvrAudience(self):
        return self.peakDvrAudience

    def setPeakDvrAudience(self, newPeakDvrAudience):
        self.peakDvrAudience = newPeakDvrAudience


# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaEntryServerNode
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaEntryServerNode), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryServerNodeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaEntryServerNodeListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaBooleanField(KalturaBooleanValue):
    """A boolean representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaBooleanValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBooleanValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBooleanField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBooleanValue.toParams(self)
        kparams.put("objectType", "KalturaBooleanField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFeatureStatusListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaFeatureStatus
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaFeatureStatus), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFeatureStatusListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFeatureStatusListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaFileAssetListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaFileAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaFileAsset), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFileAssetListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaFlattenJobData(KalturaJobData):
    def __init__(self):
        KalturaJobData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlattenJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaFlattenJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaFlavorAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaFlavorAsset), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFlavorAssetListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaFlavorParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaFlavorParams), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutputListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaFlavorParamsOutput
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaFlavorParamsOutput), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsOutputListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsOutputListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaGenericSyndicationFeed(KalturaBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented):
        KalturaBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage


    PROPERTY_LOADERS = {
        'feedDescription': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaGenericSyndicationFeed")
        kparams.addStringIfDefined("feedDescription", self.feedDescription)
        kparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        return kparams

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage


# @package Kaltura
# @subpackage Client
class KalturaGoogleVideoSyndicationFeed(KalturaBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            adultContent=NotImplemented):
        KalturaBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var KalturaGoogleSyndicationFeedAdultValues
        self.adultContent = adultContent


    PROPERTY_LOADERS = {
        'adultContent': (KalturaEnumsFactory.createString, "KalturaGoogleSyndicationFeedAdultValues"), 
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGoogleVideoSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaGoogleVideoSyndicationFeed")
        kparams.addStringEnumIfDefined("adultContent", self.adultContent)
        return kparams

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent


# @package Kaltura
# @subpackage Client
class KalturaGroupUserListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaGroupUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaGroupUser), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGroupUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaGroupUserListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaHashCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            hashName=NotImplemented,
            hashSecret=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # hash name
        # @var string
        self.hashName = hashName

        # hash secret
        # @var string
        self.hashSecret = hashSecret


    PROPERTY_LOADERS = {
        'hashName': getXmlNodeText, 
        'hashSecret': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaHashCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaHashCondition")
        kparams.addStringIfDefined("hashName", self.hashName)
        kparams.addStringIfDefined("hashSecret", self.hashSecret)
        return kparams

    def getHashName(self):
        return self.hashName

    def setHashName(self, newHashName):
        self.hashName = newHashName

    def getHashSecret(self):
        return self.hashSecret

    def setHashSecret(self, newHashSecret):
        self.hashSecret = newHashSecret


# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeed(KalturaBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            language=NotImplemented,
            feedLandingPage=NotImplemented,
            ownerName=NotImplemented,
            ownerEmail=NotImplemented,
            feedImageUrl=NotImplemented,
            category=NotImplemented,
            adultContent=NotImplemented,
            feedAuthor=NotImplemented,
            enforceOrder=NotImplemented):
        KalturaBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed language
        # @var string
        self.language = language

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage

        # author/publisher name
        # @var string
        self.ownerName = ownerName

        # publisher email
        # @var string
        self.ownerEmail = ownerEmail

        # podcast thumbnail
        # @var string
        self.feedImageUrl = feedImageUrl

        # @var KalturaITunesSyndicationFeedCategories
        # @readonly
        self.category = category

        # @var KalturaITunesSyndicationFeedAdultValues
        self.adultContent = adultContent

        # @var string
        self.feedAuthor = feedAuthor

        # true in case you want to enfore the palylist order on the
        # @var KalturaNullableBoolean
        self.enforceOrder = enforceOrder


    PROPERTY_LOADERS = {
        'feedDescription': getXmlNodeText, 
        'language': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
        'ownerName': getXmlNodeText, 
        'ownerEmail': getXmlNodeText, 
        'feedImageUrl': getXmlNodeText, 
        'category': (KalturaEnumsFactory.createString, "KalturaITunesSyndicationFeedCategories"), 
        'adultContent': (KalturaEnumsFactory.createString, "KalturaITunesSyndicationFeedAdultValues"), 
        'feedAuthor': getXmlNodeText, 
        'enforceOrder': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaITunesSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaITunesSyndicationFeed")
        kparams.addStringIfDefined("feedDescription", self.feedDescription)
        kparams.addStringIfDefined("language", self.language)
        kparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        kparams.addStringIfDefined("ownerName", self.ownerName)
        kparams.addStringIfDefined("ownerEmail", self.ownerEmail)
        kparams.addStringIfDefined("feedImageUrl", self.feedImageUrl)
        kparams.addStringEnumIfDefined("adultContent", self.adultContent)
        kparams.addStringIfDefined("feedAuthor", self.feedAuthor)
        kparams.addIntEnumIfDefined("enforceOrder", self.enforceOrder)
        return kparams

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage

    def getOwnerName(self):
        return self.ownerName

    def setOwnerName(self, newOwnerName):
        self.ownerName = newOwnerName

    def getOwnerEmail(self):
        return self.ownerEmail

    def setOwnerEmail(self, newOwnerEmail):
        self.ownerEmail = newOwnerEmail

    def getFeedImageUrl(self):
        return self.feedImageUrl

    def setFeedImageUrl(self, newFeedImageUrl):
        self.feedImageUrl = newFeedImageUrl

    def getCategory(self):
        return self.category

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getFeedAuthor(self):
        return self.feedAuthor

    def setFeedAuthor(self, newFeedAuthor):
        self.feedAuthor = newFeedAuthor

    def getEnforceOrder(self):
        return self.enforceOrder

    def setEnforceOrder(self, newEnforceOrder):
        self.enforceOrder = newEnforceOrder


# @package Kaltura
# @subpackage Client
class KalturaImportJobData(KalturaJobData):
    def __init__(self,
            srcFileUrl=NotImplemented,
            destFileLocalPath=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.srcFileUrl = srcFileUrl

        # @var string
        self.destFileLocalPath = destFileLocalPath

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var int
        self.fileSize = fileSize


    PROPERTY_LOADERS = {
        'srcFileUrl': getXmlNodeText, 
        'destFileLocalPath': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'fileSize': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaImportJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaImportJobData")
        kparams.addStringIfDefined("srcFileUrl", self.srcFileUrl)
        kparams.addStringIfDefined("destFileLocalPath", self.destFileLocalPath)
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addIntIfDefined("fileSize", self.fileSize)
        return kparams

    def getSrcFileUrl(self):
        return self.srcFileUrl

    def setSrcFileUrl(self, newSrcFileUrl):
        self.srcFileUrl = newSrcFileUrl

    def getDestFileLocalPath(self):
        return self.destFileLocalPath

    def setDestFileLocalPath(self, newDestFileLocalPath):
        self.destFileLocalPath = newDestFileLocalPath

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getFileSize(self):
        return self.fileSize

    def setFileSize(self, newFileSize):
        self.fileSize = newFileSize


# @package Kaltura
# @subpackage Client
class KalturaIndexAdvancedFilter(KalturaSearchItem):
    def __init__(self,
            indexIdGreaterThan=NotImplemented,
            depthGreaterThanEqual=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var int
        self.indexIdGreaterThan = indexIdGreaterThan

        # @var int
        self.depthGreaterThanEqual = depthGreaterThanEqual


    PROPERTY_LOADERS = {
        'indexIdGreaterThan': getXmlNodeInt, 
        'depthGreaterThanEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIndexAdvancedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaIndexAdvancedFilter")
        kparams.addIntIfDefined("indexIdGreaterThan", self.indexIdGreaterThan)
        kparams.addIntIfDefined("depthGreaterThanEqual", self.depthGreaterThanEqual)
        return kparams

    def getIndexIdGreaterThan(self):
        return self.indexIdGreaterThan

    def setIndexIdGreaterThan(self, newIndexIdGreaterThan):
        self.indexIdGreaterThan = newIndexIdGreaterThan

    def getDepthGreaterThanEqual(self):
        return self.depthGreaterThanEqual

    def setDepthGreaterThanEqual(self, newDepthGreaterThanEqual):
        self.depthGreaterThanEqual = newDepthGreaterThanEqual


# @package Kaltura
# @subpackage Client
class KalturaIndexJobData(KalturaJobData):
    def __init__(self,
            filter=NotImplemented,
            lastIndexId=NotImplemented,
            lastIndexDepth=NotImplemented,
            shouldUpdate=NotImplemented):
        KalturaJobData.__init__(self)

        # The filter should return the list of objects that need to be reindexed.
        # @var KalturaFilter
        self.filter = filter

        # Indicates the last id that reindexed, used when the batch crached, to re-run from the last crash point.
        # @var int
        self.lastIndexId = lastIndexId

        # Indicates the last depth that reindexed, used when the batch crached, to re-run from the last crash point.
        # @var int
        self.lastIndexDepth = lastIndexDepth

        # Indicates that the object columns and attributes values should be recalculated before reindexed.
        # @var bool
        self.shouldUpdate = shouldUpdate


    PROPERTY_LOADERS = {
        'filter': (KalturaObjectFactory.create, KalturaFilter), 
        'lastIndexId': getXmlNodeInt, 
        'lastIndexDepth': getXmlNodeInt, 
        'shouldUpdate': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIndexJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaIndexJobData")
        kparams.addObjectIfDefined("filter", self.filter)
        kparams.addIntIfDefined("lastIndexId", self.lastIndexId)
        kparams.addIntIfDefined("lastIndexDepth", self.lastIndexDepth)
        kparams.addBoolIfDefined("shouldUpdate", self.shouldUpdate)
        return kparams

    def getFilter(self):
        return self.filter

    def setFilter(self, newFilter):
        self.filter = newFilter

    def getLastIndexId(self):
        return self.lastIndexId

    def setLastIndexId(self, newLastIndexId):
        self.lastIndexId = newLastIndexId

    def getLastIndexDepth(self):
        return self.lastIndexDepth

    def setLastIndexDepth(self, newLastIndexDepth):
        self.lastIndexDepth = newLastIndexDepth

    def getShouldUpdate(self):
        return self.shouldUpdate

    def setShouldUpdate(self, newShouldUpdate):
        self.shouldUpdate = newShouldUpdate


# @package Kaltura
# @subpackage Client
class KalturaIpAddressRestriction(KalturaBaseRestriction):
    def __init__(self,
            ipAddressRestrictionType=NotImplemented,
            ipAddressList=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # Ip address restriction type (Allow or deny)
        # @var KalturaIpAddressRestrictionType
        self.ipAddressRestrictionType = ipAddressRestrictionType

        # Comma separated list of ip address to allow to deny
        # @var string
        self.ipAddressList = ipAddressList


    PROPERTY_LOADERS = {
        'ipAddressRestrictionType': (KalturaEnumsFactory.createInt, "KalturaIpAddressRestrictionType"), 
        'ipAddressList': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIpAddressRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaIpAddressRestriction")
        kparams.addIntEnumIfDefined("ipAddressRestrictionType", self.ipAddressRestrictionType)
        kparams.addStringIfDefined("ipAddressList", self.ipAddressList)
        return kparams

    def getIpAddressRestrictionType(self):
        return self.ipAddressRestrictionType

    def setIpAddressRestrictionType(self, newIpAddressRestrictionType):
        self.ipAddressRestrictionType = newIpAddressRestrictionType

    def getIpAddressList(self):
        return self.ipAddressList

    def setIpAddressList(self, newIpAddressList):
        self.ipAddressList = newIpAddressList


# @package Kaltura
# @subpackage Client
class KalturaLimitFlavorsRestriction(KalturaBaseRestriction):
    def __init__(self,
            limitFlavorsRestrictionType=NotImplemented,
            flavorParamsIds=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # Limit flavors restriction type (Allow or deny)
        # @var KalturaLimitFlavorsRestrictionType
        self.limitFlavorsRestrictionType = limitFlavorsRestrictionType

        # Comma separated list of flavor params ids to allow to deny
        # @var string
        self.flavorParamsIds = flavorParamsIds


    PROPERTY_LOADERS = {
        'limitFlavorsRestrictionType': (KalturaEnumsFactory.createInt, "KalturaLimitFlavorsRestrictionType"), 
        'flavorParamsIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLimitFlavorsRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaLimitFlavorsRestriction")
        kparams.addIntEnumIfDefined("limitFlavorsRestrictionType", self.limitFlavorsRestrictionType)
        kparams.addStringIfDefined("flavorParamsIds", self.flavorParamsIds)
        return kparams

    def getLimitFlavorsRestrictionType(self):
        return self.limitFlavorsRestrictionType

    def setLimitFlavorsRestrictionType(self, newLimitFlavorsRestrictionType):
        self.limitFlavorsRestrictionType = newLimitFlavorsRestrictionType

    def getFlavorParamsIds(self):
        return self.flavorParamsIds

    def setFlavorParamsIds(self, newFlavorParamsIds):
        self.flavorParamsIds = newFlavorParamsIds


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaLiveChannel
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaLiveChannel), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaLiveChannelSegment
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaLiveChannelSegment), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelSegmentListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelSegmentListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryServerNode(KalturaEntryServerNode):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            serverNodeId=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            status=NotImplemented,
            serverType=NotImplemented,
            streams=NotImplemented):
        KalturaEntryServerNode.__init__(self,
            id,
            entryId,
            serverNodeId,
            partnerId,
            createdAt,
            updatedAt,
            status,
            serverType)

        # parameters of the stream we got
        # @var array of KalturaLiveStreamParams
        self.streams = streams


    PROPERTY_LOADERS = {
        'streams': (KalturaObjectFactory.createArray, KalturaLiveStreamParams), 
    }

    def fromXml(self, node):
        KalturaEntryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntryServerNode.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryServerNode")
        kparams.addArrayIfDefined("streams", self.streams)
        return kparams

    def getStreams(self):
        return self.streams

    def setStreams(self, newStreams):
        self.streams = newStreams


# @package Kaltura
# @subpackage Client
class KalturaLiveReportExportJobData(KalturaJobData):
    def __init__(self,
            timeReference=NotImplemented,
            timeZoneOffset=NotImplemented,
            entryIds=NotImplemented,
            outputPath=NotImplemented,
            recipientEmail=NotImplemented):
        KalturaJobData.__init__(self)

        # @var int
        self.timeReference = timeReference

        # @var int
        self.timeZoneOffset = timeZoneOffset

        # @var string
        self.entryIds = entryIds

        # @var string
        self.outputPath = outputPath

        # @var string
        self.recipientEmail = recipientEmail


    PROPERTY_LOADERS = {
        'timeReference': getXmlNodeInt, 
        'timeZoneOffset': getXmlNodeInt, 
        'entryIds': getXmlNodeText, 
        'outputPath': getXmlNodeText, 
        'recipientEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveReportExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaLiveReportExportJobData")
        kparams.addIntIfDefined("timeReference", self.timeReference)
        kparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        kparams.addStringIfDefined("entryIds", self.entryIds)
        kparams.addStringIfDefined("outputPath", self.outputPath)
        kparams.addStringIfDefined("recipientEmail", self.recipientEmail)
        return kparams

    def getTimeReference(self):
        return self.timeReference

    def setTimeReference(self, newTimeReference):
        self.timeReference = newTimeReference

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getEntryIds(self):
        return self.entryIds

    def setEntryIds(self, newEntryIds):
        self.entryIds = newEntryIds

    def getOutputPath(self):
        return self.outputPath

    def setOutputPath(self, newOutputPath):
        self.outputPath = newOutputPath

    def getRecipientEmail(self):
        return self.recipientEmail

    def setRecipientEmail(self, newRecipientEmail):
        self.recipientEmail = newRecipientEmail


# @package Kaltura
# @subpackage Client
class KalturaLiveStatsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var KalturaLiveStats
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.create, KalturaLiveStats), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStatsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLiveStatsListResponse")
        kparams.addObjectIfDefined("objects", self.objects)
        return kparams

    def getObjects(self):
        return self.objects

    def setObjects(self, newObjects):
        self.objects = newObjects


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaLiveStreamEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaLiveStreamEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamPushPublishRTMPConfiguration(KalturaLiveStreamPushPublishConfiguration):
    """A representation of an RTMP live stream configuration"""

    def __init__(self,
            publishUrl=NotImplemented,
            backupPublishUrl=NotImplemented,
            port=NotImplemented,
            userId=NotImplemented,
            password=NotImplemented,
            streamName=NotImplemented,
            applicationName=NotImplemented):
        KalturaLiveStreamPushPublishConfiguration.__init__(self,
            publishUrl,
            backupPublishUrl,
            port)

        # @var string
        self.userId = userId

        # @var string
        self.password = password

        # @var string
        self.streamName = streamName

        # @var string
        self.applicationName = applicationName


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'password': getXmlNodeText, 
        'streamName': getXmlNodeText, 
        'applicationName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaLiveStreamPushPublishConfiguration.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamPushPublishRTMPConfiguration.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStreamPushPublishConfiguration.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamPushPublishRTMPConfiguration")
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addStringIfDefined("password", self.password)
        kparams.addStringIfDefined("streamName", self.streamName)
        kparams.addStringIfDefined("applicationName", self.applicationName)
        return kparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getPassword(self):
        return self.password

    def setPassword(self, newPassword):
        self.password = newPassword

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName

    def getApplicationName(self):
        return self.applicationName

    def setApplicationName(self, newApplicationName):
        self.applicationName = newApplicationName


# @package Kaltura
# @subpackage Client
class KalturaMailJobData(KalturaJobData):
    def __init__(self,
            mailType=NotImplemented,
            mailPriority=NotImplemented,
            status=NotImplemented,
            recipientName=NotImplemented,
            recipientEmail=NotImplemented,
            recipientId=NotImplemented,
            fromName=NotImplemented,
            fromEmail=NotImplemented,
            bodyParams=NotImplemented,
            subjectParams=NotImplemented,
            templatePath=NotImplemented,
            language=NotImplemented,
            campaignId=NotImplemented,
            minSendDate=NotImplemented,
            isHtml=NotImplemented,
            separator=NotImplemented):
        KalturaJobData.__init__(self)

        # @var KalturaMailType
        self.mailType = mailType

        # @var int
        self.mailPriority = mailPriority

        # @var KalturaMailJobStatus
        self.status = status

        # @var string
        self.recipientName = recipientName

        # @var string
        self.recipientEmail = recipientEmail

        # kuserId
        # @var int
        self.recipientId = recipientId

        # @var string
        self.fromName = fromName

        # @var string
        self.fromEmail = fromEmail

        # @var string
        self.bodyParams = bodyParams

        # @var string
        self.subjectParams = subjectParams

        # @var string
        self.templatePath = templatePath

        # @var KalturaLanguageCode
        self.language = language

        # @var int
        self.campaignId = campaignId

        # @var int
        self.minSendDate = minSendDate

        # @var bool
        self.isHtml = isHtml

        # @var string
        self.separator = separator


    PROPERTY_LOADERS = {
        'mailType': (KalturaEnumsFactory.createString, "KalturaMailType"), 
        'mailPriority': getXmlNodeInt, 
        'status': (KalturaEnumsFactory.createInt, "KalturaMailJobStatus"), 
        'recipientName': getXmlNodeText, 
        'recipientEmail': getXmlNodeText, 
        'recipientId': getXmlNodeInt, 
        'fromName': getXmlNodeText, 
        'fromEmail': getXmlNodeText, 
        'bodyParams': getXmlNodeText, 
        'subjectParams': getXmlNodeText, 
        'templatePath': getXmlNodeText, 
        'language': (KalturaEnumsFactory.createString, "KalturaLanguageCode"), 
        'campaignId': getXmlNodeInt, 
        'minSendDate': getXmlNodeInt, 
        'isHtml': getXmlNodeBool, 
        'separator': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMailJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaMailJobData")
        kparams.addStringEnumIfDefined("mailType", self.mailType)
        kparams.addIntIfDefined("mailPriority", self.mailPriority)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("recipientName", self.recipientName)
        kparams.addStringIfDefined("recipientEmail", self.recipientEmail)
        kparams.addIntIfDefined("recipientId", self.recipientId)
        kparams.addStringIfDefined("fromName", self.fromName)
        kparams.addStringIfDefined("fromEmail", self.fromEmail)
        kparams.addStringIfDefined("bodyParams", self.bodyParams)
        kparams.addStringIfDefined("subjectParams", self.subjectParams)
        kparams.addStringIfDefined("templatePath", self.templatePath)
        kparams.addStringEnumIfDefined("language", self.language)
        kparams.addIntIfDefined("campaignId", self.campaignId)
        kparams.addIntIfDefined("minSendDate", self.minSendDate)
        kparams.addBoolIfDefined("isHtml", self.isHtml)
        kparams.addStringIfDefined("separator", self.separator)
        return kparams

    def getMailType(self):
        return self.mailType

    def setMailType(self, newMailType):
        self.mailType = newMailType

    def getMailPriority(self):
        return self.mailPriority

    def setMailPriority(self, newMailPriority):
        self.mailPriority = newMailPriority

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getRecipientName(self):
        return self.recipientName

    def setRecipientName(self, newRecipientName):
        self.recipientName = newRecipientName

    def getRecipientEmail(self):
        return self.recipientEmail

    def setRecipientEmail(self, newRecipientEmail):
        self.recipientEmail = newRecipientEmail

    def getRecipientId(self):
        return self.recipientId

    def setRecipientId(self, newRecipientId):
        self.recipientId = newRecipientId

    def getFromName(self):
        return self.fromName

    def setFromName(self, newFromName):
        self.fromName = newFromName

    def getFromEmail(self):
        return self.fromEmail

    def setFromEmail(self, newFromEmail):
        self.fromEmail = newFromEmail

    def getBodyParams(self):
        return self.bodyParams

    def setBodyParams(self, newBodyParams):
        self.bodyParams = newBodyParams

    def getSubjectParams(self):
        return self.subjectParams

    def setSubjectParams(self, newSubjectParams):
        self.subjectParams = newSubjectParams

    def getTemplatePath(self):
        return self.templatePath

    def setTemplatePath(self, newTemplatePath):
        self.templatePath = newTemplatePath

    def getLanguage(self):
        return self.language

    def setLanguage(self, newLanguage):
        self.language = newLanguage

    def getCampaignId(self):
        return self.campaignId

    def setCampaignId(self, newCampaignId):
        self.campaignId = newCampaignId

    def getMinSendDate(self):
        return self.minSendDate

    def setMinSendDate(self, newMinSendDate):
        self.minSendDate = newMinSendDate

    def getIsHtml(self):
        return self.isHtml

    def setIsHtml(self, newIsHtml):
        self.isHtml = newIsHtml

    def getSeparator(self):
        return self.separator

    def setSeparator(self, newSeparator):
        self.separator = newSeparator


# @package Kaltura
# @subpackage Client
class KalturaMatchCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # @var array of KalturaStringValue
        self.values = values


    PROPERTY_LOADERS = {
        'values': (KalturaObjectFactory.createArray, KalturaStringValue), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaMatchCondition")
        kparams.addArrayIfDefined("values", self.values)
        return kparams

    def getValues(self):
        return self.values

    def setValues(self, newValues):
        self.values = newValues


# @package Kaltura
# @subpackage Client
class KalturaMediaInfoBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            flavorAssetIdEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.flavorAssetIdEqual = flavorAssetIdEqual


    PROPERTY_LOADERS = {
        'flavorAssetIdEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaInfoBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaInfoBaseFilter")
        kparams.addStringIfDefined("flavorAssetIdEqual", self.flavorAssetIdEqual)
        return kparams

    def getFlavorAssetIdEqual(self):
        return self.flavorAssetIdEqual

    def setFlavorAssetIdEqual(self, newFlavorAssetIdEqual):
        self.flavorAssetIdEqual = newFlavorAssetIdEqual


# @package Kaltura
# @subpackage Client
class KalturaMediaInfoListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaMediaInfo
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaMediaInfo), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaInfoListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaInfoListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaMediaListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaMediaEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaMediaEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMediaListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaMixListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaMixEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaMixEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaMixListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaModerationFlagListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaModerationFlag
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaModerationFlag), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaModerationFlagListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaModerationFlagListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaMoveCategoryEntriesJobData(KalturaJobData):
    def __init__(self,
            srcCategoryId=NotImplemented,
            destCategoryId=NotImplemented,
            lastMovedCategoryId=NotImplemented,
            lastMovedCategoryPageIndex=NotImplemented,
            lastMovedCategoryEntryPageIndex=NotImplemented,
            moveFromChildren=NotImplemented,
            destCategoryFullIds=NotImplemented):
        KalturaJobData.__init__(self)

        # Source category id
        # @var int
        self.srcCategoryId = srcCategoryId

        # Destination category id
        # @var int
        self.destCategoryId = destCategoryId

        # Saves the last category id that its entries moved completely
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryId = lastMovedCategoryId

        # Saves the last page index of the child categories filter pager
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryPageIndex = lastMovedCategoryPageIndex

        # Saves the last page index of the category entries filter pager
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastMovedCategoryEntryPageIndex = lastMovedCategoryEntryPageIndex

        # All entries from all child categories will be moved as well
        # @var bool
        self.moveFromChildren = moveFromChildren

        # Destination categories fallback ids
        # @var string
        self.destCategoryFullIds = destCategoryFullIds


    PROPERTY_LOADERS = {
        'srcCategoryId': getXmlNodeInt, 
        'destCategoryId': getXmlNodeInt, 
        'lastMovedCategoryId': getXmlNodeInt, 
        'lastMovedCategoryPageIndex': getXmlNodeInt, 
        'lastMovedCategoryEntryPageIndex': getXmlNodeInt, 
        'moveFromChildren': getXmlNodeBool, 
        'destCategoryFullIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMoveCategoryEntriesJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaMoveCategoryEntriesJobData")
        kparams.addIntIfDefined("srcCategoryId", self.srcCategoryId)
        kparams.addIntIfDefined("destCategoryId", self.destCategoryId)
        kparams.addIntIfDefined("lastMovedCategoryId", self.lastMovedCategoryId)
        kparams.addIntIfDefined("lastMovedCategoryPageIndex", self.lastMovedCategoryPageIndex)
        kparams.addIntIfDefined("lastMovedCategoryEntryPageIndex", self.lastMovedCategoryEntryPageIndex)
        kparams.addBoolIfDefined("moveFromChildren", self.moveFromChildren)
        kparams.addStringIfDefined("destCategoryFullIds", self.destCategoryFullIds)
        return kparams

    def getSrcCategoryId(self):
        return self.srcCategoryId

    def setSrcCategoryId(self, newSrcCategoryId):
        self.srcCategoryId = newSrcCategoryId

    def getDestCategoryId(self):
        return self.destCategoryId

    def setDestCategoryId(self, newDestCategoryId):
        self.destCategoryId = newDestCategoryId

    def getLastMovedCategoryId(self):
        return self.lastMovedCategoryId

    def setLastMovedCategoryId(self, newLastMovedCategoryId):
        self.lastMovedCategoryId = newLastMovedCategoryId

    def getLastMovedCategoryPageIndex(self):
        return self.lastMovedCategoryPageIndex

    def setLastMovedCategoryPageIndex(self, newLastMovedCategoryPageIndex):
        self.lastMovedCategoryPageIndex = newLastMovedCategoryPageIndex

    def getLastMovedCategoryEntryPageIndex(self):
        return self.lastMovedCategoryEntryPageIndex

    def setLastMovedCategoryEntryPageIndex(self, newLastMovedCategoryEntryPageIndex):
        self.lastMovedCategoryEntryPageIndex = newLastMovedCategoryEntryPageIndex

    def getMoveFromChildren(self):
        return self.moveFromChildren

    def setMoveFromChildren(self, newMoveFromChildren):
        self.moveFromChildren = newMoveFromChildren

    def getDestCategoryFullIds(self):
        return self.destCategoryFullIds

    def setDestCategoryFullIds(self, newDestCategoryFullIds):
        self.destCategoryFullIds = newDestCategoryFullIds


# @package Kaltura
# @subpackage Client
class KalturaNotificationJobData(KalturaJobData):
    def __init__(self,
            userId=NotImplemented,
            type=NotImplemented,
            typeAsString=NotImplemented,
            objectId=NotImplemented,
            status=NotImplemented,
            data=NotImplemented,
            numberOfAttempts=NotImplemented,
            notificationResult=NotImplemented,
            objType=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.userId = userId

        # @var KalturaNotificationType
        self.type = type

        # @var string
        self.typeAsString = typeAsString

        # @var string
        self.objectId = objectId

        # @var KalturaNotificationStatus
        self.status = status

        # @var string
        self.data = data

        # @var int
        self.numberOfAttempts = numberOfAttempts

        # @var string
        self.notificationResult = notificationResult

        # @var KalturaNotificationObjectType
        self.objType = objType


    PROPERTY_LOADERS = {
        'userId': getXmlNodeText, 
        'type': (KalturaEnumsFactory.createInt, "KalturaNotificationType"), 
        'typeAsString': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'status': (KalturaEnumsFactory.createInt, "KalturaNotificationStatus"), 
        'data': getXmlNodeText, 
        'numberOfAttempts': getXmlNodeInt, 
        'notificationResult': getXmlNodeText, 
        'objType': (KalturaEnumsFactory.createInt, "KalturaNotificationObjectType"), 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaNotificationJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaNotificationJobData")
        kparams.addStringIfDefined("userId", self.userId)
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addStringIfDefined("typeAsString", self.typeAsString)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addIntEnumIfDefined("status", self.status)
        kparams.addStringIfDefined("data", self.data)
        kparams.addIntIfDefined("numberOfAttempts", self.numberOfAttempts)
        kparams.addStringIfDefined("notificationResult", self.notificationResult)
        kparams.addIntEnumIfDefined("objType", self.objType)
        return kparams

    def getUserId(self):
        return self.userId

    def setUserId(self, newUserId):
        self.userId = newUserId

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getTypeAsString(self):
        return self.typeAsString

    def setTypeAsString(self, newTypeAsString):
        self.typeAsString = newTypeAsString

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStatus(self):
        return self.status

    def setStatus(self, newStatus):
        self.status = newStatus

    def getData(self):
        return self.data

    def setData(self, newData):
        self.data = newData

    def getNumberOfAttempts(self):
        return self.numberOfAttempts

    def setNumberOfAttempts(self, newNumberOfAttempts):
        self.numberOfAttempts = newNumberOfAttempts

    def getNotificationResult(self):
        return self.notificationResult

    def setNotificationResult(self, newNotificationResult):
        self.notificationResult = newNotificationResult

    def getObjType(self):
        return self.objType

    def setObjType(self, newObjType):
        self.objType = newObjType


# @package Kaltura
# @subpackage Client
class KalturaObjectListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaObject
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaObject), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObjectListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaObjectListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaOrCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            conditions=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # @var array of KalturaCondition
        self.conditions = conditions


    PROPERTY_LOADERS = {
        'conditions': (KalturaObjectFactory.createArray, KalturaCondition), 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOrCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaOrCondition")
        kparams.addArrayIfDefined("conditions", self.conditions)
        return kparams

    def getConditions(self):
        return self.conditions

    def setConditions(self, newConditions):
        self.conditions = newConditions


# @package Kaltura
# @subpackage Client
class KalturaPartnerBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerPackageEqual=NotImplemented,
            partnerPackageGreaterThanOrEqual=NotImplemented,
            partnerPackageLessThanOrEqual=NotImplemented,
            partnerPackageIn=NotImplemented,
            partnerGroupTypeEqual=NotImplemented,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var string
        self.nameLike = nameLike

        # @var string
        self.nameMultiLikeOr = nameMultiLikeOr

        # @var string
        self.nameMultiLikeAnd = nameMultiLikeAnd

        # @var string
        self.nameEqual = nameEqual

        # @var KalturaPartnerStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerPackageEqual = partnerPackageEqual

        # @var int
        self.partnerPackageGreaterThanOrEqual = partnerPackageGreaterThanOrEqual

        # @var int
        self.partnerPackageLessThanOrEqual = partnerPackageLessThanOrEqual

        # @var string
        self.partnerPackageIn = partnerPackageIn

        # @var KalturaPartnerGroupType
        self.partnerGroupTypeEqual = partnerGroupTypeEqual

        # @var string
        self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike = partnerNameDescriptionWebsiteAdminNameAdminEmailLike


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'nameMultiLikeOr': getXmlNodeText, 
        'nameMultiLikeAnd': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaPartnerStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerPackageEqual': getXmlNodeInt, 
        'partnerPackageGreaterThanOrEqual': getXmlNodeInt, 
        'partnerPackageLessThanOrEqual': getXmlNodeInt, 
        'partnerPackageIn': getXmlNodeText, 
        'partnerGroupTypeEqual': (KalturaEnumsFactory.createInt, "KalturaPartnerGroupType"), 
        'partnerNameDescriptionWebsiteAdminNameAdminEmailLike': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaPartnerBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("idNotIn", self.idNotIn)
        kparams.addStringIfDefined("nameLike", self.nameLike)
        kparams.addStringIfDefined("nameMultiLikeOr", self.nameMultiLikeOr)
        kparams.addStringIfDefined("nameMultiLikeAnd", self.nameMultiLikeAnd)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("partnerPackageEqual", self.partnerPackageEqual)
        kparams.addIntIfDefined("partnerPackageGreaterThanOrEqual", self.partnerPackageGreaterThanOrEqual)
        kparams.addIntIfDefined("partnerPackageLessThanOrEqual", self.partnerPackageLessThanOrEqual)
        kparams.addStringIfDefined("partnerPackageIn", self.partnerPackageIn)
        kparams.addIntEnumIfDefined("partnerGroupTypeEqual", self.partnerGroupTypeEqual)
        kparams.addStringIfDefined("partnerNameDescriptionWebsiteAdminNameAdminEmailLike", self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getNameMultiLikeOr(self):
        return self.nameMultiLikeOr

    def setNameMultiLikeOr(self, newNameMultiLikeOr):
        self.nameMultiLikeOr = newNameMultiLikeOr

    def getNameMultiLikeAnd(self):
        return self.nameMultiLikeAnd

    def setNameMultiLikeAnd(self, newNameMultiLikeAnd):
        self.nameMultiLikeAnd = newNameMultiLikeAnd

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerPackageEqual(self):
        return self.partnerPackageEqual

    def setPartnerPackageEqual(self, newPartnerPackageEqual):
        self.partnerPackageEqual = newPartnerPackageEqual

    def getPartnerPackageGreaterThanOrEqual(self):
        return self.partnerPackageGreaterThanOrEqual

    def setPartnerPackageGreaterThanOrEqual(self, newPartnerPackageGreaterThanOrEqual):
        self.partnerPackageGreaterThanOrEqual = newPartnerPackageGreaterThanOrEqual

    def getPartnerPackageLessThanOrEqual(self):
        return self.partnerPackageLessThanOrEqual

    def setPartnerPackageLessThanOrEqual(self, newPartnerPackageLessThanOrEqual):
        self.partnerPackageLessThanOrEqual = newPartnerPackageLessThanOrEqual

    def getPartnerPackageIn(self):
        return self.partnerPackageIn

    def setPartnerPackageIn(self, newPartnerPackageIn):
        self.partnerPackageIn = newPartnerPackageIn

    def getPartnerGroupTypeEqual(self):
        return self.partnerGroupTypeEqual

    def setPartnerGroupTypeEqual(self, newPartnerGroupTypeEqual):
        self.partnerGroupTypeEqual = newPartnerGroupTypeEqual

    def getPartnerNameDescriptionWebsiteAdminNameAdminEmailLike(self):
        return self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike

    def setPartnerNameDescriptionWebsiteAdminNameAdminEmailLike(self, newPartnerNameDescriptionWebsiteAdminNameAdminEmailLike):
        self.partnerNameDescriptionWebsiteAdminNameAdminEmailLike = newPartnerNameDescriptionWebsiteAdminNameAdminEmailLike


# @package Kaltura
# @subpackage Client
class KalturaPartnerListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaPartner
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaPartner), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPartnerListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaPermissionItem
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaPermissionItem), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaPermissionListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaPermission
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaPermission), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPermissionListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaPlaylistListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaPlaylist
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaPlaylist), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylistListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaPlaylistListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaProvisionJobData(KalturaJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.streamID = streamID

        # @var string
        self.backupStreamID = backupStreamID

        # @var string
        self.rtmp = rtmp

        # @var string
        self.encoderIP = encoderIP

        # @var string
        self.backupEncoderIP = backupEncoderIP

        # @var string
        self.encoderPassword = encoderPassword

        # @var string
        self.encoderUsername = encoderUsername

        # @var int
        self.endDate = endDate

        # @var string
        self.returnVal = returnVal

        # @var int
        self.mediaType = mediaType

        # @var string
        self.primaryBroadcastingUrl = primaryBroadcastingUrl

        # @var string
        self.secondaryBroadcastingUrl = secondaryBroadcastingUrl

        # @var string
        self.streamName = streamName


    PROPERTY_LOADERS = {
        'streamID': getXmlNodeText, 
        'backupStreamID': getXmlNodeText, 
        'rtmp': getXmlNodeText, 
        'encoderIP': getXmlNodeText, 
        'backupEncoderIP': getXmlNodeText, 
        'encoderPassword': getXmlNodeText, 
        'encoderUsername': getXmlNodeText, 
        'endDate': getXmlNodeInt, 
        'returnVal': getXmlNodeText, 
        'mediaType': getXmlNodeInt, 
        'primaryBroadcastingUrl': getXmlNodeText, 
        'secondaryBroadcastingUrl': getXmlNodeText, 
        'streamName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaProvisionJobData")
        kparams.addStringIfDefined("streamID", self.streamID)
        kparams.addStringIfDefined("backupStreamID", self.backupStreamID)
        kparams.addStringIfDefined("rtmp", self.rtmp)
        kparams.addStringIfDefined("encoderIP", self.encoderIP)
        kparams.addStringIfDefined("backupEncoderIP", self.backupEncoderIP)
        kparams.addStringIfDefined("encoderPassword", self.encoderPassword)
        kparams.addStringIfDefined("encoderUsername", self.encoderUsername)
        kparams.addIntIfDefined("endDate", self.endDate)
        kparams.addStringIfDefined("returnVal", self.returnVal)
        kparams.addIntIfDefined("mediaType", self.mediaType)
        kparams.addStringIfDefined("primaryBroadcastingUrl", self.primaryBroadcastingUrl)
        kparams.addStringIfDefined("secondaryBroadcastingUrl", self.secondaryBroadcastingUrl)
        kparams.addStringIfDefined("streamName", self.streamName)
        return kparams

    def getStreamID(self):
        return self.streamID

    def setStreamID(self, newStreamID):
        self.streamID = newStreamID

    def getBackupStreamID(self):
        return self.backupStreamID

    def setBackupStreamID(self, newBackupStreamID):
        self.backupStreamID = newBackupStreamID

    def getRtmp(self):
        return self.rtmp

    def setRtmp(self, newRtmp):
        self.rtmp = newRtmp

    def getEncoderIP(self):
        return self.encoderIP

    def setEncoderIP(self, newEncoderIP):
        self.encoderIP = newEncoderIP

    def getBackupEncoderIP(self):
        return self.backupEncoderIP

    def setBackupEncoderIP(self, newBackupEncoderIP):
        self.backupEncoderIP = newBackupEncoderIP

    def getEncoderPassword(self):
        return self.encoderPassword

    def setEncoderPassword(self, newEncoderPassword):
        self.encoderPassword = newEncoderPassword

    def getEncoderUsername(self):
        return self.encoderUsername

    def setEncoderUsername(self, newEncoderUsername):
        self.encoderUsername = newEncoderUsername

    def getEndDate(self):
        return self.endDate

    def setEndDate(self, newEndDate):
        self.endDate = newEndDate

    def getReturnVal(self):
        return self.returnVal

    def setReturnVal(self, newReturnVal):
        self.returnVal = newReturnVal

    def getMediaType(self):
        return self.mediaType

    def setMediaType(self, newMediaType):
        self.mediaType = newMediaType

    def getPrimaryBroadcastingUrl(self):
        return self.primaryBroadcastingUrl

    def setPrimaryBroadcastingUrl(self, newPrimaryBroadcastingUrl):
        self.primaryBroadcastingUrl = newPrimaryBroadcastingUrl

    def getSecondaryBroadcastingUrl(self):
        return self.secondaryBroadcastingUrl

    def setSecondaryBroadcastingUrl(self, newSecondaryBroadcastingUrl):
        self.secondaryBroadcastingUrl = newSecondaryBroadcastingUrl

    def getStreamName(self):
        return self.streamName

    def setStreamName(self, newStreamName):
        self.streamName = newStreamName


# @package Kaltura
# @subpackage Client
class KalturaQuizUserEntry(KalturaUserEntry):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            userId=NotImplemented,
            partnerId=NotImplemented,
            status=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            type=NotImplemented,
            score=NotImplemented):
        KalturaUserEntry.__init__(self,
            id,
            entryId,
            userId,
            partnerId,
            status,
            createdAt,
            updatedAt,
            type)

        # @var float
        # @readonly
        self.score = score


    PROPERTY_LOADERS = {
        'score': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaUserEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaQuizUserEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserEntry.toParams(self)
        kparams.put("objectType", "KalturaQuizUserEntry")
        return kparams

    def getScore(self):
        return self.score


# @package Kaltura
# @subpackage Client
class KalturaRecalculateCacheJobData(KalturaJobData):
    def __init__(self):
        KalturaJobData.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecalculateCacheJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaRecalculateCacheJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRemotePathListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaRemotePath
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaRemotePath), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRemotePathListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaRemotePathListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaReportBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaReportBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn


# @package Kaltura
# @subpackage Client
class KalturaReportInputFilter(KalturaReportInputBaseFilter):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented,
            keywords=NotImplemented,
            searchInTags=NotImplemented,
            searchInAdminTags=NotImplemented,
            categories=NotImplemented,
            timeZoneOffset=NotImplemented,
            interval=NotImplemented):
        KalturaReportInputBaseFilter.__init__(self,
            fromDate,
            toDate,
            fromDay,
            toDay)

        # Search keywords to filter objects
        # @var string
        self.keywords = keywords

        # Search keywords in onjects tags
        # @var bool
        self.searchInTags = searchInTags

        # Search keywords in onjects admin tags
        # @var bool
        self.searchInAdminTags = searchInAdminTags

        # Search onjects in specified categories
        # @var string
        self.categories = categories

        # Time zone offset in minutes
        # @var int
        self.timeZoneOffset = timeZoneOffset

        # Aggregated results according to interval
        # @var KalturaReportInterval
        self.interval = interval


    PROPERTY_LOADERS = {
        'keywords': getXmlNodeText, 
        'searchInTags': getXmlNodeBool, 
        'searchInAdminTags': getXmlNodeBool, 
        'categories': getXmlNodeText, 
        'timeZoneOffset': getXmlNodeInt, 
        'interval': (KalturaEnumsFactory.createString, "KalturaReportInterval"), 
    }

    def fromXml(self, node):
        KalturaReportInputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReportInputBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaReportInputFilter")
        kparams.addStringIfDefined("keywords", self.keywords)
        kparams.addBoolIfDefined("searchInTags", self.searchInTags)
        kparams.addBoolIfDefined("searchInAdminTags", self.searchInAdminTags)
        kparams.addStringIfDefined("categories", self.categories)
        kparams.addIntIfDefined("timeZoneOffset", self.timeZoneOffset)
        kparams.addStringEnumIfDefined("interval", self.interval)
        return kparams

    def getKeywords(self):
        return self.keywords

    def setKeywords(self, newKeywords):
        self.keywords = newKeywords

    def getSearchInTags(self):
        return self.searchInTags

    def setSearchInTags(self, newSearchInTags):
        self.searchInTags = newSearchInTags

    def getSearchInAdminTags(self):
        return self.searchInAdminTags

    def setSearchInAdminTags(self, newSearchInAdminTags):
        self.searchInAdminTags = newSearchInAdminTags

    def getCategories(self):
        return self.categories

    def setCategories(self, newCategories):
        self.categories = newCategories

    def getTimeZoneOffset(self):
        return self.timeZoneOffset

    def setTimeZoneOffset(self, newTimeZoneOffset):
        self.timeZoneOffset = newTimeZoneOffset

    def getInterval(self):
        return self.interval

    def setInterval(self, newInterval):
        self.interval = newInterval


# @package Kaltura
# @subpackage Client
class KalturaReportListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaReport
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaReport), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaReportListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaReportListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaResponseProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaResponseProfileStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileHolder(KalturaBaseResponseProfile):
    def __init__(self,
            id=NotImplemented,
            systemName=NotImplemented):
        KalturaBaseResponseProfile.__init__(self)

        # Auto generated numeric identifier
        # @var int
        self.id = id

        # Unique system name
        # @var string
        self.systemName = systemName


    PROPERTY_LOADERS = {
        'id': getXmlNodeInt, 
        'systemName': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseResponseProfile.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileHolder.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseResponseProfile.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileHolder")
        kparams.addIntIfDefined("id", self.id)
        kparams.addStringIfDefined("systemName", self.systemName)
        return kparams

    def getId(self):
        return self.id

    def setId(self, newId):
        self.id = newId

    def getSystemName(self):
        return self.systemName

    def setSystemName(self, newSystemName):
        self.systemName = newSystemName


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaResponseProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaResponseProfile), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaSchedulerListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaScheduler
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaScheduler), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSchedulerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSchedulerListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaSchedulerWorkerListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaSchedulerWorker
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaSchedulerWorker), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSchedulerWorkerListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaSchedulerWorkerListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaSearchCondition(KalturaSearchItem):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var string
        self.field = field

        # @var string
        self.value = value


    PROPERTY_LOADERS = {
        'field': getXmlNodeText, 
        'value': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaSearchCondition")
        kparams.addStringIfDefined("field", self.field)
        kparams.addStringIfDefined("value", self.value)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField

    def getValue(self):
        return self.value

    def setValue(self, newValue):
        self.value = newValue


# @package Kaltura
# @subpackage Client
class KalturaSearchOperator(KalturaSearchItem):
    def __init__(self,
            type=NotImplemented,
            items=NotImplemented):
        KalturaSearchItem.__init__(self)

        # @var KalturaSearchOperatorType
        self.type = type

        # @var array of KalturaSearchItem
        self.items = items


    PROPERTY_LOADERS = {
        'type': (KalturaEnumsFactory.createInt, "KalturaSearchOperatorType"), 
        'items': (KalturaObjectFactory.createArray, KalturaSearchItem), 
    }

    def fromXml(self, node):
        KalturaSearchItem.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchOperator.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchItem.toParams(self)
        kparams.put("objectType", "KalturaSearchOperator")
        kparams.addIntEnumIfDefined("type", self.type)
        kparams.addArrayIfDefined("items", self.items)
        return kparams

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getItems(self):
        return self.items

    def setItems(self, newItems):
        self.items = newItems


# @package Kaltura
# @subpackage Client
class KalturaServerNodeBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.heartbeatTimeGreaterThanOrEqual = heartbeatTimeGreaterThanOrEqual

        # @var int
        self.heartbeatTimeLessThanOrEqual = heartbeatTimeLessThanOrEqual

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.hostNameLike = hostNameLike

        # @var string
        self.hostNameMultiLikeOr = hostNameMultiLikeOr

        # @var string
        self.hostNameMultiLikeAnd = hostNameMultiLikeAnd

        # @var KalturaServerNodeStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var KalturaServerNodeType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.dcEqual = dcEqual

        # @var string
        self.dcIn = dcIn

        # @var int
        self.parentIdEqual = parentIdEqual

        # @var string
        self.parentIdIn = parentIdIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'heartbeatTimeGreaterThanOrEqual': getXmlNodeInt, 
        'heartbeatTimeLessThanOrEqual': getXmlNodeInt, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'hostNameLike': getXmlNodeText, 
        'hostNameMultiLikeOr': getXmlNodeText, 
        'hostNameMultiLikeAnd': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaServerNodeStatus"), 
        'statusIn': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaServerNodeType"), 
        'typeIn': getXmlNodeText, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'dcEqual': getXmlNodeInt, 
        'dcIn': getXmlNodeText, 
        'parentIdEqual': getXmlNodeInt, 
        'parentIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaServerNodeBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("heartbeatTimeGreaterThanOrEqual", self.heartbeatTimeGreaterThanOrEqual)
        kparams.addIntIfDefined("heartbeatTimeLessThanOrEqual", self.heartbeatTimeLessThanOrEqual)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("nameIn", self.nameIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addStringIfDefined("hostNameLike", self.hostNameLike)
        kparams.addStringIfDefined("hostNameMultiLikeOr", self.hostNameMultiLikeOr)
        kparams.addStringIfDefined("hostNameMultiLikeAnd", self.hostNameMultiLikeAnd)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringIfDefined("tagsLike", self.tagsLike)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("dcEqual", self.dcEqual)
        kparams.addStringIfDefined("dcIn", self.dcIn)
        kparams.addIntIfDefined("parentIdEqual", self.parentIdEqual)
        kparams.addStringIfDefined("parentIdIn", self.parentIdIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getHeartbeatTimeGreaterThanOrEqual(self):
        return self.heartbeatTimeGreaterThanOrEqual

    def setHeartbeatTimeGreaterThanOrEqual(self, newHeartbeatTimeGreaterThanOrEqual):
        self.heartbeatTimeGreaterThanOrEqual = newHeartbeatTimeGreaterThanOrEqual

    def getHeartbeatTimeLessThanOrEqual(self):
        return self.heartbeatTimeLessThanOrEqual

    def setHeartbeatTimeLessThanOrEqual(self, newHeartbeatTimeLessThanOrEqual):
        self.heartbeatTimeLessThanOrEqual = newHeartbeatTimeLessThanOrEqual

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getHostNameLike(self):
        return self.hostNameLike

    def setHostNameLike(self, newHostNameLike):
        self.hostNameLike = newHostNameLike

    def getHostNameMultiLikeOr(self):
        return self.hostNameMultiLikeOr

    def setHostNameMultiLikeOr(self, newHostNameMultiLikeOr):
        self.hostNameMultiLikeOr = newHostNameMultiLikeOr

    def getHostNameMultiLikeAnd(self):
        return self.hostNameMultiLikeAnd

    def setHostNameMultiLikeAnd(self, newHostNameMultiLikeAnd):
        self.hostNameMultiLikeAnd = newHostNameMultiLikeAnd

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getDcEqual(self):
        return self.dcEqual

    def setDcEqual(self, newDcEqual):
        self.dcEqual = newDcEqual

    def getDcIn(self):
        return self.dcIn

    def setDcIn(self, newDcIn):
        self.dcIn = newDcIn

    def getParentIdEqual(self):
        return self.parentIdEqual

    def setParentIdEqual(self, newParentIdEqual):
        self.parentIdEqual = newParentIdEqual

    def getParentIdIn(self):
        return self.parentIdIn

    def setParentIdIn(self, newParentIdIn):
        self.parentIdIn = newParentIdIn


# @package Kaltura
# @subpackage Client
class KalturaServerNodeListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaServerNode
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaServerNode), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaServerNodeListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaServerNodeListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaSessionRestriction(KalturaBaseRestriction):
    def __init__(self):
        KalturaBaseRestriction.__init__(self)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSessionRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaSessionRestriction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSiteRestriction(KalturaBaseRestriction):
    def __init__(self,
            siteRestrictionType=NotImplemented,
            siteList=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # The site restriction type (allow or deny)
        # @var KalturaSiteRestrictionType
        self.siteRestrictionType = siteRestrictionType

        # Comma separated list of sites (domains) to allow or deny
        # @var string
        self.siteList = siteList


    PROPERTY_LOADERS = {
        'siteRestrictionType': (KalturaEnumsFactory.createInt, "KalturaSiteRestrictionType"), 
        'siteList': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSiteRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaSiteRestriction")
        kparams.addIntEnumIfDefined("siteRestrictionType", self.siteRestrictionType)
        kparams.addStringIfDefined("siteList", self.siteList)
        return kparams

    def getSiteRestrictionType(self):
        return self.siteRestrictionType

    def setSiteRestrictionType(self, newSiteRestrictionType):
        self.siteRestrictionType = newSiteRestrictionType

    def getSiteList(self):
        return self.siteList

    def setSiteList(self, newSiteList):
        self.siteList = newSiteList


# @package Kaltura
# @subpackage Client
class KalturaStorageAddAction(KalturaRuleAction):
    def __init__(self,
            type=NotImplemented):
        KalturaRuleAction.__init__(self,
            type)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRuleAction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageAddAction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRuleAction.toParams(self)
        kparams.put("objectType", "KalturaStorageAddAction")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaStorageJobData(KalturaJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented):
        KalturaJobData.__init__(self)

        # @var string
        self.serverUrl = serverUrl

        # @var string
        self.serverUsername = serverUsername

        # @var string
        self.serverPassword = serverPassword

        # @var string
        self.serverPrivateKey = serverPrivateKey

        # @var string
        self.serverPublicKey = serverPublicKey

        # @var string
        self.serverPassPhrase = serverPassPhrase

        # @var bool
        self.ftpPassiveMode = ftpPassiveMode

        # @var string
        self.srcFileSyncLocalPath = srcFileSyncLocalPath

        # @var string
        self.srcFileSyncId = srcFileSyncId

        # @var string
        self.destFileSyncStoredPath = destFileSyncStoredPath


    PROPERTY_LOADERS = {
        'serverUrl': getXmlNodeText, 
        'serverUsername': getXmlNodeText, 
        'serverPassword': getXmlNodeText, 
        'serverPrivateKey': getXmlNodeText, 
        'serverPublicKey': getXmlNodeText, 
        'serverPassPhrase': getXmlNodeText, 
        'ftpPassiveMode': getXmlNodeBool, 
        'srcFileSyncLocalPath': getXmlNodeText, 
        'srcFileSyncId': getXmlNodeText, 
        'destFileSyncStoredPath': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaStorageJobData")
        kparams.addStringIfDefined("serverUrl", self.serverUrl)
        kparams.addStringIfDefined("serverUsername", self.serverUsername)
        kparams.addStringIfDefined("serverPassword", self.serverPassword)
        kparams.addStringIfDefined("serverPrivateKey", self.serverPrivateKey)
        kparams.addStringIfDefined("serverPublicKey", self.serverPublicKey)
        kparams.addStringIfDefined("serverPassPhrase", self.serverPassPhrase)
        kparams.addBoolIfDefined("ftpPassiveMode", self.ftpPassiveMode)
        kparams.addStringIfDefined("srcFileSyncLocalPath", self.srcFileSyncLocalPath)
        kparams.addStringIfDefined("srcFileSyncId", self.srcFileSyncId)
        kparams.addStringIfDefined("destFileSyncStoredPath", self.destFileSyncStoredPath)
        return kparams

    def getServerUrl(self):
        return self.serverUrl

    def setServerUrl(self, newServerUrl):
        self.serverUrl = newServerUrl

    def getServerUsername(self):
        return self.serverUsername

    def setServerUsername(self, newServerUsername):
        self.serverUsername = newServerUsername

    def getServerPassword(self):
        return self.serverPassword

    def setServerPassword(self, newServerPassword):
        self.serverPassword = newServerPassword

    def getServerPrivateKey(self):
        return self.serverPrivateKey

    def setServerPrivateKey(self, newServerPrivateKey):
        self.serverPrivateKey = newServerPrivateKey

    def getServerPublicKey(self):
        return self.serverPublicKey

    def setServerPublicKey(self, newServerPublicKey):
        self.serverPublicKey = newServerPublicKey

    def getServerPassPhrase(self):
        return self.serverPassPhrase

    def setServerPassPhrase(self, newServerPassPhrase):
        self.serverPassPhrase = newServerPassPhrase

    def getFtpPassiveMode(self):
        return self.ftpPassiveMode

    def setFtpPassiveMode(self, newFtpPassiveMode):
        self.ftpPassiveMode = newFtpPassiveMode

    def getSrcFileSyncLocalPath(self):
        return self.srcFileSyncLocalPath

    def setSrcFileSyncLocalPath(self, newSrcFileSyncLocalPath):
        self.srcFileSyncLocalPath = newSrcFileSyncLocalPath

    def getSrcFileSyncId(self):
        return self.srcFileSyncId

    def setSrcFileSyncId(self, newSrcFileSyncId):
        self.srcFileSyncId = newSrcFileSyncId

    def getDestFileSyncStoredPath(self):
        return self.destFileSyncStoredPath

    def setDestFileSyncStoredPath(self, newDestFileSyncStoredPath):
        self.destFileSyncStoredPath = newDestFileSyncStoredPath


# @package Kaltura
# @subpackage Client
class KalturaStorageProfileBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var KalturaStorageProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var KalturaStorageProfileProtocol
        self.protocolEqual = protocolEqual

        # @var string
        self.protocolIn = protocolIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaStorageProfileStatus"), 
        'statusIn': getXmlNodeText, 
        'protocolEqual': (KalturaEnumsFactory.createString, "KalturaStorageProfileProtocol"), 
        'protocolIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaStorageProfileBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringEnumIfDefined("protocolEqual", self.protocolEqual)
        kparams.addStringIfDefined("protocolIn", self.protocolIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getProtocolEqual(self):
        return self.protocolEqual

    def setProtocolEqual(self, newProtocolEqual):
        self.protocolEqual = newProtocolEqual

    def getProtocolIn(self):
        return self.protocolIn

    def setProtocolIn(self, newProtocolIn):
        self.protocolIn = newProtocolIn


# @package Kaltura
# @subpackage Client
class KalturaStorageProfileListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaStorageProfile
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaStorageProfile), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageProfileListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaStorageProfileListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaSyncCategoryPrivacyContextJobData(KalturaJobData):
    def __init__(self,
            categoryId=NotImplemented,
            lastUpdatedCategoryEntryCreatedAt=NotImplemented,
            lastUpdatedCategoryCreatedAt=NotImplemented):
        KalturaJobData.__init__(self)

        # category id
        # @var int
        self.categoryId = categoryId

        # Saves the last category entry creation date that was updated
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastUpdatedCategoryEntryCreatedAt = lastUpdatedCategoryEntryCreatedAt

        # Saves the last sub category creation date that was updated
        #      In case of crash the batch will restart from that point
        # @var int
        self.lastUpdatedCategoryCreatedAt = lastUpdatedCategoryCreatedAt


    PROPERTY_LOADERS = {
        'categoryId': getXmlNodeInt, 
        'lastUpdatedCategoryEntryCreatedAt': getXmlNodeInt, 
        'lastUpdatedCategoryCreatedAt': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSyncCategoryPrivacyContextJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaJobData.toParams(self)
        kparams.put("objectType", "KalturaSyncCategoryPrivacyContextJobData")
        kparams.addIntIfDefined("categoryId", self.categoryId)
        kparams.addIntIfDefined("lastUpdatedCategoryEntryCreatedAt", self.lastUpdatedCategoryEntryCreatedAt)
        kparams.addIntIfDefined("lastUpdatedCategoryCreatedAt", self.lastUpdatedCategoryCreatedAt)
        return kparams

    def getCategoryId(self):
        return self.categoryId

    def setCategoryId(self, newCategoryId):
        self.categoryId = newCategoryId

    def getLastUpdatedCategoryEntryCreatedAt(self):
        return self.lastUpdatedCategoryEntryCreatedAt

    def setLastUpdatedCategoryEntryCreatedAt(self, newLastUpdatedCategoryEntryCreatedAt):
        self.lastUpdatedCategoryEntryCreatedAt = newLastUpdatedCategoryEntryCreatedAt

    def getLastUpdatedCategoryCreatedAt(self):
        return self.lastUpdatedCategoryCreatedAt

    def setLastUpdatedCategoryCreatedAt(self, newLastUpdatedCategoryCreatedAt):
        self.lastUpdatedCategoryCreatedAt = newLastUpdatedCategoryCreatedAt


# @package Kaltura
# @subpackage Client
class KalturaThumbAssetListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaThumbAsset
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaThumbAsset), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbAssetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaThumbAssetListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaThumbParams
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaThumbParams), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutputListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaThumbParamsOutput
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaThumbParamsOutput), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsOutputListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsOutputListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaTubeMogulSyndicationFeed(KalturaBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            category=NotImplemented):
        KalturaBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var KalturaTubeMogulSyndicationFeedCategories
        # @readonly
        self.category = category


    PROPERTY_LOADERS = {
        'category': (KalturaEnumsFactory.createString, "KalturaTubeMogulSyndicationFeedCategories"), 
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTubeMogulSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaTubeMogulSyndicationFeed")
        return kparams

    def getCategory(self):
        return self.category


# @package Kaltura
# @subpackage Client
class KalturaUiConfBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameLike=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            objTypeEqual=NotImplemented,
            objTypeIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            creationModeEqual=NotImplemented,
            creationModeIn=NotImplemented,
            versionEqual=NotImplemented,
            versionMultiLikeOr=NotImplemented,
            versionMultiLikeAnd=NotImplemented,
            partnerTagsMultiLikeOr=NotImplemented,
            partnerTagsMultiLikeAnd=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.nameLike = nameLike

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var KalturaUiConfObjType
        self.objTypeEqual = objTypeEqual

        # @var string
        self.objTypeIn = objTypeIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaUiConfCreationMode
        self.creationModeEqual = creationModeEqual

        # @var string
        self.creationModeIn = creationModeIn

        # @var string
        self.versionEqual = versionEqual

        # @var string
        self.versionMultiLikeOr = versionMultiLikeOr

        # @var string
        self.versionMultiLikeAnd = versionMultiLikeAnd

        # @var string
        self.partnerTagsMultiLikeOr = partnerTagsMultiLikeOr

        # @var string
        self.partnerTagsMultiLikeAnd = partnerTagsMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'nameLike': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'objTypeEqual': (KalturaEnumsFactory.createInt, "KalturaUiConfObjType"), 
        'objTypeIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'creationModeEqual': (KalturaEnumsFactory.createInt, "KalturaUiConfCreationMode"), 
        'creationModeIn': getXmlNodeText, 
        'versionEqual': getXmlNodeText, 
        'versionMultiLikeOr': getXmlNodeText, 
        'versionMultiLikeAnd': getXmlNodeText, 
        'partnerTagsMultiLikeOr': getXmlNodeText, 
        'partnerTagsMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUiConfBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUiConfBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("nameLike", self.nameLike)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addIntEnumIfDefined("objTypeEqual", self.objTypeEqual)
        kparams.addStringIfDefined("objTypeIn", self.objTypeIn)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntEnumIfDefined("creationModeEqual", self.creationModeEqual)
        kparams.addStringIfDefined("creationModeIn", self.creationModeIn)
        kparams.addStringIfDefined("versionEqual", self.versionEqual)
        kparams.addStringIfDefined("versionMultiLikeOr", self.versionMultiLikeOr)
        kparams.addStringIfDefined("versionMultiLikeAnd", self.versionMultiLikeAnd)
        kparams.addStringIfDefined("partnerTagsMultiLikeOr", self.partnerTagsMultiLikeOr)
        kparams.addStringIfDefined("partnerTagsMultiLikeAnd", self.partnerTagsMultiLikeAnd)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getNameLike(self):
        return self.nameLike

    def setNameLike(self, newNameLike):
        self.nameLike = newNameLike

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getObjTypeEqual(self):
        return self.objTypeEqual

    def setObjTypeEqual(self, newObjTypeEqual):
        self.objTypeEqual = newObjTypeEqual

    def getObjTypeIn(self):
        return self.objTypeIn

    def setObjTypeIn(self, newObjTypeIn):
        self.objTypeIn = newObjTypeIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getCreationModeEqual(self):
        return self.creationModeEqual

    def setCreationModeEqual(self, newCreationModeEqual):
        self.creationModeEqual = newCreationModeEqual

    def getCreationModeIn(self):
        return self.creationModeIn

    def setCreationModeIn(self, newCreationModeIn):
        self.creationModeIn = newCreationModeIn

    def getVersionEqual(self):
        return self.versionEqual

    def setVersionEqual(self, newVersionEqual):
        self.versionEqual = newVersionEqual

    def getVersionMultiLikeOr(self):
        return self.versionMultiLikeOr

    def setVersionMultiLikeOr(self, newVersionMultiLikeOr):
        self.versionMultiLikeOr = newVersionMultiLikeOr

    def getVersionMultiLikeAnd(self):
        return self.versionMultiLikeAnd

    def setVersionMultiLikeAnd(self, newVersionMultiLikeAnd):
        self.versionMultiLikeAnd = newVersionMultiLikeAnd

    def getPartnerTagsMultiLikeOr(self):
        return self.partnerTagsMultiLikeOr

    def setPartnerTagsMultiLikeOr(self, newPartnerTagsMultiLikeOr):
        self.partnerTagsMultiLikeOr = newPartnerTagsMultiLikeOr

    def getPartnerTagsMultiLikeAnd(self):
        return self.partnerTagsMultiLikeAnd

    def setPartnerTagsMultiLikeAnd(self, newPartnerTagsMultiLikeAnd):
        self.partnerTagsMultiLikeAnd = newPartnerTagsMultiLikeAnd


# @package Kaltura
# @subpackage Client
class KalturaUiConfListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUiConf
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUiConf), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUiConfListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUiConfListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaUploadTokenBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            userIdEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            fileNameEqual=NotImplemented,
            fileSizeEqual=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var KalturaUploadTokenStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.fileNameEqual = fileNameEqual

        # @var float
        self.fileSizeEqual = fileSizeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaUploadTokenStatus"), 
        'statusIn': getXmlNodeText, 
        'fileNameEqual': getXmlNodeText, 
        'fileSizeEqual': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadTokenBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaUploadTokenBaseFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("fileNameEqual", self.fileNameEqual)
        kparams.addFloatIfDefined("fileSizeEqual", self.fileSizeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getFileNameEqual(self):
        return self.fileNameEqual

    def setFileNameEqual(self, newFileNameEqual):
        self.fileNameEqual = newFileNameEqual

    def getFileSizeEqual(self):
        return self.fileSizeEqual

    def setFileSizeEqual(self, newFileSizeEqual):
        self.fileSizeEqual = newFileSizeEqual


# @package Kaltura
# @subpackage Client
class KalturaUploadTokenListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUploadToken
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUploadToken), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadTokenListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUploadTokenListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaUrlRecognizerAkamaiG2O(KalturaUrlRecognizer):
    def __init__(self,
            hosts=NotImplemented,
            uriPrefix=NotImplemented,
            headerData=NotImplemented,
            headerSign=NotImplemented,
            timeout=NotImplemented,
            salt=NotImplemented):
        KalturaUrlRecognizer.__init__(self,
            hosts,
            uriPrefix)

        # headerData
        # @var string
        self.headerData = headerData

        # headerSign
        # @var string
        self.headerSign = headerSign

        # timeout
        # @var int
        self.timeout = timeout

        # salt
        # @var string
        self.salt = salt


    PROPERTY_LOADERS = {
        'headerData': getXmlNodeText, 
        'headerSign': getXmlNodeText, 
        'timeout': getXmlNodeInt, 
        'salt': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlRecognizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlRecognizerAkamaiG2O.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlRecognizer.toParams(self)
        kparams.put("objectType", "KalturaUrlRecognizerAkamaiG2O")
        kparams.addStringIfDefined("headerData", self.headerData)
        kparams.addStringIfDefined("headerSign", self.headerSign)
        kparams.addIntIfDefined("timeout", self.timeout)
        kparams.addStringIfDefined("salt", self.salt)
        return kparams

    def getHeaderData(self):
        return self.headerData

    def setHeaderData(self, newHeaderData):
        self.headerData = newHeaderData

    def getHeaderSign(self):
        return self.headerSign

    def setHeaderSign(self, newHeaderSign):
        self.headerSign = newHeaderSign

    def getTimeout(self):
        return self.timeout

    def setTimeout(self, newTimeout):
        self.timeout = newTimeout

    def getSalt(self):
        return self.salt

    def setSalt(self, newSalt):
        self.salt = newSalt


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerAkamaiHttp(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            rootDir=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # param
        # @var string
        self.paramName = paramName

        # @var string
        self.rootDir = rootDir


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerAkamaiHttp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerAkamaiHttp")
        kparams.addStringIfDefined("paramName", self.paramName)
        kparams.addStringIfDefined("rootDir", self.rootDir)
        return kparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerAkamaiRtmp(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            profile=NotImplemented,
            type=NotImplemented,
            aifp=NotImplemented,
            usePrefix=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # profile
        # @var string
        self.profile = profile

        # Type
        # @var string
        self.type = type

        # @var string
        self.aifp = aifp

        # @var bool
        self.usePrefix = usePrefix


    PROPERTY_LOADERS = {
        'profile': getXmlNodeText, 
        'type': getXmlNodeText, 
        'aifp': getXmlNodeText, 
        'usePrefix': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerAkamaiRtmp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerAkamaiRtmp")
        kparams.addStringIfDefined("profile", self.profile)
        kparams.addStringIfDefined("type", self.type)
        kparams.addStringIfDefined("aifp", self.aifp)
        kparams.addBoolIfDefined("usePrefix", self.usePrefix)
        return kparams

    def getProfile(self):
        return self.profile

    def setProfile(self, newProfile):
        self.profile = newProfile

    def getType(self):
        return self.type

    def setType(self, newType):
        self.type = newType

    def getAifp(self):
        return self.aifp

    def setAifp(self, newAifp):
        self.aifp = newAifp

    def getUsePrefix(self):
        return self.usePrefix

    def setUsePrefix(self, newUsePrefix):
        self.usePrefix = newUsePrefix


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerAkamaiRtsp(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            host=NotImplemented,
            cpcode=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # host
        # @var string
        self.host = host

        # Cp-Code
        # @var int
        self.cpcode = cpcode


    PROPERTY_LOADERS = {
        'host': getXmlNodeText, 
        'cpcode': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerAkamaiRtsp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerAkamaiRtsp")
        kparams.addStringIfDefined("host", self.host)
        kparams.addIntIfDefined("cpcode", self.cpcode)
        return kparams

    def getHost(self):
        return self.host

    def setHost(self, newHost):
        self.host = newHost

    def getCpcode(self):
        return self.cpcode

    def setCpcode(self, newCpcode):
        self.cpcode = newCpcode


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerAkamaiSecureHd(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            aclPostfix=NotImplemented,
            customPostfixes=NotImplemented,
            useCookieHosts=NotImplemented,
            rootDir=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # @var string
        self.paramName = paramName

        # @var string
        self.aclPostfix = aclPostfix

        # @var string
        self.customPostfixes = customPostfixes

        # @var string
        self.useCookieHosts = useCookieHosts

        # @var string
        self.rootDir = rootDir


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'aclPostfix': getXmlNodeText, 
        'customPostfixes': getXmlNodeText, 
        'useCookieHosts': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerAkamaiSecureHd.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerAkamaiSecureHd")
        kparams.addStringIfDefined("paramName", self.paramName)
        kparams.addStringIfDefined("aclPostfix", self.aclPostfix)
        kparams.addStringIfDefined("customPostfixes", self.customPostfixes)
        kparams.addStringIfDefined("useCookieHosts", self.useCookieHosts)
        kparams.addStringIfDefined("rootDir", self.rootDir)
        return kparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getAclPostfix(self):
        return self.aclPostfix

    def setAclPostfix(self, newAclPostfix):
        self.aclPostfix = newAclPostfix

    def getCustomPostfixes(self):
        return self.customPostfixes

    def setCustomPostfixes(self, newCustomPostfixes):
        self.customPostfixes = newCustomPostfixes

    def getUseCookieHosts(self):
        return self.useCookieHosts

    def setUseCookieHosts(self, newUseCookieHosts):
        self.useCookieHosts = newUseCookieHosts

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerBitGravity(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            hashPatternRegex=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # hashPatternRegex
        # @var string
        self.hashPatternRegex = hashPatternRegex


    PROPERTY_LOADERS = {
        'hashPatternRegex': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerBitGravity.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerBitGravity")
        kparams.addStringIfDefined("hashPatternRegex", self.hashPatternRegex)
        return kparams

    def getHashPatternRegex(self):
        return self.hashPatternRegex

    def setHashPatternRegex(self, newHashPatternRegex):
        self.hashPatternRegex = newHashPatternRegex


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerCloudFront(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            keyPairId=NotImplemented,
            rootDir=NotImplemented,
            limitIpAddress=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # @var string
        self.keyPairId = keyPairId

        # @var string
        self.rootDir = rootDir

        # @var bool
        self.limitIpAddress = limitIpAddress


    PROPERTY_LOADERS = {
        'keyPairId': getXmlNodeText, 
        'rootDir': getXmlNodeText, 
        'limitIpAddress': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerCloudFront.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerCloudFront")
        kparams.addStringIfDefined("keyPairId", self.keyPairId)
        kparams.addStringIfDefined("rootDir", self.rootDir)
        kparams.addBoolIfDefined("limitIpAddress", self.limitIpAddress)
        return kparams

    def getKeyPairId(self):
        return self.keyPairId

    def setKeyPairId(self, newKeyPairId):
        self.keyPairId = newKeyPairId

    def getRootDir(self):
        return self.rootDir

    def setRootDir(self, newRootDir):
        self.rootDir = newRootDir

    def getLimitIpAddress(self):
        return self.limitIpAddress

    def setLimitIpAddress(self, newLimitIpAddress):
        self.limitIpAddress = newLimitIpAddress


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerLevel3(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            paramName=NotImplemented,
            expiryName=NotImplemented,
            gen=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # paramName
        # @var string
        self.paramName = paramName

        # expiryName
        # @var string
        self.expiryName = expiryName

        # gen
        # @var string
        self.gen = gen


    PROPERTY_LOADERS = {
        'paramName': getXmlNodeText, 
        'expiryName': getXmlNodeText, 
        'gen': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerLevel3.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerLevel3")
        kparams.addStringIfDefined("paramName", self.paramName)
        kparams.addStringIfDefined("expiryName", self.expiryName)
        kparams.addStringIfDefined("gen", self.gen)
        return kparams

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getExpiryName(self):
        return self.expiryName

    def setExpiryName(self, newExpiryName):
        self.expiryName = newExpiryName

    def getGen(self):
        return self.gen

    def setGen(self, newGen):
        self.gen = newGen


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerLimeLight(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerLimeLight.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerLimeLight")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerUplynk(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            accountId=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # accountId
        # @var string
        self.accountId = accountId


    PROPERTY_LOADERS = {
        'accountId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerUplynk.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerUplynk")
        kparams.addStringIfDefined("accountId", self.accountId)
        return kparams

    def getAccountId(self):
        return self.accountId

    def setAccountId(self, newAccountId):
        self.accountId = newAccountId


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerVelocix(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            hdsPaths=NotImplemented,
            paramName=NotImplemented,
            authPrefix=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # hdsPaths
        # @var string
        self.hdsPaths = hdsPaths

        # tokenParamName
        # @var string
        self.paramName = paramName

        # secure URL prefix
        # @var string
        self.authPrefix = authPrefix


    PROPERTY_LOADERS = {
        'hdsPaths': getXmlNodeText, 
        'paramName': getXmlNodeText, 
        'authPrefix': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerVelocix.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerVelocix")
        kparams.addStringIfDefined("hdsPaths", self.hdsPaths)
        kparams.addStringIfDefined("paramName", self.paramName)
        kparams.addStringIfDefined("authPrefix", self.authPrefix)
        return kparams

    def getHdsPaths(self):
        return self.hdsPaths

    def setHdsPaths(self, newHdsPaths):
        self.hdsPaths = newHdsPaths

    def getParamName(self):
        return self.paramName

    def setParamName(self, newParamName):
        self.paramName = newParamName

    def getAuthPrefix(self):
        return self.authPrefix

    def setAuthPrefix(self, newAuthPrefix):
        self.authPrefix = newAuthPrefix


# @package Kaltura
# @subpackage Client
class KalturaUrlTokenizerVnpt(KalturaUrlTokenizer):
    def __init__(self,
            window=NotImplemented,
            key=NotImplemented,
            tokenizationFormat=NotImplemented,
            shouldIncludeClientIp=NotImplemented):
        KalturaUrlTokenizer.__init__(self,
            window,
            key)

        # @var int
        self.tokenizationFormat = tokenizationFormat

        # @var bool
        self.shouldIncludeClientIp = shouldIncludeClientIp


    PROPERTY_LOADERS = {
        'tokenizationFormat': getXmlNodeInt, 
        'shouldIncludeClientIp': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaUrlTokenizer.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUrlTokenizerVnpt.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlTokenizer.toParams(self)
        kparams.put("objectType", "KalturaUrlTokenizerVnpt")
        kparams.addIntIfDefined("tokenizationFormat", self.tokenizationFormat)
        kparams.addBoolIfDefined("shouldIncludeClientIp", self.shouldIncludeClientIp)
        return kparams

    def getTokenizationFormat(self):
        return self.tokenizationFormat

    def setTokenizationFormat(self, newTokenizationFormat):
        self.tokenizationFormat = newTokenizationFormat

    def getShouldIncludeClientIp(self):
        return self.shouldIncludeClientIp

    def setShouldIncludeClientIp(self, newShouldIncludeClientIp):
        self.shouldIncludeClientIp = newShouldIncludeClientIp


# @package Kaltura
# @subpackage Client
class KalturaUserAgentRestriction(KalturaBaseRestriction):
    def __init__(self,
            userAgentRestrictionType=NotImplemented,
            userAgentRegexList=NotImplemented):
        KalturaBaseRestriction.__init__(self)

        # User agent restriction type (Allow or deny)
        # @var KalturaUserAgentRestrictionType
        self.userAgentRestrictionType = userAgentRestrictionType

        # A comma seperated list of user agent regular expressions
        # @var string
        self.userAgentRegexList = userAgentRegexList


    PROPERTY_LOADERS = {
        'userAgentRestrictionType': (KalturaEnumsFactory.createInt, "KalturaUserAgentRestrictionType"), 
        'userAgentRegexList': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAgentRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseRestriction.toParams(self)
        kparams.put("objectType", "KalturaUserAgentRestriction")
        kparams.addIntEnumIfDefined("userAgentRestrictionType", self.userAgentRestrictionType)
        kparams.addStringIfDefined("userAgentRegexList", self.userAgentRegexList)
        return kparams

    def getUserAgentRestrictionType(self):
        return self.userAgentRestrictionType

    def setUserAgentRestrictionType(self, newUserAgentRestrictionType):
        self.userAgentRestrictionType = newUserAgentRestrictionType

    def getUserAgentRegexList(self):
        return self.userAgentRegexList

    def setUserAgentRegexList(self, newUserAgentRegexList):
        self.userAgentRegexList = newUserAgentRegexList


# @package Kaltura
# @subpackage Client
class KalturaUserEntryListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUserEntry
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUserEntry), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserEntryListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserEntryListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaUserListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUser
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUser), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaUserLoginDataListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUserLoginData
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUserLoginData), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserLoginDataListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserLoginDataListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaUserRoleCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            roleIds=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # Comma separated list of role ids
        # @var string
        self.roleIds = roleIds


    PROPERTY_LOADERS = {
        'roleIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaUserRoleCondition")
        kparams.addStringIfDefined("roleIds", self.roleIds)
        return kparams

    def getRoleIds(self):
        return self.roleIds

    def setRoleIds(self, newRoleIds):
        self.roleIds = newRoleIds


# @package Kaltura
# @subpackage Client
class KalturaUserRoleListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaUserRole
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaUserRole), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaUserRoleListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaValidateActiveEdgeCondition(KalturaCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            edgeServerIds=NotImplemented):
        KalturaCondition.__init__(self,
            type,
            description,
            not_)

        # Comma separated list of edge servers to validate are active
        # @var string
        self.edgeServerIds = edgeServerIds


    PROPERTY_LOADERS = {
        'edgeServerIds': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaValidateActiveEdgeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCondition.toParams(self)
        kparams.put("objectType", "KalturaValidateActiveEdgeCondition")
        kparams.addStringIfDefined("edgeServerIds", self.edgeServerIds)
        return kparams

    def getEdgeServerIds(self):
        return self.edgeServerIds

    def setEdgeServerIds(self, newEdgeServerIds):
        self.edgeServerIds = newEdgeServerIds


# @package Kaltura
# @subpackage Client
class KalturaWidgetBaseFilter(KalturaFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            sourceWidgetIdEqual=NotImplemented,
            rootWidgetIdEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            uiConfIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerDataLike=NotImplemented):
        KalturaFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.sourceWidgetIdEqual = sourceWidgetIdEqual

        # @var string
        self.rootWidgetIdEqual = rootWidgetIdEqual

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var int
        self.uiConfIdEqual = uiConfIdEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var string
        self.partnerDataLike = partnerDataLike


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'sourceWidgetIdEqual': getXmlNodeText, 
        'rootWidgetIdEqual': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'entryIdEqual': getXmlNodeText, 
        'uiConfIdEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'partnerDataLike': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaWidgetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFilter.toParams(self)
        kparams.put("objectType", "KalturaWidgetBaseFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("sourceWidgetIdEqual", self.sourceWidgetIdEqual)
        kparams.addStringIfDefined("rootWidgetIdEqual", self.rootWidgetIdEqual)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addIntIfDefined("uiConfIdEqual", self.uiConfIdEqual)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addStringIfDefined("partnerDataLike", self.partnerDataLike)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSourceWidgetIdEqual(self):
        return self.sourceWidgetIdEqual

    def setSourceWidgetIdEqual(self, newSourceWidgetIdEqual):
        self.sourceWidgetIdEqual = newSourceWidgetIdEqual

    def getRootWidgetIdEqual(self):
        return self.rootWidgetIdEqual

    def setRootWidgetIdEqual(self, newRootWidgetIdEqual):
        self.rootWidgetIdEqual = newRootWidgetIdEqual

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getUiConfIdEqual(self):
        return self.uiConfIdEqual

    def setUiConfIdEqual(self, newUiConfIdEqual):
        self.uiConfIdEqual = newUiConfIdEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getPartnerDataLike(self):
        return self.partnerDataLike

    def setPartnerDataLike(self, newPartnerDataLike):
        self.partnerDataLike = newPartnerDataLike


# @package Kaltura
# @subpackage Client
class KalturaWidgetListResponse(KalturaListResponse):
    def __init__(self,
            totalCount=NotImplemented,
            objects=NotImplemented):
        KalturaListResponse.__init__(self,
            totalCount)

        # @var array of KalturaWidget
        # @readonly
        self.objects = objects


    PROPERTY_LOADERS = {
        'objects': (KalturaObjectFactory.createArray, KalturaWidget), 
    }

    def fromXml(self, node):
        KalturaListResponse.fromXml(self, node)
        self.fromXmlImpl(node, KalturaWidgetListResponse.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaListResponse.toParams(self)
        kparams.put("objectType", "KalturaWidgetListResponse")
        return kparams

    def getObjects(self):
        return self.objects


# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeed(KalturaBaseSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            category=NotImplemented,
            adultContent=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented):
        KalturaBaseSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries)

        # @var KalturaYahooSyndicationFeedCategories
        # @readonly
        self.category = category

        # @var KalturaYahooSyndicationFeedAdultValues
        self.adultContent = adultContent

        # feed description
        # @var string
        self.feedDescription = feedDescription

        # feed landing page (i.e publisher website)
        # @var string
        self.feedLandingPage = feedLandingPage


    PROPERTY_LOADERS = {
        'category': (KalturaEnumsFactory.createString, "KalturaYahooSyndicationFeedCategories"), 
        'adultContent': (KalturaEnumsFactory.createString, "KalturaYahooSyndicationFeedAdultValues"), 
        'feedDescription': getXmlNodeText, 
        'feedLandingPage': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaYahooSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaYahooSyndicationFeed")
        kparams.addStringEnumIfDefined("adultContent", self.adultContent)
        kparams.addStringIfDefined("feedDescription", self.feedDescription)
        kparams.addStringIfDefined("feedLandingPage", self.feedLandingPage)
        return kparams

    def getCategory(self):
        return self.category

    def getAdultContent(self):
        return self.adultContent

    def setAdultContent(self, newAdultContent):
        self.adultContent = newAdultContent

    def getFeedDescription(self):
        return self.feedDescription

    def setFeedDescription(self, newFeedDescription):
        self.feedDescription = newFeedDescription

    def getFeedLandingPage(self):
        return self.feedLandingPage

    def setFeedLandingPage(self, newFeedLandingPage):
        self.feedLandingPage = newFeedLandingPage


# @package Kaltura
# @subpackage Client
class KalturaAccessControlBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaAccessControlBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfileBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaAccessControlProfileBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaAkamaiProvisionJobData(KalturaProvisionJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            wsdlUsername=NotImplemented,
            wsdlPassword=NotImplemented,
            cpcode=NotImplemented,
            emailId=NotImplemented,
            primaryContact=NotImplemented,
            secondaryContact=NotImplemented):
        KalturaProvisionJobData.__init__(self,
            streamID,
            backupStreamID,
            rtmp,
            encoderIP,
            backupEncoderIP,
            encoderPassword,
            encoderUsername,
            endDate,
            returnVal,
            mediaType,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            streamName)

        # @var string
        self.wsdlUsername = wsdlUsername

        # @var string
        self.wsdlPassword = wsdlPassword

        # @var string
        self.cpcode = cpcode

        # @var string
        self.emailId = emailId

        # @var string
        self.primaryContact = primaryContact

        # @var string
        self.secondaryContact = secondaryContact


    PROPERTY_LOADERS = {
        'wsdlUsername': getXmlNodeText, 
        'wsdlPassword': getXmlNodeText, 
        'cpcode': getXmlNodeText, 
        'emailId': getXmlNodeText, 
        'primaryContact': getXmlNodeText, 
        'secondaryContact': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaProvisionJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAkamaiProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProvisionJobData.toParams(self)
        kparams.put("objectType", "KalturaAkamaiProvisionJobData")
        kparams.addStringIfDefined("wsdlUsername", self.wsdlUsername)
        kparams.addStringIfDefined("wsdlPassword", self.wsdlPassword)
        kparams.addStringIfDefined("cpcode", self.cpcode)
        kparams.addStringIfDefined("emailId", self.emailId)
        kparams.addStringIfDefined("primaryContact", self.primaryContact)
        kparams.addStringIfDefined("secondaryContact", self.secondaryContact)
        return kparams

    def getWsdlUsername(self):
        return self.wsdlUsername

    def setWsdlUsername(self, newWsdlUsername):
        self.wsdlUsername = newWsdlUsername

    def getWsdlPassword(self):
        return self.wsdlPassword

    def setWsdlPassword(self, newWsdlPassword):
        self.wsdlPassword = newWsdlPassword

    def getCpcode(self):
        return self.cpcode

    def setCpcode(self, newCpcode):
        self.cpcode = newCpcode

    def getEmailId(self):
        return self.emailId

    def setEmailId(self, newEmailId):
        self.emailId = newEmailId

    def getPrimaryContact(self):
        return self.primaryContact

    def setPrimaryContact(self, newPrimaryContact):
        self.primaryContact = newPrimaryContact

    def getSecondaryContact(self):
        return self.secondaryContact

    def setSecondaryContact(self, newSecondaryContact):
        self.secondaryContact = newSecondaryContact


# @package Kaltura
# @subpackage Client
class KalturaAkamaiUniversalProvisionJobData(KalturaProvisionJobData):
    def __init__(self,
            streamID=NotImplemented,
            backupStreamID=NotImplemented,
            rtmp=NotImplemented,
            encoderIP=NotImplemented,
            backupEncoderIP=NotImplemented,
            encoderPassword=NotImplemented,
            encoderUsername=NotImplemented,
            endDate=NotImplemented,
            returnVal=NotImplemented,
            mediaType=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamId=NotImplemented,
            systemUserName=NotImplemented,
            systemPassword=NotImplemented,
            domainName=NotImplemented,
            dvrEnabled=NotImplemented,
            dvrWindow=NotImplemented,
            primaryContact=NotImplemented,
            secondaryContact=NotImplemented,
            streamType=NotImplemented,
            notificationEmail=NotImplemented):
        KalturaProvisionJobData.__init__(self,
            streamID,
            backupStreamID,
            rtmp,
            encoderIP,
            backupEncoderIP,
            encoderPassword,
            encoderUsername,
            endDate,
            returnVal,
            mediaType,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            streamName)

        # @var int
        self.streamId = streamId

        # @var string
        self.systemUserName = systemUserName

        # @var string
        self.systemPassword = systemPassword

        # @var string
        self.domainName = domainName

        # @var KalturaDVRStatus
        self.dvrEnabled = dvrEnabled

        # @var int
        self.dvrWindow = dvrWindow

        # @var string
        self.primaryContact = primaryContact

        # @var string
        self.secondaryContact = secondaryContact

        # @var KalturaAkamaiUniversalStreamType
        self.streamType = streamType

        # @var string
        self.notificationEmail = notificationEmail


    PROPERTY_LOADERS = {
        'streamId': getXmlNodeInt, 
        'systemUserName': getXmlNodeText, 
        'systemPassword': getXmlNodeText, 
        'domainName': getXmlNodeText, 
        'dvrEnabled': (KalturaEnumsFactory.createInt, "KalturaDVRStatus"), 
        'dvrWindow': getXmlNodeInt, 
        'primaryContact': getXmlNodeText, 
        'secondaryContact': getXmlNodeText, 
        'streamType': (KalturaEnumsFactory.createString, "KalturaAkamaiUniversalStreamType"), 
        'notificationEmail': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaProvisionJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAkamaiUniversalProvisionJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaProvisionJobData.toParams(self)
        kparams.put("objectType", "KalturaAkamaiUniversalProvisionJobData")
        kparams.addIntIfDefined("streamId", self.streamId)
        kparams.addStringIfDefined("systemUserName", self.systemUserName)
        kparams.addStringIfDefined("systemPassword", self.systemPassword)
        kparams.addStringIfDefined("domainName", self.domainName)
        kparams.addIntEnumIfDefined("dvrEnabled", self.dvrEnabled)
        kparams.addIntIfDefined("dvrWindow", self.dvrWindow)
        kparams.addStringIfDefined("primaryContact", self.primaryContact)
        kparams.addStringIfDefined("secondaryContact", self.secondaryContact)
        kparams.addStringEnumIfDefined("streamType", self.streamType)
        kparams.addStringIfDefined("notificationEmail", self.notificationEmail)
        return kparams

    def getStreamId(self):
        return self.streamId

    def setStreamId(self, newStreamId):
        self.streamId = newStreamId

    def getSystemUserName(self):
        return self.systemUserName

    def setSystemUserName(self, newSystemUserName):
        self.systemUserName = newSystemUserName

    def getSystemPassword(self):
        return self.systemPassword

    def setSystemPassword(self, newSystemPassword):
        self.systemPassword = newSystemPassword

    def getDomainName(self):
        return self.domainName

    def setDomainName(self, newDomainName):
        self.domainName = newDomainName

    def getDvrEnabled(self):
        return self.dvrEnabled

    def setDvrEnabled(self, newDvrEnabled):
        self.dvrEnabled = newDvrEnabled

    def getDvrWindow(self):
        return self.dvrWindow

    def setDvrWindow(self, newDvrWindow):
        self.dvrWindow = newDvrWindow

    def getPrimaryContact(self):
        return self.primaryContact

    def setPrimaryContact(self, newPrimaryContact):
        self.primaryContact = newPrimaryContact

    def getSecondaryContact(self):
        return self.secondaryContact

    def setSecondaryContact(self, newSecondaryContact):
        self.secondaryContact = newSecondaryContact

    def getStreamType(self):
        return self.streamType

    def setStreamType(self, newStreamType):
        self.streamType = newStreamType

    def getNotificationEmail(self):
        return self.notificationEmail

    def setNotificationEmail(self, newNotificationEmail):
        self.notificationEmail = newNotificationEmail


# @package Kaltura
# @subpackage Client
class KalturaAppTokenFilter(KalturaAppTokenBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaAppTokenBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAppTokenBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAppTokenFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAppTokenBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAppTokenFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var int
        self.sizeGreaterThanOrEqual = sizeGreaterThanOrEqual

        # @var int
        self.sizeLessThanOrEqual = sizeLessThanOrEqual

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.deletedAtGreaterThanOrEqual = deletedAtGreaterThanOrEqual

        # @var int
        self.deletedAtLessThanOrEqual = deletedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeText, 
        'idIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'sizeGreaterThanOrEqual': getXmlNodeInt, 
        'sizeLessThanOrEqual': getXmlNodeInt, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'deletedAtGreaterThanOrEqual': getXmlNodeInt, 
        'deletedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetBaseFilter")
        kparams.addStringIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addIntIfDefined("sizeGreaterThanOrEqual", self.sizeGreaterThanOrEqual)
        kparams.addIntIfDefined("sizeLessThanOrEqual", self.sizeLessThanOrEqual)
        kparams.addStringIfDefined("tagsLike", self.tagsLike)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("deletedAtGreaterThanOrEqual", self.deletedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("deletedAtLessThanOrEqual", self.deletedAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getSizeGreaterThanOrEqual(self):
        return self.sizeGreaterThanOrEqual

    def setSizeGreaterThanOrEqual(self, newSizeGreaterThanOrEqual):
        self.sizeGreaterThanOrEqual = newSizeGreaterThanOrEqual

    def getSizeLessThanOrEqual(self):
        return self.sizeLessThanOrEqual

    def setSizeLessThanOrEqual(self, newSizeLessThanOrEqual):
        self.sizeLessThanOrEqual = newSizeLessThanOrEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getDeletedAtGreaterThanOrEqual(self):
        return self.deletedAtGreaterThanOrEqual

    def setDeletedAtGreaterThanOrEqual(self, newDeletedAtGreaterThanOrEqual):
        self.deletedAtGreaterThanOrEqual = newDeletedAtGreaterThanOrEqual

    def getDeletedAtLessThanOrEqual(self):
        return self.deletedAtLessThanOrEqual

    def setDeletedAtLessThanOrEqual(self, newDeletedAtLessThanOrEqual):
        self.deletedAtLessThanOrEqual = newDeletedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var KalturaNullableBoolean
        self.isSystemDefaultEqual = isSystemDefaultEqual

        # @var string
        self.tagsEqual = tagsEqual


    PROPERTY_LOADERS = {
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'isSystemDefaultEqual': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'tagsEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsBaseFilter")
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addIntEnumIfDefined("isSystemDefaultEqual", self.isSystemDefaultEqual)
        kparams.addStringIfDefined("tagsEqual", self.tagsEqual)
        return kparams

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getIsSystemDefaultEqual(self):
        return self.isSystemDefaultEqual

    def setIsSystemDefaultEqual(self, newIsSystemDefaultEqual):
        self.isSystemDefaultEqual = newIsSystemDefaultEqual

    def getTagsEqual(self):
        return self.tagsEqual

    def setTagsEqual(self, newTagsEqual):
        self.tagsEqual = newTagsEqual


# @package Kaltura
# @subpackage Client
class KalturaAssetResource(KalturaContentResource):
    """Used to ingest media that is already ingested to Kaltura system as a different flavor asset in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync of the existing flavor asset."""

    def __init__(self,
            assetId=NotImplemented):
        KalturaContentResource.__init__(self)

        # ID of the source asset
        # @var string
        self.assetId = assetId


    PROPERTY_LOADERS = {
        'assetId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaAssetResource")
        kparams.addStringIfDefined("assetId", self.assetId)
        return kparams

    def getAssetId(self):
        return self.assetId

    def setAssetId(self, newAssetId):
        self.assetId = newAssetId


# @package Kaltura
# @subpackage Client
class KalturaBaseSyndicationFeedFilter(KalturaBaseSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaBaseSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadFilter(KalturaBulkUploadBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            uploadedOnGreaterThanOrEqual=NotImplemented,
            uploadedOnLessThanOrEqual=NotImplemented,
            uploadedOnEqual=NotImplemented,
            statusIn=NotImplemented,
            statusEqual=NotImplemented,
            bulkUploadObjectTypeEqual=NotImplemented,
            bulkUploadObjectTypeIn=NotImplemented):
        KalturaBulkUploadBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            uploadedOnGreaterThanOrEqual,
            uploadedOnLessThanOrEqual,
            uploadedOnEqual,
            statusIn,
            statusEqual,
            bulkUploadObjectTypeEqual,
            bulkUploadObjectTypeIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBulkUploadBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBulkUploadFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBulkUploadBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaBulkUploadFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCategoryBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            depthEqual=NotImplemented,
            fullNameEqual=NotImplemented,
            fullNameStartsWith=NotImplemented,
            fullNameIn=NotImplemented,
            fullIdsEqual=NotImplemented,
            fullIdsStartsWith=NotImplemented,
            fullIdsMatchOr=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            appearInListEqual=NotImplemented,
            privacyEqual=NotImplemented,
            privacyIn=NotImplemented,
            inheritanceTypeEqual=NotImplemented,
            inheritanceTypeIn=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdEmpty=NotImplemented,
            contributionPolicyEqual=NotImplemented,
            membersCountGreaterThanOrEqual=NotImplemented,
            membersCountLessThanOrEqual=NotImplemented,
            pendingMembersCountGreaterThanOrEqual=NotImplemented,
            pendingMembersCountLessThanOrEqual=NotImplemented,
            privacyContextEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            inheritedParentIdEqual=NotImplemented,
            inheritedParentIdIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            aggregationCategoriesMultiLikeOr=NotImplemented,
            aggregationCategoriesMultiLikeAnd=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var int
        self.parentIdEqual = parentIdEqual

        # @var string
        self.parentIdIn = parentIdIn

        # @var int
        self.depthEqual = depthEqual

        # @var string
        self.fullNameEqual = fullNameEqual

        # @var string
        self.fullNameStartsWith = fullNameStartsWith

        # @var string
        self.fullNameIn = fullNameIn

        # @var string
        self.fullIdsEqual = fullIdsEqual

        # @var string
        self.fullIdsStartsWith = fullIdsStartsWith

        # @var string
        self.fullIdsMatchOr = fullIdsMatchOr

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var string
        self.tagsLike = tagsLike

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var KalturaAppearInListType
        self.appearInListEqual = appearInListEqual

        # @var KalturaPrivacyType
        self.privacyEqual = privacyEqual

        # @var string
        self.privacyIn = privacyIn

        # @var KalturaInheritanceType
        self.inheritanceTypeEqual = inheritanceTypeEqual

        # @var string
        self.inheritanceTypeIn = inheritanceTypeIn

        # @var string
        self.referenceIdEqual = referenceIdEqual

        # @var KalturaNullableBoolean
        self.referenceIdEmpty = referenceIdEmpty

        # @var KalturaContributionPolicyType
        self.contributionPolicyEqual = contributionPolicyEqual

        # @var int
        self.membersCountGreaterThanOrEqual = membersCountGreaterThanOrEqual

        # @var int
        self.membersCountLessThanOrEqual = membersCountLessThanOrEqual

        # @var int
        self.pendingMembersCountGreaterThanOrEqual = pendingMembersCountGreaterThanOrEqual

        # @var int
        self.pendingMembersCountLessThanOrEqual = pendingMembersCountLessThanOrEqual

        # @var string
        self.privacyContextEqual = privacyContextEqual

        # @var KalturaCategoryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.inheritedParentIdEqual = inheritedParentIdEqual

        # @var string
        self.inheritedParentIdIn = inheritedParentIdIn

        # @var int
        self.partnerSortValueGreaterThanOrEqual = partnerSortValueGreaterThanOrEqual

        # @var int
        self.partnerSortValueLessThanOrEqual = partnerSortValueLessThanOrEqual

        # @var string
        self.aggregationCategoriesMultiLikeOr = aggregationCategoriesMultiLikeOr

        # @var string
        self.aggregationCategoriesMultiLikeAnd = aggregationCategoriesMultiLikeAnd


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'parentIdEqual': getXmlNodeInt, 
        'parentIdIn': getXmlNodeText, 
        'depthEqual': getXmlNodeInt, 
        'fullNameEqual': getXmlNodeText, 
        'fullNameStartsWith': getXmlNodeText, 
        'fullNameIn': getXmlNodeText, 
        'fullIdsEqual': getXmlNodeText, 
        'fullIdsStartsWith': getXmlNodeText, 
        'fullIdsMatchOr': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'tagsLike': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'appearInListEqual': (KalturaEnumsFactory.createInt, "KalturaAppearInListType"), 
        'privacyEqual': (KalturaEnumsFactory.createInt, "KalturaPrivacyType"), 
        'privacyIn': getXmlNodeText, 
        'inheritanceTypeEqual': (KalturaEnumsFactory.createInt, "KalturaInheritanceType"), 
        'inheritanceTypeIn': getXmlNodeText, 
        'referenceIdEqual': getXmlNodeText, 
        'referenceIdEmpty': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'contributionPolicyEqual': (KalturaEnumsFactory.createInt, "KalturaContributionPolicyType"), 
        'membersCountGreaterThanOrEqual': getXmlNodeInt, 
        'membersCountLessThanOrEqual': getXmlNodeInt, 
        'pendingMembersCountGreaterThanOrEqual': getXmlNodeInt, 
        'pendingMembersCountLessThanOrEqual': getXmlNodeInt, 
        'privacyContextEqual': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaCategoryStatus"), 
        'statusIn': getXmlNodeText, 
        'inheritedParentIdEqual': getXmlNodeInt, 
        'inheritedParentIdIn': getXmlNodeText, 
        'partnerSortValueGreaterThanOrEqual': getXmlNodeInt, 
        'partnerSortValueLessThanOrEqual': getXmlNodeInt, 
        'aggregationCategoriesMultiLikeOr': getXmlNodeText, 
        'aggregationCategoriesMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("idNotIn", self.idNotIn)
        kparams.addIntIfDefined("parentIdEqual", self.parentIdEqual)
        kparams.addStringIfDefined("parentIdIn", self.parentIdIn)
        kparams.addIntIfDefined("depthEqual", self.depthEqual)
        kparams.addStringIfDefined("fullNameEqual", self.fullNameEqual)
        kparams.addStringIfDefined("fullNameStartsWith", self.fullNameStartsWith)
        kparams.addStringIfDefined("fullNameIn", self.fullNameIn)
        kparams.addStringIfDefined("fullIdsEqual", self.fullIdsEqual)
        kparams.addStringIfDefined("fullIdsStartsWith", self.fullIdsStartsWith)
        kparams.addStringIfDefined("fullIdsMatchOr", self.fullIdsMatchOr)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addStringIfDefined("tagsLike", self.tagsLike)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntEnumIfDefined("appearInListEqual", self.appearInListEqual)
        kparams.addIntEnumIfDefined("privacyEqual", self.privacyEqual)
        kparams.addStringIfDefined("privacyIn", self.privacyIn)
        kparams.addIntEnumIfDefined("inheritanceTypeEqual", self.inheritanceTypeEqual)
        kparams.addStringIfDefined("inheritanceTypeIn", self.inheritanceTypeIn)
        kparams.addStringIfDefined("referenceIdEqual", self.referenceIdEqual)
        kparams.addIntEnumIfDefined("referenceIdEmpty", self.referenceIdEmpty)
        kparams.addIntEnumIfDefined("contributionPolicyEqual", self.contributionPolicyEqual)
        kparams.addIntIfDefined("membersCountGreaterThanOrEqual", self.membersCountGreaterThanOrEqual)
        kparams.addIntIfDefined("membersCountLessThanOrEqual", self.membersCountLessThanOrEqual)
        kparams.addIntIfDefined("pendingMembersCountGreaterThanOrEqual", self.pendingMembersCountGreaterThanOrEqual)
        kparams.addIntIfDefined("pendingMembersCountLessThanOrEqual", self.pendingMembersCountLessThanOrEqual)
        kparams.addStringIfDefined("privacyContextEqual", self.privacyContextEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("inheritedParentIdEqual", self.inheritedParentIdEqual)
        kparams.addStringIfDefined("inheritedParentIdIn", self.inheritedParentIdIn)
        kparams.addIntIfDefined("partnerSortValueGreaterThanOrEqual", self.partnerSortValueGreaterThanOrEqual)
        kparams.addIntIfDefined("partnerSortValueLessThanOrEqual", self.partnerSortValueLessThanOrEqual)
        kparams.addStringIfDefined("aggregationCategoriesMultiLikeOr", self.aggregationCategoriesMultiLikeOr)
        kparams.addStringIfDefined("aggregationCategoriesMultiLikeAnd", self.aggregationCategoriesMultiLikeAnd)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getParentIdEqual(self):
        return self.parentIdEqual

    def setParentIdEqual(self, newParentIdEqual):
        self.parentIdEqual = newParentIdEqual

    def getParentIdIn(self):
        return self.parentIdIn

    def setParentIdIn(self, newParentIdIn):
        self.parentIdIn = newParentIdIn

    def getDepthEqual(self):
        return self.depthEqual

    def setDepthEqual(self, newDepthEqual):
        self.depthEqual = newDepthEqual

    def getFullNameEqual(self):
        return self.fullNameEqual

    def setFullNameEqual(self, newFullNameEqual):
        self.fullNameEqual = newFullNameEqual

    def getFullNameStartsWith(self):
        return self.fullNameStartsWith

    def setFullNameStartsWith(self, newFullNameStartsWith):
        self.fullNameStartsWith = newFullNameStartsWith

    def getFullNameIn(self):
        return self.fullNameIn

    def setFullNameIn(self, newFullNameIn):
        self.fullNameIn = newFullNameIn

    def getFullIdsEqual(self):
        return self.fullIdsEqual

    def setFullIdsEqual(self, newFullIdsEqual):
        self.fullIdsEqual = newFullIdsEqual

    def getFullIdsStartsWith(self):
        return self.fullIdsStartsWith

    def setFullIdsStartsWith(self, newFullIdsStartsWith):
        self.fullIdsStartsWith = newFullIdsStartsWith

    def getFullIdsMatchOr(self):
        return self.fullIdsMatchOr

    def setFullIdsMatchOr(self, newFullIdsMatchOr):
        self.fullIdsMatchOr = newFullIdsMatchOr

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getTagsLike(self):
        return self.tagsLike

    def setTagsLike(self, newTagsLike):
        self.tagsLike = newTagsLike

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getAppearInListEqual(self):
        return self.appearInListEqual

    def setAppearInListEqual(self, newAppearInListEqual):
        self.appearInListEqual = newAppearInListEqual

    def getPrivacyEqual(self):
        return self.privacyEqual

    def setPrivacyEqual(self, newPrivacyEqual):
        self.privacyEqual = newPrivacyEqual

    def getPrivacyIn(self):
        return self.privacyIn

    def setPrivacyIn(self, newPrivacyIn):
        self.privacyIn = newPrivacyIn

    def getInheritanceTypeEqual(self):
        return self.inheritanceTypeEqual

    def setInheritanceTypeEqual(self, newInheritanceTypeEqual):
        self.inheritanceTypeEqual = newInheritanceTypeEqual

    def getInheritanceTypeIn(self):
        return self.inheritanceTypeIn

    def setInheritanceTypeIn(self, newInheritanceTypeIn):
        self.inheritanceTypeIn = newInheritanceTypeIn

    def getReferenceIdEqual(self):
        return self.referenceIdEqual

    def setReferenceIdEqual(self, newReferenceIdEqual):
        self.referenceIdEqual = newReferenceIdEqual

    def getReferenceIdEmpty(self):
        return self.referenceIdEmpty

    def setReferenceIdEmpty(self, newReferenceIdEmpty):
        self.referenceIdEmpty = newReferenceIdEmpty

    def getContributionPolicyEqual(self):
        return self.contributionPolicyEqual

    def setContributionPolicyEqual(self, newContributionPolicyEqual):
        self.contributionPolicyEqual = newContributionPolicyEqual

    def getMembersCountGreaterThanOrEqual(self):
        return self.membersCountGreaterThanOrEqual

    def setMembersCountGreaterThanOrEqual(self, newMembersCountGreaterThanOrEqual):
        self.membersCountGreaterThanOrEqual = newMembersCountGreaterThanOrEqual

    def getMembersCountLessThanOrEqual(self):
        return self.membersCountLessThanOrEqual

    def setMembersCountLessThanOrEqual(self, newMembersCountLessThanOrEqual):
        self.membersCountLessThanOrEqual = newMembersCountLessThanOrEqual

    def getPendingMembersCountGreaterThanOrEqual(self):
        return self.pendingMembersCountGreaterThanOrEqual

    def setPendingMembersCountGreaterThanOrEqual(self, newPendingMembersCountGreaterThanOrEqual):
        self.pendingMembersCountGreaterThanOrEqual = newPendingMembersCountGreaterThanOrEqual

    def getPendingMembersCountLessThanOrEqual(self):
        return self.pendingMembersCountLessThanOrEqual

    def setPendingMembersCountLessThanOrEqual(self, newPendingMembersCountLessThanOrEqual):
        self.pendingMembersCountLessThanOrEqual = newPendingMembersCountLessThanOrEqual

    def getPrivacyContextEqual(self):
        return self.privacyContextEqual

    def setPrivacyContextEqual(self, newPrivacyContextEqual):
        self.privacyContextEqual = newPrivacyContextEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getInheritedParentIdEqual(self):
        return self.inheritedParentIdEqual

    def setInheritedParentIdEqual(self, newInheritedParentIdEqual):
        self.inheritedParentIdEqual = newInheritedParentIdEqual

    def getInheritedParentIdIn(self):
        return self.inheritedParentIdIn

    def setInheritedParentIdIn(self, newInheritedParentIdIn):
        self.inheritedParentIdIn = newInheritedParentIdIn

    def getPartnerSortValueGreaterThanOrEqual(self):
        return self.partnerSortValueGreaterThanOrEqual

    def setPartnerSortValueGreaterThanOrEqual(self, newPartnerSortValueGreaterThanOrEqual):
        self.partnerSortValueGreaterThanOrEqual = newPartnerSortValueGreaterThanOrEqual

    def getPartnerSortValueLessThanOrEqual(self):
        return self.partnerSortValueLessThanOrEqual

    def setPartnerSortValueLessThanOrEqual(self, newPartnerSortValueLessThanOrEqual):
        self.partnerSortValueLessThanOrEqual = newPartnerSortValueLessThanOrEqual

    def getAggregationCategoriesMultiLikeOr(self):
        return self.aggregationCategoriesMultiLikeOr

    def setAggregationCategoriesMultiLikeOr(self, newAggregationCategoriesMultiLikeOr):
        self.aggregationCategoriesMultiLikeOr = newAggregationCategoriesMultiLikeOr

    def getAggregationCategoriesMultiLikeAnd(self):
        return self.aggregationCategoriesMultiLikeAnd

    def setAggregationCategoriesMultiLikeAnd(self, newAggregationCategoriesMultiLikeAnd):
        self.aggregationCategoriesMultiLikeAnd = newAggregationCategoriesMultiLikeAnd


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.categoryIdEqual = categoryIdEqual

        # @var string
        self.categoryIdIn = categoryIdIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var string
        self.categoryFullIdsStartsWith = categoryFullIdsStartsWith

        # @var KalturaCategoryEntryStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'categoryIdEqual': getXmlNodeInt, 
        'categoryIdIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'categoryFullIdsStartsWith': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaCategoryEntryStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryEntryBaseFilter")
        kparams.addIntIfDefined("categoryIdEqual", self.categoryIdEqual)
        kparams.addStringIfDefined("categoryIdIn", self.categoryIdIn)
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addStringIfDefined("categoryFullIdsStartsWith", self.categoryFullIdsStartsWith)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getCategoryIdEqual(self):
        return self.categoryIdEqual

    def setCategoryIdEqual(self, newCategoryIdEqual):
        self.categoryIdEqual = newCategoryIdEqual

    def getCategoryIdIn(self):
        return self.categoryIdIn

    def setCategoryIdIn(self, newCategoryIdIn):
        self.categoryIdIn = newCategoryIdIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCategoryFullIdsStartsWith(self):
        return self.categoryFullIdsStartsWith

    def setCategoryFullIdsStartsWith(self, newCategoryFullIdsStartsWith):
        self.categoryFullIdsStartsWith = newCategoryFullIdsStartsWith

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaControlPanelCommandFilter(KalturaControlPanelCommandBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdByIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            targetTypeEqual=NotImplemented,
            targetTypeIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaControlPanelCommandBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            createdByIdEqual,
            typeEqual,
            typeIn,
            targetTypeEqual,
            targetTypeIn,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaControlPanelCommandBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaControlPanelCommandFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaControlPanelCommandBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaControlPanelCommandFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParamsBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            conversionProfileIdEqual=NotImplemented,
            conversionProfileIdIn=NotImplemented,
            assetParamsIdEqual=NotImplemented,
            assetParamsIdIn=NotImplemented,
            readyBehaviorEqual=NotImplemented,
            readyBehaviorIn=NotImplemented,
            originEqual=NotImplemented,
            originIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.conversionProfileIdEqual = conversionProfileIdEqual

        # @var string
        self.conversionProfileIdIn = conversionProfileIdIn

        # @var int
        self.assetParamsIdEqual = assetParamsIdEqual

        # @var string
        self.assetParamsIdIn = assetParamsIdIn

        # @var KalturaFlavorReadyBehaviorType
        self.readyBehaviorEqual = readyBehaviorEqual

        # @var string
        self.readyBehaviorIn = readyBehaviorIn

        # @var KalturaAssetParamsOrigin
        self.originEqual = originEqual

        # @var string
        self.originIn = originIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn


    PROPERTY_LOADERS = {
        'conversionProfileIdEqual': getXmlNodeInt, 
        'conversionProfileIdIn': getXmlNodeText, 
        'assetParamsIdEqual': getXmlNodeInt, 
        'assetParamsIdIn': getXmlNodeText, 
        'readyBehaviorEqual': (KalturaEnumsFactory.createInt, "KalturaFlavorReadyBehaviorType"), 
        'readyBehaviorIn': getXmlNodeText, 
        'originEqual': (KalturaEnumsFactory.createInt, "KalturaAssetParamsOrigin"), 
        'originIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileAssetParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileAssetParamsBaseFilter")
        kparams.addIntIfDefined("conversionProfileIdEqual", self.conversionProfileIdEqual)
        kparams.addStringIfDefined("conversionProfileIdIn", self.conversionProfileIdIn)
        kparams.addIntIfDefined("assetParamsIdEqual", self.assetParamsIdEqual)
        kparams.addStringIfDefined("assetParamsIdIn", self.assetParamsIdIn)
        kparams.addIntEnumIfDefined("readyBehaviorEqual", self.readyBehaviorEqual)
        kparams.addStringIfDefined("readyBehaviorIn", self.readyBehaviorIn)
        kparams.addIntEnumIfDefined("originEqual", self.originEqual)
        kparams.addStringIfDefined("originIn", self.originIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        return kparams

    def getConversionProfileIdEqual(self):
        return self.conversionProfileIdEqual

    def setConversionProfileIdEqual(self, newConversionProfileIdEqual):
        self.conversionProfileIdEqual = newConversionProfileIdEqual

    def getConversionProfileIdIn(self):
        return self.conversionProfileIdIn

    def setConversionProfileIdIn(self, newConversionProfileIdIn):
        self.conversionProfileIdIn = newConversionProfileIdIn

    def getAssetParamsIdEqual(self):
        return self.assetParamsIdEqual

    def setAssetParamsIdEqual(self, newAssetParamsIdEqual):
        self.assetParamsIdEqual = newAssetParamsIdEqual

    def getAssetParamsIdIn(self):
        return self.assetParamsIdIn

    def setAssetParamsIdIn(self, newAssetParamsIdIn):
        self.assetParamsIdIn = newAssetParamsIdIn

    def getReadyBehaviorEqual(self):
        return self.readyBehaviorEqual

    def setReadyBehaviorEqual(self, newReadyBehaviorEqual):
        self.readyBehaviorEqual = newReadyBehaviorEqual

    def getReadyBehaviorIn(self):
        return self.readyBehaviorIn

    def setReadyBehaviorIn(self, newReadyBehaviorIn):
        self.readyBehaviorIn = newReadyBehaviorIn

    def getOriginEqual(self):
        return self.originEqual

    def setOriginEqual(self, newOriginEqual):
        self.originEqual = newOriginEqual

    def getOriginIn(self):
        return self.originIn

    def setOriginIn(self, newOriginIn):
        self.originIn = newOriginIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            defaultEntryIdEqual=NotImplemented,
            defaultEntryIdIn=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var KalturaConversionProfileStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var KalturaConversionProfileType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var string
        self.defaultEntryIdEqual = defaultEntryIdEqual

        # @var string
        self.defaultEntryIdIn = defaultEntryIdIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaConversionProfileStatus"), 
        'statusIn': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaConversionProfileType"), 
        'typeIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'defaultEntryIdEqual': getXmlNodeText, 
        'defaultEntryIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addStringIfDefined("defaultEntryIdEqual", self.defaultEntryIdEqual)
        kparams.addStringIfDefined("defaultEntryIdIn", self.defaultEntryIdIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getDefaultEntryIdEqual(self):
        return self.defaultEntryIdEqual

    def setDefaultEntryIdEqual(self, newDefaultEntryIdEqual):
        self.defaultEntryIdEqual = newDefaultEntryIdEqual

    def getDefaultEntryIdIn(self):
        return self.defaultEntryIdIn

    def setDefaultEntryIdIn(self, newDefaultEntryIdIn):
        self.defaultEntryIdIn = newDefaultEntryIdIn


# @package Kaltura
# @subpackage Client
class KalturaConvertCollectionJobData(KalturaConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            destDirLocalPath=NotImplemented,
            destDirRemoteUrl=NotImplemented,
            destFileName=NotImplemented,
            inputXmlLocalPath=NotImplemented,
            inputXmlRemoteUrl=NotImplemented,
            commandLinesStr=NotImplemented,
            flavors=NotImplemented):
        KalturaConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.destDirLocalPath = destDirLocalPath

        # @var string
        self.destDirRemoteUrl = destDirRemoteUrl

        # @var string
        self.destFileName = destFileName

        # @var string
        self.inputXmlLocalPath = inputXmlLocalPath

        # @var string
        self.inputXmlRemoteUrl = inputXmlRemoteUrl

        # @var string
        self.commandLinesStr = commandLinesStr

        # @var array of KalturaConvertCollectionFlavorData
        self.flavors = flavors


    PROPERTY_LOADERS = {
        'destDirLocalPath': getXmlNodeText, 
        'destDirRemoteUrl': getXmlNodeText, 
        'destFileName': getXmlNodeText, 
        'inputXmlLocalPath': getXmlNodeText, 
        'inputXmlRemoteUrl': getXmlNodeText, 
        'commandLinesStr': getXmlNodeText, 
        'flavors': (KalturaObjectFactory.createArray, KalturaConvertCollectionFlavorData), 
    }

    def fromXml(self, node):
        KalturaConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvertCollectionJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConvartableJobData.toParams(self)
        kparams.put("objectType", "KalturaConvertCollectionJobData")
        kparams.addStringIfDefined("destDirLocalPath", self.destDirLocalPath)
        kparams.addStringIfDefined("destDirRemoteUrl", self.destDirRemoteUrl)
        kparams.addStringIfDefined("destFileName", self.destFileName)
        kparams.addStringIfDefined("inputXmlLocalPath", self.inputXmlLocalPath)
        kparams.addStringIfDefined("inputXmlRemoteUrl", self.inputXmlRemoteUrl)
        kparams.addStringIfDefined("commandLinesStr", self.commandLinesStr)
        kparams.addArrayIfDefined("flavors", self.flavors)
        return kparams

    def getDestDirLocalPath(self):
        return self.destDirLocalPath

    def setDestDirLocalPath(self, newDestDirLocalPath):
        self.destDirLocalPath = newDestDirLocalPath

    def getDestDirRemoteUrl(self):
        return self.destDirRemoteUrl

    def setDestDirRemoteUrl(self, newDestDirRemoteUrl):
        self.destDirRemoteUrl = newDestDirRemoteUrl

    def getDestFileName(self):
        return self.destFileName

    def setDestFileName(self, newDestFileName):
        self.destFileName = newDestFileName

    def getInputXmlLocalPath(self):
        return self.inputXmlLocalPath

    def setInputXmlLocalPath(self, newInputXmlLocalPath):
        self.inputXmlLocalPath = newInputXmlLocalPath

    def getInputXmlRemoteUrl(self):
        return self.inputXmlRemoteUrl

    def setInputXmlRemoteUrl(self, newInputXmlRemoteUrl):
        self.inputXmlRemoteUrl = newInputXmlRemoteUrl

    def getCommandLinesStr(self):
        return self.commandLinesStr

    def setCommandLinesStr(self, newCommandLinesStr):
        self.commandLinesStr = newCommandLinesStr

    def getFlavors(self):
        return self.flavors

    def setFlavors(self, newFlavors):
        self.flavors = newFlavors


# @package Kaltura
# @subpackage Client
class KalturaConvertJobData(KalturaConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            destFileSyncLocalPath=NotImplemented,
            destFileSyncRemoteUrl=NotImplemented,
            logFileSyncLocalPath=NotImplemented,
            logFileSyncRemoteUrl=NotImplemented,
            flavorAssetId=NotImplemented,
            remoteMediaId=NotImplemented,
            customData=NotImplemented,
            extraDestFileSyncs=NotImplemented,
            engineMessage=NotImplemented):
        KalturaConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.destFileSyncLocalPath = destFileSyncLocalPath

        # @var string
        self.destFileSyncRemoteUrl = destFileSyncRemoteUrl

        # @var string
        self.logFileSyncLocalPath = logFileSyncLocalPath

        # @var string
        self.logFileSyncRemoteUrl = logFileSyncRemoteUrl

        # @var string
        self.flavorAssetId = flavorAssetId

        # @var string
        self.remoteMediaId = remoteMediaId

        # @var string
        self.customData = customData

        # @var array of KalturaDestFileSyncDescriptor
        self.extraDestFileSyncs = extraDestFileSyncs

        # @var string
        self.engineMessage = engineMessage


    PROPERTY_LOADERS = {
        'destFileSyncLocalPath': getXmlNodeText, 
        'destFileSyncRemoteUrl': getXmlNodeText, 
        'logFileSyncLocalPath': getXmlNodeText, 
        'logFileSyncRemoteUrl': getXmlNodeText, 
        'flavorAssetId': getXmlNodeText, 
        'remoteMediaId': getXmlNodeText, 
        'customData': getXmlNodeText, 
        'extraDestFileSyncs': (KalturaObjectFactory.createArray, KalturaDestFileSyncDescriptor), 
        'engineMessage': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConvertJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConvartableJobData.toParams(self)
        kparams.put("objectType", "KalturaConvertJobData")
        kparams.addStringIfDefined("destFileSyncLocalPath", self.destFileSyncLocalPath)
        kparams.addStringIfDefined("destFileSyncRemoteUrl", self.destFileSyncRemoteUrl)
        kparams.addStringIfDefined("logFileSyncLocalPath", self.logFileSyncLocalPath)
        kparams.addStringIfDefined("logFileSyncRemoteUrl", self.logFileSyncRemoteUrl)
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addStringIfDefined("remoteMediaId", self.remoteMediaId)
        kparams.addStringIfDefined("customData", self.customData)
        kparams.addArrayIfDefined("extraDestFileSyncs", self.extraDestFileSyncs)
        kparams.addStringIfDefined("engineMessage", self.engineMessage)
        return kparams

    def getDestFileSyncLocalPath(self):
        return self.destFileSyncLocalPath

    def setDestFileSyncLocalPath(self, newDestFileSyncLocalPath):
        self.destFileSyncLocalPath = newDestFileSyncLocalPath

    def getDestFileSyncRemoteUrl(self):
        return self.destFileSyncRemoteUrl

    def setDestFileSyncRemoteUrl(self, newDestFileSyncRemoteUrl):
        self.destFileSyncRemoteUrl = newDestFileSyncRemoteUrl

    def getLogFileSyncLocalPath(self):
        return self.logFileSyncLocalPath

    def setLogFileSyncLocalPath(self, newLogFileSyncLocalPath):
        self.logFileSyncLocalPath = newLogFileSyncLocalPath

    def getLogFileSyncRemoteUrl(self):
        return self.logFileSyncRemoteUrl

    def setLogFileSyncRemoteUrl(self, newLogFileSyncRemoteUrl):
        self.logFileSyncRemoteUrl = newLogFileSyncRemoteUrl

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getRemoteMediaId(self):
        return self.remoteMediaId

    def setRemoteMediaId(self, newRemoteMediaId):
        self.remoteMediaId = newRemoteMediaId

    def getCustomData(self):
        return self.customData

    def setCustomData(self, newCustomData):
        self.customData = newCustomData

    def getExtraDestFileSyncs(self):
        return self.extraDestFileSyncs

    def setExtraDestFileSyncs(self, newExtraDestFileSyncs):
        self.extraDestFileSyncs = newExtraDestFileSyncs

    def getEngineMessage(self):
        return self.engineMessage

    def setEngineMessage(self, newEngineMessage):
        self.engineMessage = newEngineMessage


# @package Kaltura
# @subpackage Client
class KalturaCountryCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            geoCoderType=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # The ip geo coder engine to be used
        # @var KalturaGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (KalturaEnumsFactory.createString, "KalturaGeoCoderType"), 
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaCountryCondition")
        kparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return kparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileFilter(KalturaDeliveryProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericRtmp(KalturaDeliveryProfileRtmp):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            type=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            streamerType=NotImplemented,
            url=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            recognizer=NotImplemented,
            tokenizer=NotImplemented,
            isDefault=NotImplemented,
            parentId=NotImplemented,
            mediaProtocols=NotImplemented,
            priority=NotImplemented,
            extraParams=NotImplemented,
            enforceRtmpe=NotImplemented,
            prefix=NotImplemented,
            pattern=NotImplemented,
            rendererClass=NotImplemented):
        KalturaDeliveryProfileRtmp.__init__(self,
            id,
            partnerId,
            name,
            type,
            systemName,
            description,
            createdAt,
            updatedAt,
            streamerType,
            url,
            hostName,
            status,
            recognizer,
            tokenizer,
            isDefault,
            parentId,
            mediaProtocols,
            priority,
            extraParams,
            enforceRtmpe,
            prefix)

        # @var string
        self.pattern = pattern

        # rendererClass
        # @var string
        self.rendererClass = rendererClass


    PROPERTY_LOADERS = {
        'pattern': getXmlNodeText, 
        'rendererClass': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryProfileRtmp.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericRtmp.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileRtmp.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericRtmp")
        kparams.addStringIfDefined("pattern", self.pattern)
        kparams.addStringIfDefined("rendererClass", self.rendererClass)
        return kparams

    def getPattern(self):
        return self.pattern

    def setPattern(self, newPattern):
        self.pattern = newPattern

    def getRendererClass(self):
        return self.rendererClass

    def setRendererClass(self, newRendererClass):
        self.rendererClass = newRendererClass


# @package Kaltura
# @subpackage Client
class KalturaEdgeServerNode(KalturaDeliveryServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented,
            deliveryProfileIds=NotImplemented,
            config=NotImplemented):
        KalturaDeliveryServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId,
            playbackDomain)

        # Delivery profile ids
        # @var array of KalturaKeyValue
        self.deliveryProfileIds = deliveryProfileIds

        # Overdie edge server default configuration - json format
        # @var string
        self.config = config


    PROPERTY_LOADERS = {
        'deliveryProfileIds': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'config': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDeliveryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEdgeServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryServerNode.toParams(self)
        kparams.put("objectType", "KalturaEdgeServerNode")
        kparams.addArrayIfDefined("deliveryProfileIds", self.deliveryProfileIds)
        kparams.addStringIfDefined("config", self.config)
        return kparams

    def getDeliveryProfileIds(self):
        return self.deliveryProfileIds

    def setDeliveryProfileIds(self, newDeliveryProfileIds):
        self.deliveryProfileIds = newDeliveryProfileIds

    def getConfig(self):
        return self.config

    def setConfig(self, newConfig):
        self.config = newConfig


# @package Kaltura
# @subpackage Client
class KalturaEndUserReportInputFilter(KalturaReportInputFilter):
    def __init__(self,
            fromDate=NotImplemented,
            toDate=NotImplemented,
            fromDay=NotImplemented,
            toDay=NotImplemented,
            keywords=NotImplemented,
            searchInTags=NotImplemented,
            searchInAdminTags=NotImplemented,
            categories=NotImplemented,
            timeZoneOffset=NotImplemented,
            interval=NotImplemented,
            application=NotImplemented,
            userIds=NotImplemented,
            playbackContext=NotImplemented,
            ancestorPlaybackContext=NotImplemented):
        KalturaReportInputFilter.__init__(self,
            fromDate,
            toDate,
            fromDay,
            toDay,
            keywords,
            searchInTags,
            searchInAdminTags,
            categories,
            timeZoneOffset,
            interval)

        # @var string
        self.application = application

        # @var string
        self.userIds = userIds

        # @var string
        self.playbackContext = playbackContext

        # @var string
        self.ancestorPlaybackContext = ancestorPlaybackContext


    PROPERTY_LOADERS = {
        'application': getXmlNodeText, 
        'userIds': getXmlNodeText, 
        'playbackContext': getXmlNodeText, 
        'ancestorPlaybackContext': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaReportInputFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEndUserReportInputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaReportInputFilter.toParams(self)
        kparams.put("objectType", "KalturaEndUserReportInputFilter")
        kparams.addStringIfDefined("application", self.application)
        kparams.addStringIfDefined("userIds", self.userIds)
        kparams.addStringIfDefined("playbackContext", self.playbackContext)
        kparams.addStringIfDefined("ancestorPlaybackContext", self.ancestorPlaybackContext)
        return kparams

    def getApplication(self):
        return self.application

    def setApplication(self, newApplication):
        self.application = newApplication

    def getUserIds(self):
        return self.userIds

    def setUserIds(self, newUserIds):
        self.userIds = newUserIds

    def getPlaybackContext(self):
        return self.playbackContext

    def setPlaybackContext(self, newPlaybackContext):
        self.playbackContext = newPlaybackContext

    def getAncestorPlaybackContext(self):
        return self.ancestorPlaybackContext

    def setAncestorPlaybackContext(self, newAncestorPlaybackContext):
        self.ancestorPlaybackContext = newAncestorPlaybackContext


# @package Kaltura
# @subpackage Client
class KalturaEntryReferrerLiveStats(KalturaEntryLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented,
            referrer=NotImplemented):
        KalturaEntryLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp,
            entryId,
            peakAudience,
            peakDvrAudience)

        # @var string
        self.referrer = referrer


    PROPERTY_LOADERS = {
        'referrer': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaEntryLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryReferrerLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntryLiveStats.toParams(self)
        kparams.put("objectType", "KalturaEntryReferrerLiveStats")
        kparams.addStringIfDefined("referrer", self.referrer)
        return kparams

    def getReferrer(self):
        return self.referrer

    def setReferrer(self, newReferrer):
        self.referrer = newReferrer


# @package Kaltura
# @subpackage Client
class KalturaEntryResource(KalturaContentResource):
    """Used to ingest media that is already ingested to Kaltura system as a different entry in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync of the existing entry."""

    def __init__(self,
            entryId=NotImplemented,
            flavorParamsId=NotImplemented):
        KalturaContentResource.__init__(self)

        # ID of the source entry
        # @var string
        self.entryId = entryId

        # ID of the source flavor params, set to null to use the source flavor
        # @var int
        self.flavorParamsId = flavorParamsId


    PROPERTY_LOADERS = {
        'entryId': getXmlNodeText, 
        'flavorParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaEntryResource")
        kparams.addStringIfDefined("entryId", self.entryId)
        kparams.addIntIfDefined("flavorParamsId", self.flavorParamsId)
        return kparams

    def getEntryId(self):
        return self.entryId

    def setEntryId(self, newEntryId):
        self.entryId = newEntryId

    def getFlavorParamsId(self):
        return self.flavorParamsId

    def setFlavorParamsId(self, newFlavorParamsId):
        self.flavorParamsId = newFlavorParamsId


# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var int
        self.serverNodeIdEqual = serverNodeIdEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaEntryServerNodeStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var KalturaEntryServerNodeType
        self.serverTypeEqual = serverTypeEqual


    PROPERTY_LOADERS = {
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'serverNodeIdEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaEntryServerNodeStatus"), 
        'statusIn': getXmlNodeText, 
        'serverTypeEqual': (KalturaEnumsFactory.createString, "KalturaEntryServerNodeType"), 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaEntryServerNodeBaseFilter")
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        kparams.addIntIfDefined("serverNodeIdEqual", self.serverNodeIdEqual)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringEnumIfDefined("serverTypeEqual", self.serverTypeEqual)
        return kparams

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getServerNodeIdEqual(self):
        return self.serverNodeIdEqual

    def setServerNodeIdEqual(self, newServerNodeIdEqual):
        self.serverNodeIdEqual = newServerNodeIdEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getServerTypeEqual(self):
        return self.serverTypeEqual

    def setServerTypeEqual(self, newServerTypeEqual):
        self.serverTypeEqual = newServerTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaExtractMediaJobData(KalturaConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            flavorAssetId=NotImplemented):
        KalturaConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.flavorAssetId = flavorAssetId


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExtractMediaJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConvartableJobData.toParams(self)
        kparams.put("objectType", "KalturaExtractMediaJobData")
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        return kparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId


# @package Kaltura
# @subpackage Client
class KalturaIntegerField(KalturaIntegerValue):
    """An int representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaIntegerValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaIntegerValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIntegerField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIntegerValue.toParams(self)
        kparams.put("objectType", "KalturaIntegerField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFieldCompareCondition(KalturaCompareCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented,
            field=NotImplemented):
        KalturaCompareCondition.__init__(self,
            type,
            description,
            not_,
            value,
            comparison)

        # Field to evaluate
        # @var KalturaIntegerField
        self.field = field


    PROPERTY_LOADERS = {
        'field': (KalturaObjectFactory.create, KalturaIntegerField), 
    }

    def fromXml(self, node):
        KalturaCompareCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFieldCompareCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCompareCondition.toParams(self)
        kparams.put("objectType", "KalturaFieldCompareCondition")
        kparams.addObjectIfDefined("field", self.field)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Kaltura
# @subpackage Client
class KalturaStringField(KalturaStringValue):
    """A string representation to return evaluated dynamic value"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaStringValue.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStringValue.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStringField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringValue.toParams(self)
        kparams.put("objectType", "KalturaStringField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFieldMatchCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            field=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # Field to evaluate
        # @var KalturaStringField
        self.field = field


    PROPERTY_LOADERS = {
        'field': (KalturaObjectFactory.create, KalturaStringField), 
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFieldMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaFieldMatchCondition")
        kparams.addObjectIfDefined("field", self.field)
        return kparams

    def getField(self):
        return self.field

    def setField(self, newField):
        self.field = newField


# @package Kaltura
# @subpackage Client
class KalturaFileAssetBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            fileAssetObjectTypeEqual=NotImplemented,
            objectIdEqual=NotImplemented,
            objectIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var KalturaFileAssetObjectType
        self.fileAssetObjectTypeEqual = fileAssetObjectTypeEqual

        # @var string
        self.objectIdEqual = objectIdEqual

        # @var string
        self.objectIdIn = objectIdIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaFileAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'fileAssetObjectTypeEqual': (KalturaEnumsFactory.createString, "KalturaFileAssetObjectType"), 
        'objectIdEqual': getXmlNodeText, 
        'objectIdIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaFileAssetStatus"), 
        'statusIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaFileAssetBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringEnumIfDefined("fileAssetObjectTypeEqual", self.fileAssetObjectTypeEqual)
        kparams.addStringIfDefined("objectIdEqual", self.objectIdEqual)
        kparams.addStringIfDefined("objectIdIn", self.objectIdIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getFileAssetObjectTypeEqual(self):
        return self.fileAssetObjectTypeEqual

    def setFileAssetObjectTypeEqual(self, newFileAssetObjectTypeEqual):
        self.fileAssetObjectTypeEqual = newFileAssetObjectTypeEqual

    def getObjectIdEqual(self):
        return self.objectIdEqual

    def setObjectIdEqual(self, newObjectIdEqual):
        self.objectIdEqual = newObjectIdEqual

    def getObjectIdIn(self):
        return self.objectIdIn

    def setObjectIdIn(self, newObjectIdIn):
        self.objectIdIn = newObjectIdIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn


# @package Kaltura
# @subpackage Client
class KalturaFileSyncResource(KalturaContentResource):
    """Used to ingest media that is already ingested to Kaltura system as a different file in the past, the new created flavor asset will be ready immediately using a file sync of link type that will point to the existing file sync."""

    def __init__(self,
            fileSyncObjectType=NotImplemented,
            objectSubType=NotImplemented,
            objectId=NotImplemented,
            version=NotImplemented):
        KalturaContentResource.__init__(self)

        # The object type of the file sync object
        # @var int
        self.fileSyncObjectType = fileSyncObjectType

        # The object sub-type of the file sync object
        # @var int
        self.objectSubType = objectSubType

        # The object id of the file sync object
        # @var string
        self.objectId = objectId

        # The version of the file sync object
        # @var string
        self.version = version


    PROPERTY_LOADERS = {
        'fileSyncObjectType': getXmlNodeInt, 
        'objectSubType': getXmlNodeInt, 
        'objectId': getXmlNodeText, 
        'version': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileSyncResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaFileSyncResource")
        kparams.addIntIfDefined("fileSyncObjectType", self.fileSyncObjectType)
        kparams.addIntIfDefined("objectSubType", self.objectSubType)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addStringIfDefined("version", self.version)
        return kparams

    def getFileSyncObjectType(self):
        return self.fileSyncObjectType

    def setFileSyncObjectType(self, newFileSyncObjectType):
        self.fileSyncObjectType = newFileSyncObjectType

    def getObjectSubType(self):
        return self.objectSubType

    def setObjectSubType(self, newObjectSubType):
        self.objectSubType = newObjectSubType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getVersion(self):
        return self.version

    def setVersion(self, newVersion):
        self.version = newVersion


# @package Kaltura
# @subpackage Client
class KalturaGenericXsltSyndicationFeed(KalturaGenericSyndicationFeed):
    def __init__(self,
            id=NotImplemented,
            feedUrl=NotImplemented,
            partnerId=NotImplemented,
            playlistId=NotImplemented,
            name=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            landingPage=NotImplemented,
            createdAt=NotImplemented,
            allowEmbed=NotImplemented,
            playerUiconfId=NotImplemented,
            flavorParamId=NotImplemented,
            transcodeExistingContent=NotImplemented,
            addToDefaultConversionProfile=NotImplemented,
            categories=NotImplemented,
            storageId=NotImplemented,
            entriesOrderBy=NotImplemented,
            enforceEntitlement=NotImplemented,
            privacyContext=NotImplemented,
            updatedAt=NotImplemented,
            useCategoryEntries=NotImplemented,
            feedDescription=NotImplemented,
            feedLandingPage=NotImplemented,
            xslt=NotImplemented,
            itemXpathsToExtend=NotImplemented):
        KalturaGenericSyndicationFeed.__init__(self,
            id,
            feedUrl,
            partnerId,
            playlistId,
            name,
            status,
            type,
            landingPage,
            createdAt,
            allowEmbed,
            playerUiconfId,
            flavorParamId,
            transcodeExistingContent,
            addToDefaultConversionProfile,
            categories,
            storageId,
            entriesOrderBy,
            enforceEntitlement,
            privacyContext,
            updatedAt,
            useCategoryEntries,
            feedDescription,
            feedLandingPage)

        # @var string
        self.xslt = xslt

        # @var array of KalturaExtendingItemMrssParameter
        self.itemXpathsToExtend = itemXpathsToExtend


    PROPERTY_LOADERS = {
        'xslt': getXmlNodeText, 
        'itemXpathsToExtend': (KalturaObjectFactory.createArray, KalturaExtendingItemMrssParameter), 
    }

    def fromXml(self, node):
        KalturaGenericSyndicationFeed.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericXsltSyndicationFeed.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGenericSyndicationFeed.toParams(self)
        kparams.put("objectType", "KalturaGenericXsltSyndicationFeed")
        kparams.addStringIfDefined("xslt", self.xslt)
        kparams.addArrayIfDefined("itemXpathsToExtend", self.itemXpathsToExtend)
        return kparams

    def getXslt(self):
        return self.xslt

    def setXslt(self, newXslt):
        self.xslt = newXslt

    def getItemXpathsToExtend(self):
        return self.itemXpathsToExtend

    def setItemXpathsToExtend(self, newItemXpathsToExtend):
        self.itemXpathsToExtend = newItemXpathsToExtend


# @package Kaltura
# @subpackage Client
class KalturaGeoDistanceCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            geoCoderType=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # The ip geo coder engine to be used
        # @var KalturaGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (KalturaEnumsFactory.createString, "KalturaGeoCoderType"), 
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGeoDistanceCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaGeoDistanceCondition")
        kparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return kparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Kaltura
# @subpackage Client
class KalturaGeoTimeLiveStats(KalturaEntryLiveStats):
    def __init__(self,
            audience=NotImplemented,
            dvrAudience=NotImplemented,
            avgBitrate=NotImplemented,
            bufferTime=NotImplemented,
            plays=NotImplemented,
            secondsViewed=NotImplemented,
            startEvent=NotImplemented,
            timestamp=NotImplemented,
            entryId=NotImplemented,
            peakAudience=NotImplemented,
            peakDvrAudience=NotImplemented,
            city=NotImplemented,
            country=NotImplemented):
        KalturaEntryLiveStats.__init__(self,
            audience,
            dvrAudience,
            avgBitrate,
            bufferTime,
            plays,
            secondsViewed,
            startEvent,
            timestamp,
            entryId,
            peakAudience,
            peakDvrAudience)

        # @var KalturaCoordinate
        self.city = city

        # @var KalturaCoordinate
        self.country = country


    PROPERTY_LOADERS = {
        'city': (KalturaObjectFactory.create, KalturaCoordinate), 
        'country': (KalturaObjectFactory.create, KalturaCoordinate), 
    }

    def fromXml(self, node):
        KalturaEntryLiveStats.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGeoTimeLiveStats.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntryLiveStats.toParams(self)
        kparams.put("objectType", "KalturaGeoTimeLiveStats")
        kparams.addObjectIfDefined("city", self.city)
        kparams.addObjectIfDefined("country", self.country)
        return kparams

    def getCity(self):
        return self.city

    def setCity(self, newCity):
        self.city = newCity

    def getCountry(self):
        return self.country

    def setCountry(self, newCountry):
        self.country = newCountry


# @package Kaltura
# @subpackage Client
class KalturaGroupUserBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            groupIdEqual=NotImplemented,
            groupIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.groupIdEqual = groupIdEqual

        # @var string
        self.groupIdIn = groupIdIn

        # @var KalturaGroupUserStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'groupIdEqual': getXmlNodeText, 
        'groupIdIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaGroupUserStatus"), 
        'statusIn': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGroupUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaGroupUserBaseFilter")
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addStringIfDefined("userIdIn", self.userIdIn)
        kparams.addStringIfDefined("groupIdEqual", self.groupIdEqual)
        kparams.addStringIfDefined("groupIdIn", self.groupIdIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return kparams

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getGroupIdEqual(self):
        return self.groupIdEqual

    def setGroupIdEqual(self, newGroupIdEqual):
        self.groupIdEqual = newGroupIdEqual

    def getGroupIdIn(self):
        return self.groupIdIn

    def setGroupIdIn(self, newGroupIdIn):
        self.groupIdIn = newGroupIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaIpAddressCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented,
            acceptInternalIps=NotImplemented,
            httpHeader=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)

        # allow internal ips
        # @var bool
        self.acceptInternalIps = acceptInternalIps

        # http header name for extracting the ip
        # @var string
        self.httpHeader = httpHeader


    PROPERTY_LOADERS = {
        'acceptInternalIps': getXmlNodeBool, 
        'httpHeader': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIpAddressCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaIpAddressCondition")
        kparams.addBoolIfDefined("acceptInternalIps", self.acceptInternalIps)
        kparams.addStringIfDefined("httpHeader", self.httpHeader)
        return kparams

    def getAcceptInternalIps(self):
        return self.acceptInternalIps

    def setAcceptInternalIps(self, newAcceptInternalIps):
        self.acceptInternalIps = newAcceptInternalIps

    def getHttpHeader(self):
        return self.httpHeader

    def setHttpHeader(self, newHttpHeader):
        self.httpHeader = newHttpHeader


# @package Kaltura
# @subpackage Client
class KalturaLiveAsset(KalturaFlavorAsset):
    def __init__(self,
            id=NotImplemented,
            entryId=NotImplemented,
            partnerId=NotImplemented,
            version=NotImplemented,
            size=NotImplemented,
            tags=NotImplemented,
            fileExt=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            deletedAt=NotImplemented,
            description=NotImplemented,
            partnerData=NotImplemented,
            partnerDescription=NotImplemented,
            actualSourceAssetParamsIds=NotImplemented,
            flavorParamsId=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            bitrate=NotImplemented,
            frameRate=NotImplemented,
            isOriginal=NotImplemented,
            isWeb=NotImplemented,
            containerFormat=NotImplemented,
            videoCodecId=NotImplemented,
            status=NotImplemented,
            language=NotImplemented,
            multicastIP=NotImplemented,
            multicastPort=NotImplemented):
        KalturaFlavorAsset.__init__(self,
            id,
            entryId,
            partnerId,
            version,
            size,
            tags,
            fileExt,
            createdAt,
            updatedAt,
            deletedAt,
            description,
            partnerData,
            partnerDescription,
            actualSourceAssetParamsIds,
            flavorParamsId,
            width,
            height,
            bitrate,
            frameRate,
            isOriginal,
            isWeb,
            containerFormat,
            videoCodecId,
            status,
            language)

        # @var string
        self.multicastIP = multicastIP

        # @var int
        self.multicastPort = multicastPort


    PROPERTY_LOADERS = {
        'multicastIP': getXmlNodeText, 
        'multicastPort': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaFlavorAsset.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveAsset.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorAsset.toParams(self)
        kparams.put("objectType", "KalturaLiveAsset")
        kparams.addStringIfDefined("multicastIP", self.multicastIP)
        kparams.addIntIfDefined("multicastPort", self.multicastPort)
        return kparams

    def getMulticastIP(self):
        return self.multicastIP

    def setMulticastIP(self, newMulticastIP):
        self.multicastIP = newMulticastIP

    def getMulticastPort(self):
        return self.multicastPort

    def setMulticastPort(self, newMulticastPort):
        self.multicastPort = newMulticastPort


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            channelIdEqual=NotImplemented,
            channelIdIn=NotImplemented,
            startTimeGreaterThanOrEqual=NotImplemented,
            startTimeLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var KalturaLiveChannelSegmentStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.channelIdEqual = channelIdEqual

        # @var string
        self.channelIdIn = channelIdIn

        # @var float
        self.startTimeGreaterThanOrEqual = startTimeGreaterThanOrEqual

        # @var float
        self.startTimeLessThanOrEqual = startTimeLessThanOrEqual


    PROPERTY_LOADERS = {
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaLiveChannelSegmentStatus"), 
        'statusIn': getXmlNodeText, 
        'channelIdEqual': getXmlNodeText, 
        'channelIdIn': getXmlNodeText, 
        'startTimeGreaterThanOrEqual': getXmlNodeFloat, 
        'startTimeLessThanOrEqual': getXmlNodeFloat, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelSegmentBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelSegmentBaseFilter")
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("channelIdEqual", self.channelIdEqual)
        kparams.addStringIfDefined("channelIdIn", self.channelIdIn)
        kparams.addFloatIfDefined("startTimeGreaterThanOrEqual", self.startTimeGreaterThanOrEqual)
        kparams.addFloatIfDefined("startTimeLessThanOrEqual", self.startTimeLessThanOrEqual)
        return kparams

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getChannelIdEqual(self):
        return self.channelIdEqual

    def setChannelIdEqual(self, newChannelIdEqual):
        self.channelIdEqual = newChannelIdEqual

    def getChannelIdIn(self):
        return self.channelIdIn

    def setChannelIdIn(self, newChannelIdIn):
        self.channelIdIn = newChannelIdIn

    def getStartTimeGreaterThanOrEqual(self):
        return self.startTimeGreaterThanOrEqual

    def setStartTimeGreaterThanOrEqual(self, newStartTimeGreaterThanOrEqual):
        self.startTimeGreaterThanOrEqual = newStartTimeGreaterThanOrEqual

    def getStartTimeLessThanOrEqual(self):
        return self.startTimeLessThanOrEqual

    def setStartTimeLessThanOrEqual(self, newStartTimeLessThanOrEqual):
        self.startTimeLessThanOrEqual = newStartTimeLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaLiveParams(KalturaFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            streamSuffix=NotImplemented):
        KalturaFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)

        # Suffix to be added to the stream name after the entry id {entry_id}_{stream_suffix}, e.g. for entry id 0_kjdu5jr6 and suffix 1, the stream name will be 0_kjdu5jr6_1
        # @var string
        self.streamSuffix = streamSuffix


    PROPERTY_LOADERS = {
        'streamSuffix': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParams.toParams(self)
        kparams.put("objectType", "KalturaLiveParams")
        kparams.addStringIfDefined("streamSuffix", self.streamSuffix)
        return kparams

    def getStreamSuffix(self):
        return self.streamSuffix

    def setStreamSuffix(self, newStreamSuffix):
        self.streamSuffix = newStreamSuffix


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParams(KalturaFlavorParams):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented):
        KalturaFlavorParams.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParams.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParams.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParams.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParams")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaInfoFilter(KalturaMediaInfoBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            flavorAssetIdEqual=NotImplemented):
        KalturaMediaInfoBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            flavorAssetIdEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaInfoBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaInfoFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaInfoBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaInfoFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaServerNode(KalturaDeliveryServerNode):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            heartbeatTime=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            hostName=NotImplemented,
            status=NotImplemented,
            type=NotImplemented,
            tags=NotImplemented,
            dc=NotImplemented,
            parentId=NotImplemented,
            playbackDomain=NotImplemented,
            applicationName=NotImplemented,
            mediaServerPortConfig=NotImplemented,
            mediaServerPlaybackDomainConfig=NotImplemented):
        KalturaDeliveryServerNode.__init__(self,
            id,
            partnerId,
            createdAt,
            updatedAt,
            heartbeatTime,
            name,
            systemName,
            description,
            hostName,
            status,
            type,
            tags,
            dc,
            parentId,
            playbackDomain)

        # Media server application name
        # @var string
        self.applicationName = applicationName

        # Media server playback port configuration by protocol and format
        # @var array of KalturaKeyValue
        self.mediaServerPortConfig = mediaServerPortConfig

        # Media server playback Domain configuration by protocol and format
        # @var array of KalturaKeyValue
        self.mediaServerPlaybackDomainConfig = mediaServerPlaybackDomainConfig


    PROPERTY_LOADERS = {
        'applicationName': getXmlNodeText, 
        'mediaServerPortConfig': (KalturaObjectFactory.createArray, KalturaKeyValue), 
        'mediaServerPlaybackDomainConfig': (KalturaObjectFactory.createArray, KalturaKeyValue), 
    }

    def fromXml(self, node):
        KalturaDeliveryServerNode.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaServerNode.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryServerNode.toParams(self)
        kparams.put("objectType", "KalturaMediaServerNode")
        kparams.addStringIfDefined("applicationName", self.applicationName)
        kparams.addArrayIfDefined("mediaServerPortConfig", self.mediaServerPortConfig)
        kparams.addArrayIfDefined("mediaServerPlaybackDomainConfig", self.mediaServerPlaybackDomainConfig)
        return kparams

    def getApplicationName(self):
        return self.applicationName

    def setApplicationName(self, newApplicationName):
        self.applicationName = newApplicationName

    def getMediaServerPortConfig(self):
        return self.mediaServerPortConfig

    def setMediaServerPortConfig(self, newMediaServerPortConfig):
        self.mediaServerPortConfig = newMediaServerPortConfig

    def getMediaServerPlaybackDomainConfig(self):
        return self.mediaServerPlaybackDomainConfig

    def setMediaServerPlaybackDomainConfig(self, newMediaServerPlaybackDomainConfig):
        self.mediaServerPlaybackDomainConfig = newMediaServerPlaybackDomainConfig


# @package Kaltura
# @subpackage Client
class KalturaOperationResource(KalturaContentResource):
    """A resource that perform operation (transcoding, clipping, cropping) before the flavor is ready."""

    def __init__(self,
            resource=NotImplemented,
            operationAttributes=NotImplemented,
            assetParamsId=NotImplemented):
        KalturaContentResource.__init__(self)

        # Only KalturaEntryResource and KalturaAssetResource are supported
        # @var KalturaContentResource
        self.resource = resource

        # @var array of KalturaOperationAttributes
        self.operationAttributes = operationAttributes

        # ID of alternative asset params to be used instead of the system default flavor params
        # @var int
        self.assetParamsId = assetParamsId


    PROPERTY_LOADERS = {
        'resource': (KalturaObjectFactory.create, KalturaContentResource), 
        'operationAttributes': (KalturaObjectFactory.createArray, KalturaOperationAttributes), 
        'assetParamsId': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaOperationResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaOperationResource")
        kparams.addObjectIfDefined("resource", self.resource)
        kparams.addArrayIfDefined("operationAttributes", self.operationAttributes)
        kparams.addIntIfDefined("assetParamsId", self.assetParamsId)
        return kparams

    def getResource(self):
        return self.resource

    def setResource(self, newResource):
        self.resource = newResource

    def getOperationAttributes(self):
        return self.operationAttributes

    def setOperationAttributes(self, newOperationAttributes):
        self.operationAttributes = newOperationAttributes

    def getAssetParamsId(self):
        return self.assetParamsId

    def setAssetParamsId(self, newAssetParamsId):
        self.assetParamsId = newAssetParamsId


# @package Kaltura
# @subpackage Client
class KalturaPartnerFilter(KalturaPartnerBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerPackageEqual=NotImplemented,
            partnerPackageGreaterThanOrEqual=NotImplemented,
            partnerPackageLessThanOrEqual=NotImplemented,
            partnerPackageIn=NotImplemented,
            partnerGroupTypeEqual=NotImplemented,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike=NotImplemented):
        KalturaPartnerBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            statusEqual,
            statusIn,
            partnerPackageEqual,
            partnerPackageGreaterThanOrEqual,
            partnerPackageLessThanOrEqual,
            partnerPackageIn,
            partnerGroupTypeEqual,
            partnerNameDescriptionWebsiteAdminNameAdminEmailLike)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPartnerBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPartnerFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPartnerBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaPartnerFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPermissionBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            friendlyNameLike=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            dependsOnPermissionNamesMultiLikeOr=NotImplemented,
            dependsOnPermissionNamesMultiLikeAnd=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var KalturaPermissionType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.friendlyNameLike = friendlyNameLike

        # @var string
        self.descriptionLike = descriptionLike

        # @var KalturaPermissionStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.dependsOnPermissionNamesMultiLikeOr = dependsOnPermissionNamesMultiLikeOr

        # @var string
        self.dependsOnPermissionNamesMultiLikeAnd = dependsOnPermissionNamesMultiLikeAnd

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createInt, "KalturaPermissionType"), 
        'typeIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'friendlyNameLike': getXmlNodeText, 
        'descriptionLike': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaPermissionStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'dependsOnPermissionNamesMultiLikeOr': getXmlNodeText, 
        'dependsOnPermissionNamesMultiLikeAnd': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addIntEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("nameIn", self.nameIn)
        kparams.addStringIfDefined("friendlyNameLike", self.friendlyNameLike)
        kparams.addStringIfDefined("descriptionLike", self.descriptionLike)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("dependsOnPermissionNamesMultiLikeOr", self.dependsOnPermissionNamesMultiLikeOr)
        kparams.addStringIfDefined("dependsOnPermissionNamesMultiLikeAnd", self.dependsOnPermissionNamesMultiLikeAnd)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getFriendlyNameLike(self):
        return self.friendlyNameLike

    def setFriendlyNameLike(self, newFriendlyNameLike):
        self.friendlyNameLike = newFriendlyNameLike

    def getDescriptionLike(self):
        return self.descriptionLike

    def setDescriptionLike(self, newDescriptionLike):
        self.descriptionLike = newDescriptionLike

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getDependsOnPermissionNamesMultiLikeOr(self):
        return self.dependsOnPermissionNamesMultiLikeOr

    def setDependsOnPermissionNamesMultiLikeOr(self, newDependsOnPermissionNamesMultiLikeOr):
        self.dependsOnPermissionNamesMultiLikeOr = newDependsOnPermissionNamesMultiLikeOr

    def getDependsOnPermissionNamesMultiLikeAnd(self):
        return self.dependsOnPermissionNamesMultiLikeAnd

    def setDependsOnPermissionNamesMultiLikeAnd(self, newDependsOnPermissionNamesMultiLikeAnd):
        self.dependsOnPermissionNamesMultiLikeAnd = newDependsOnPermissionNamesMultiLikeAnd

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var KalturaPermissionItemType
        self.typeEqual = typeEqual

        # @var string
        self.typeIn = typeIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaPermissionItemType"), 
        'typeIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        kparams.addStringIfDefined("typeIn", self.typeIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaPostConvertJobData(KalturaConvartableJobData):
    def __init__(self,
            srcFileSyncLocalPath=NotImplemented,
            actualSrcFileSyncLocalPath=NotImplemented,
            srcFileSyncRemoteUrl=NotImplemented,
            srcFileSyncs=NotImplemented,
            engineVersion=NotImplemented,
            flavorParamsOutputId=NotImplemented,
            flavorParamsOutput=NotImplemented,
            mediaInfoId=NotImplemented,
            currentOperationSet=NotImplemented,
            currentOperationIndex=NotImplemented,
            pluginData=NotImplemented,
            flavorAssetId=NotImplemented,
            createThumb=NotImplemented,
            thumbPath=NotImplemented,
            thumbOffset=NotImplemented,
            thumbHeight=NotImplemented,
            thumbBitrate=NotImplemented,
            customData=NotImplemented):
        KalturaConvartableJobData.__init__(self,
            srcFileSyncLocalPath,
            actualSrcFileSyncLocalPath,
            srcFileSyncRemoteUrl,
            srcFileSyncs,
            engineVersion,
            flavorParamsOutputId,
            flavorParamsOutput,
            mediaInfoId,
            currentOperationSet,
            currentOperationIndex,
            pluginData)

        # @var string
        self.flavorAssetId = flavorAssetId

        # Indicates if a thumbnail should be created
        # @var bool
        self.createThumb = createThumb

        # The path of the created thumbnail
        # @var string
        self.thumbPath = thumbPath

        # The position of the thumbnail in the media file
        # @var int
        self.thumbOffset = thumbOffset

        # The height of the movie, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbHeight = thumbHeight

        # The bit rate of the movie, will be used to comapare if this thumbnail is the best we can have
        # @var int
        self.thumbBitrate = thumbBitrate

        # @var string
        self.customData = customData


    PROPERTY_LOADERS = {
        'flavorAssetId': getXmlNodeText, 
        'createThumb': getXmlNodeBool, 
        'thumbPath': getXmlNodeText, 
        'thumbOffset': getXmlNodeInt, 
        'thumbHeight': getXmlNodeInt, 
        'thumbBitrate': getXmlNodeInt, 
        'customData': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaConvartableJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPostConvertJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConvartableJobData.toParams(self)
        kparams.put("objectType", "KalturaPostConvertJobData")
        kparams.addStringIfDefined("flavorAssetId", self.flavorAssetId)
        kparams.addBoolIfDefined("createThumb", self.createThumb)
        kparams.addStringIfDefined("thumbPath", self.thumbPath)
        kparams.addIntIfDefined("thumbOffset", self.thumbOffset)
        kparams.addIntIfDefined("thumbHeight", self.thumbHeight)
        kparams.addIntIfDefined("thumbBitrate", self.thumbBitrate)
        kparams.addStringIfDefined("customData", self.customData)
        return kparams

    def getFlavorAssetId(self):
        return self.flavorAssetId

    def setFlavorAssetId(self, newFlavorAssetId):
        self.flavorAssetId = newFlavorAssetId

    def getCreateThumb(self):
        return self.createThumb

    def setCreateThumb(self, newCreateThumb):
        self.createThumb = newCreateThumb

    def getThumbPath(self):
        return self.thumbPath

    def setThumbPath(self, newThumbPath):
        self.thumbPath = newThumbPath

    def getThumbOffset(self):
        return self.thumbOffset

    def setThumbOffset(self, newThumbOffset):
        self.thumbOffset = newThumbOffset

    def getThumbHeight(self):
        return self.thumbHeight

    def setThumbHeight(self, newThumbHeight):
        self.thumbHeight = newThumbHeight

    def getThumbBitrate(self):
        return self.thumbBitrate

    def setThumbBitrate(self, newThumbBitrate):
        self.thumbBitrate = newThumbBitrate

    def getCustomData(self):
        return self.customData

    def setCustomData(self, newCustomData):
        self.customData = newCustomData


# @package Kaltura
# @subpackage Client
class KalturaPreviewRestriction(KalturaSessionRestriction):
    def __init__(self,
            previewLength=NotImplemented):
        KalturaSessionRestriction.__init__(self)

        # The preview restriction length
        # @var int
        self.previewLength = previewLength


    PROPERTY_LOADERS = {
        'previewLength': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaSessionRestriction.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPreviewRestriction.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSessionRestriction.toParams(self)
        kparams.put("objectType", "KalturaPreviewRestriction")
        kparams.addIntIfDefined("previewLength", self.previewLength)
        return kparams

    def getPreviewLength(self):
        return self.previewLength

    def setPreviewLength(self, newPreviewLength):
        self.previewLength = newPreviewLength


# @package Kaltura
# @subpackage Client
class KalturaRecalculateResponseProfileCacheJobData(KalturaRecalculateCacheJobData):
    def __init__(self,
            protocol=NotImplemented,
            ksType=NotImplemented,
            userRoles=NotImplemented,
            cachedObjectType=NotImplemented,
            objectId=NotImplemented,
            startObjectKey=NotImplemented,
            endObjectKey=NotImplemented):
        KalturaRecalculateCacheJobData.__init__(self)

        # http / https
        # @var string
        self.protocol = protocol

        # @var KalturaSessionType
        self.ksType = ksType

        # @var array of KalturaIntegerValue
        self.userRoles = userRoles

        # Class name
        # @var string
        self.cachedObjectType = cachedObjectType

        # @var string
        self.objectId = objectId

        # @var string
        self.startObjectKey = startObjectKey

        # @var string
        self.endObjectKey = endObjectKey


    PROPERTY_LOADERS = {
        'protocol': getXmlNodeText, 
        'ksType': (KalturaEnumsFactory.createInt, "KalturaSessionType"), 
        'userRoles': (KalturaObjectFactory.createArray, KalturaIntegerValue), 
        'cachedObjectType': getXmlNodeText, 
        'objectId': getXmlNodeText, 
        'startObjectKey': getXmlNodeText, 
        'endObjectKey': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRecalculateCacheJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRecalculateResponseProfileCacheJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRecalculateCacheJobData.toParams(self)
        kparams.put("objectType", "KalturaRecalculateResponseProfileCacheJobData")
        kparams.addStringIfDefined("protocol", self.protocol)
        kparams.addIntEnumIfDefined("ksType", self.ksType)
        kparams.addArrayIfDefined("userRoles", self.userRoles)
        kparams.addStringIfDefined("cachedObjectType", self.cachedObjectType)
        kparams.addStringIfDefined("objectId", self.objectId)
        kparams.addStringIfDefined("startObjectKey", self.startObjectKey)
        kparams.addStringIfDefined("endObjectKey", self.endObjectKey)
        return kparams

    def getProtocol(self):
        return self.protocol

    def setProtocol(self, newProtocol):
        self.protocol = newProtocol

    def getKsType(self):
        return self.ksType

    def setKsType(self, newKsType):
        self.ksType = newKsType

    def getUserRoles(self):
        return self.userRoles

    def setUserRoles(self, newUserRoles):
        self.userRoles = newUserRoles

    def getCachedObjectType(self):
        return self.cachedObjectType

    def setCachedObjectType(self, newCachedObjectType):
        self.cachedObjectType = newCachedObjectType

    def getObjectId(self):
        return self.objectId

    def setObjectId(self, newObjectId):
        self.objectId = newObjectId

    def getStartObjectKey(self):
        return self.startObjectKey

    def setStartObjectKey(self, newStartObjectKey):
        self.startObjectKey = newStartObjectKey

    def getEndObjectKey(self):
        return self.endObjectKey

    def setEndObjectKey(self, newEndObjectKey):
        self.endObjectKey = newEndObjectKey


# @package Kaltura
# @subpackage Client
class KalturaRegexCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRegexCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaRegexCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaRemoteStorageResources(KalturaContentResource):
    """Used to ingest media that is available on remote server and accessible using the supplied URL, the media file won't be downloaded but a file sync object of URL type will point to the media URL."""

    def __init__(self,
            resources=NotImplemented):
        KalturaContentResource.__init__(self)

        # Array of remote stoage resources
        # @var array of KalturaRemoteStorageResource
        self.resources = resources


    PROPERTY_LOADERS = {
        'resources': (KalturaObjectFactory.createArray, KalturaRemoteStorageResource), 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaRemoteStorageResources.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaRemoteStorageResources")
        kparams.addArrayIfDefined("resources", self.resources)
        return kparams

    def getResources(self):
        return self.resources

    def setResources(self, newResources):
        self.resources = newResources


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileFilter(KalturaResponseProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaResponseProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaResponseProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaResponseProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaResponseProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaResponseProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSearchComparableAttributeCondition(KalturaAttributeCondition):
    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented):
        KalturaAttributeCondition.__init__(self,
            value)

        # @var KalturaSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'comparison': (KalturaEnumsFactory.createString, "KalturaSearchConditionComparison"), 
    }

    def fromXml(self, node):
        KalturaAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchComparableAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaSearchComparableAttributeCondition")
        kparams.addStringEnumIfDefined("comparison", self.comparison)
        return kparams

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Kaltura
# @subpackage Client
class KalturaSearchComparableCondition(KalturaSearchCondition):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented,
            comparison=NotImplemented):
        KalturaSearchCondition.__init__(self,
            field,
            value)

        # @var KalturaSearchConditionComparison
        self.comparison = comparison


    PROPERTY_LOADERS = {
        'comparison': (KalturaEnumsFactory.createString, "KalturaSearchConditionComparison"), 
    }

    def fromXml(self, node):
        KalturaSearchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchComparableCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchCondition.toParams(self)
        kparams.put("objectType", "KalturaSearchComparableCondition")
        kparams.addStringEnumIfDefined("comparison", self.comparison)
        return kparams

    def getComparison(self):
        return self.comparison

    def setComparison(self, newComparison):
        self.comparison = newComparison


# @package Kaltura
# @subpackage Client
class KalturaSearchMatchAttributeCondition(KalturaAttributeCondition):
    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented):
        KalturaAttributeCondition.__init__(self,
            value)

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaSearchMatchAttributeCondition")
        kparams.addBoolIfDefined("not", self.not_)
        return kparams

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Kaltura
# @subpackage Client
class KalturaSearchMatchCondition(KalturaSearchCondition):
    def __init__(self,
            field=NotImplemented,
            value=NotImplemented,
            not_=NotImplemented):
        KalturaSearchCondition.__init__(self,
            field,
            value)

        # @var bool
        self.not_ = not_


    PROPERTY_LOADERS = {
        'not': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaSearchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSearchMatchCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchCondition.toParams(self)
        kparams.put("objectType", "KalturaSearchMatchCondition")
        kparams.addBoolIfDefined("not", self.not_)
        return kparams

    def getNot_(self):
        return self.not_

    def setNot_(self, newNot_):
        self.not_ = newNot_


# @package Kaltura
# @subpackage Client
class KalturaServerNodeFilter(KalturaServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented):
        KalturaServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSiteCondition(KalturaMatchCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        KalturaMatchCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMatchCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSiteCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMatchCondition.toParams(self)
        kparams.put("objectType", "KalturaSiteCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaSshImportJobData(KalturaImportJobData):
    def __init__(self,
            srcFileUrl=NotImplemented,
            destFileLocalPath=NotImplemented,
            flavorAssetId=NotImplemented,
            fileSize=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            passPhrase=NotImplemented):
        KalturaImportJobData.__init__(self,
            srcFileUrl,
            destFileLocalPath,
            flavorAssetId,
            fileSize)

        # @var string
        self.privateKey = privateKey

        # @var string
        self.publicKey = publicKey

        # @var string
        self.passPhrase = passPhrase


    PROPERTY_LOADERS = {
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'passPhrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaImportJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSshImportJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaImportJobData.toParams(self)
        kparams.put("objectType", "KalturaSshImportJobData")
        kparams.addStringIfDefined("privateKey", self.privateKey)
        kparams.addStringIfDefined("publicKey", self.publicKey)
        kparams.addStringIfDefined("passPhrase", self.passPhrase)
        return kparams

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getPassPhrase(self):
        return self.passPhrase

    def setPassPhrase(self, newPassPhrase):
        self.passPhrase = newPassPhrase


# @package Kaltura
# @subpackage Client
class KalturaStorageDeleteJobData(KalturaStorageJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented):
        KalturaStorageJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStorageJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageDeleteJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageJobData.toParams(self)
        kparams.put("objectType", "KalturaStorageDeleteJobData")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaStorageExportJobData(KalturaStorageJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented,
            force=NotImplemented,
            createLink=NotImplemented):
        KalturaStorageJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath)

        # @var bool
        self.force = force

        # @var bool
        self.createLink = createLink


    PROPERTY_LOADERS = {
        'force': getXmlNodeBool, 
        'createLink': getXmlNodeBool, 
    }

    def fromXml(self, node):
        KalturaStorageJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageJobData.toParams(self)
        kparams.put("objectType", "KalturaStorageExportJobData")
        kparams.addBoolIfDefined("force", self.force)
        kparams.addBoolIfDefined("createLink", self.createLink)
        return kparams

    def getForce(self):
        return self.force

    def setForce(self, newForce):
        self.force = newForce

    def getCreateLink(self):
        return self.createLink

    def setCreateLink(self, newCreateLink):
        self.createLink = newCreateLink


# @package Kaltura
# @subpackage Client
class KalturaStorageProfileFilter(KalturaStorageProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        KalturaStorageProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStorageProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStorageProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaStorageProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaStringResource(KalturaContentResource):
    """Used to ingest string content."""

    def __init__(self,
            content=NotImplemented):
        KalturaContentResource.__init__(self)

        # Textual content
        # @var string
        self.content = content


    PROPERTY_LOADERS = {
        'content': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaStringResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaContentResource.toParams(self)
        kparams.put("objectType", "KalturaStringResource")
        kparams.addStringIfDefined("content", self.content)
        return kparams

    def getContent(self):
        return self.content

    def setContent(self, newContent):
        self.content = newContent


# @package Kaltura
# @subpackage Client
class KalturaUiConfFilter(KalturaUiConfBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameLike=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            objTypeEqual=NotImplemented,
            objTypeIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            creationModeEqual=NotImplemented,
            creationModeIn=NotImplemented,
            versionEqual=NotImplemented,
            versionMultiLikeOr=NotImplemented,
            versionMultiLikeAnd=NotImplemented,
            partnerTagsMultiLikeOr=NotImplemented,
            partnerTagsMultiLikeAnd=NotImplemented):
        KalturaUiConfBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            nameLike,
            partnerIdEqual,
            partnerIdIn,
            objTypeEqual,
            objTypeIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            creationModeEqual,
            creationModeIn,
            versionEqual,
            versionMultiLikeOr,
            versionMultiLikeAnd,
            partnerTagsMultiLikeOr,
            partnerTagsMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUiConfBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUiConfFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUiConfBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUiConfFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUploadTokenFilter(KalturaUploadTokenBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            userIdEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            fileNameEqual=NotImplemented,
            fileSizeEqual=NotImplemented):
        KalturaUploadTokenBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            userIdEqual,
            statusEqual,
            statusIn,
            fileNameEqual,
            fileSizeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUploadTokenBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadTokenFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUploadTokenBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUploadTokenFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserEntryBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.idNotIn = idNotIn

        # @var string
        self.entryIdEqual = entryIdEqual

        # @var string
        self.entryIdIn = entryIdIn

        # @var string
        self.entryIdNotIn = entryIdNotIn

        # @var string
        self.userIdEqual = userIdEqual

        # @var string
        self.userIdIn = userIdIn

        # @var string
        self.userIdNotIn = userIdNotIn

        # @var KalturaUserEntryStatus
        self.statusEqual = statusEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var KalturaUserEntryType
        self.typeEqual = typeEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'idNotIn': getXmlNodeText, 
        'entryIdEqual': getXmlNodeText, 
        'entryIdIn': getXmlNodeText, 
        'entryIdNotIn': getXmlNodeText, 
        'userIdEqual': getXmlNodeText, 
        'userIdIn': getXmlNodeText, 
        'userIdNotIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createString, "KalturaUserEntryStatus"), 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'typeEqual': (KalturaEnumsFactory.createString, "KalturaUserEntryType"), 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaUserEntryBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("idNotIn", self.idNotIn)
        kparams.addStringIfDefined("entryIdEqual", self.entryIdEqual)
        kparams.addStringIfDefined("entryIdIn", self.entryIdIn)
        kparams.addStringIfDefined("entryIdNotIn", self.entryIdNotIn)
        kparams.addStringIfDefined("userIdEqual", self.userIdEqual)
        kparams.addStringIfDefined("userIdIn", self.userIdIn)
        kparams.addStringIfDefined("userIdNotIn", self.userIdNotIn)
        kparams.addStringEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addStringEnumIfDefined("typeEqual", self.typeEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getIdNotIn(self):
        return self.idNotIn

    def setIdNotIn(self, newIdNotIn):
        self.idNotIn = newIdNotIn

    def getEntryIdEqual(self):
        return self.entryIdEqual

    def setEntryIdEqual(self, newEntryIdEqual):
        self.entryIdEqual = newEntryIdEqual

    def getEntryIdIn(self):
        return self.entryIdIn

    def setEntryIdIn(self, newEntryIdIn):
        self.entryIdIn = newEntryIdIn

    def getEntryIdNotIn(self):
        return self.entryIdNotIn

    def setEntryIdNotIn(self, newEntryIdNotIn):
        self.entryIdNotIn = newEntryIdNotIn

    def getUserIdEqual(self):
        return self.userIdEqual

    def setUserIdEqual(self, newUserIdEqual):
        self.userIdEqual = newUserIdEqual

    def getUserIdIn(self):
        return self.userIdIn

    def setUserIdIn(self, newUserIdIn):
        self.userIdIn = newUserIdIn

    def getUserIdNotIn(self):
        return self.userIdNotIn

    def setUserIdNotIn(self, newUserIdNotIn):
        self.userIdNotIn = newUserIdNotIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getTypeEqual(self):
        return self.typeEqual

    def setTypeEqual(self, newTypeEqual):
        self.typeEqual = newTypeEqual


# @package Kaltura
# @subpackage Client
class KalturaUserLoginDataBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            loginEmailEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var string
        self.loginEmailEqual = loginEmailEqual


    PROPERTY_LOADERS = {
        'loginEmailEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserLoginDataBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaUserLoginDataBaseFilter")
        kparams.addStringIfDefined("loginEmailEqual", self.loginEmailEqual)
        return kparams

    def getLoginEmailEqual(self):
        return self.loginEmailEqual

    def setLoginEmailEqual(self, newLoginEmailEqual):
        self.loginEmailEqual = newLoginEmailEqual


# @package Kaltura
# @subpackage Client
class KalturaUserRoleBaseFilter(KalturaRelatedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaRelatedFilter.__init__(self,
            orderBy,
            advancedSearch)

        # @var int
        self.idEqual = idEqual

        # @var string
        self.idIn = idIn

        # @var string
        self.nameEqual = nameEqual

        # @var string
        self.nameIn = nameIn

        # @var string
        self.systemNameEqual = systemNameEqual

        # @var string
        self.systemNameIn = systemNameIn

        # @var string
        self.descriptionLike = descriptionLike

        # @var KalturaUserRoleStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var int
        self.partnerIdEqual = partnerIdEqual

        # @var string
        self.partnerIdIn = partnerIdIn

        # @var string
        self.tagsMultiLikeOr = tagsMultiLikeOr

        # @var string
        self.tagsMultiLikeAnd = tagsMultiLikeAnd

        # @var int
        self.createdAtGreaterThanOrEqual = createdAtGreaterThanOrEqual

        # @var int
        self.createdAtLessThanOrEqual = createdAtLessThanOrEqual

        # @var int
        self.updatedAtGreaterThanOrEqual = updatedAtGreaterThanOrEqual

        # @var int
        self.updatedAtLessThanOrEqual = updatedAtLessThanOrEqual


    PROPERTY_LOADERS = {
        'idEqual': getXmlNodeInt, 
        'idIn': getXmlNodeText, 
        'nameEqual': getXmlNodeText, 
        'nameIn': getXmlNodeText, 
        'systemNameEqual': getXmlNodeText, 
        'systemNameIn': getXmlNodeText, 
        'descriptionLike': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaUserRoleStatus"), 
        'statusIn': getXmlNodeText, 
        'partnerIdEqual': getXmlNodeInt, 
        'partnerIdIn': getXmlNodeText, 
        'tagsMultiLikeOr': getXmlNodeText, 
        'tagsMultiLikeAnd': getXmlNodeText, 
        'createdAtGreaterThanOrEqual': getXmlNodeInt, 
        'createdAtLessThanOrEqual': getXmlNodeInt, 
        'updatedAtGreaterThanOrEqual': getXmlNodeInt, 
        'updatedAtLessThanOrEqual': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaRelatedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRelatedFilter.toParams(self)
        kparams.put("objectType", "KalturaUserRoleBaseFilter")
        kparams.addIntIfDefined("idEqual", self.idEqual)
        kparams.addStringIfDefined("idIn", self.idIn)
        kparams.addStringIfDefined("nameEqual", self.nameEqual)
        kparams.addStringIfDefined("nameIn", self.nameIn)
        kparams.addStringIfDefined("systemNameEqual", self.systemNameEqual)
        kparams.addStringIfDefined("systemNameIn", self.systemNameIn)
        kparams.addStringIfDefined("descriptionLike", self.descriptionLike)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addIntIfDefined("partnerIdEqual", self.partnerIdEqual)
        kparams.addStringIfDefined("partnerIdIn", self.partnerIdIn)
        kparams.addStringIfDefined("tagsMultiLikeOr", self.tagsMultiLikeOr)
        kparams.addStringIfDefined("tagsMultiLikeAnd", self.tagsMultiLikeAnd)
        kparams.addIntIfDefined("createdAtGreaterThanOrEqual", self.createdAtGreaterThanOrEqual)
        kparams.addIntIfDefined("createdAtLessThanOrEqual", self.createdAtLessThanOrEqual)
        kparams.addIntIfDefined("updatedAtGreaterThanOrEqual", self.updatedAtGreaterThanOrEqual)
        kparams.addIntIfDefined("updatedAtLessThanOrEqual", self.updatedAtLessThanOrEqual)
        return kparams

    def getIdEqual(self):
        return self.idEqual

    def setIdEqual(self, newIdEqual):
        self.idEqual = newIdEqual

    def getIdIn(self):
        return self.idIn

    def setIdIn(self, newIdIn):
        self.idIn = newIdIn

    def getNameEqual(self):
        return self.nameEqual

    def setNameEqual(self, newNameEqual):
        self.nameEqual = newNameEqual

    def getNameIn(self):
        return self.nameIn

    def setNameIn(self, newNameIn):
        self.nameIn = newNameIn

    def getSystemNameEqual(self):
        return self.systemNameEqual

    def setSystemNameEqual(self, newSystemNameEqual):
        self.systemNameEqual = newSystemNameEqual

    def getSystemNameIn(self):
        return self.systemNameIn

    def setSystemNameIn(self, newSystemNameIn):
        self.systemNameIn = newSystemNameIn

    def getDescriptionLike(self):
        return self.descriptionLike

    def setDescriptionLike(self, newDescriptionLike):
        self.descriptionLike = newDescriptionLike

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getPartnerIdEqual(self):
        return self.partnerIdEqual

    def setPartnerIdEqual(self, newPartnerIdEqual):
        self.partnerIdEqual = newPartnerIdEqual

    def getPartnerIdIn(self):
        return self.partnerIdIn

    def setPartnerIdIn(self, newPartnerIdIn):
        self.partnerIdIn = newPartnerIdIn

    def getTagsMultiLikeOr(self):
        return self.tagsMultiLikeOr

    def setTagsMultiLikeOr(self, newTagsMultiLikeOr):
        self.tagsMultiLikeOr = newTagsMultiLikeOr

    def getTagsMultiLikeAnd(self):
        return self.tagsMultiLikeAnd

    def setTagsMultiLikeAnd(self, newTagsMultiLikeAnd):
        self.tagsMultiLikeAnd = newTagsMultiLikeAnd

    def getCreatedAtGreaterThanOrEqual(self):
        return self.createdAtGreaterThanOrEqual

    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual):
        self.createdAtGreaterThanOrEqual = newCreatedAtGreaterThanOrEqual

    def getCreatedAtLessThanOrEqual(self):
        return self.createdAtLessThanOrEqual

    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual):
        self.createdAtLessThanOrEqual = newCreatedAtLessThanOrEqual

    def getUpdatedAtGreaterThanOrEqual(self):
        return self.updatedAtGreaterThanOrEqual

    def setUpdatedAtGreaterThanOrEqual(self, newUpdatedAtGreaterThanOrEqual):
        self.updatedAtGreaterThanOrEqual = newUpdatedAtGreaterThanOrEqual

    def getUpdatedAtLessThanOrEqual(self):
        return self.updatedAtLessThanOrEqual

    def setUpdatedAtLessThanOrEqual(self, newUpdatedAtLessThanOrEqual):
        self.updatedAtLessThanOrEqual = newUpdatedAtLessThanOrEqual


# @package Kaltura
# @subpackage Client
class KalturaWidgetFilter(KalturaWidgetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            sourceWidgetIdEqual=NotImplemented,
            rootWidgetIdEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            uiConfIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerDataLike=NotImplemented):
        KalturaWidgetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            sourceWidgetIdEqual,
            rootWidgetIdEqual,
            partnerIdEqual,
            entryIdEqual,
            uiConfIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerDataLike)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaWidgetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaWidgetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaWidgetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaWidgetFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAccessControlFilter(KalturaAccessControlBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented):
        KalturaAccessControlBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAccessControlBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAccessControlBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAccessControlFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfileFilter(KalturaAccessControlProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaAccessControlProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAccessControlProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAccessControlProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAccessControlProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAccessControlProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageExportJobData(KalturaStorageExportJobData):
    def __init__(self,
            serverUrl=NotImplemented,
            serverUsername=NotImplemented,
            serverPassword=NotImplemented,
            serverPrivateKey=NotImplemented,
            serverPublicKey=NotImplemented,
            serverPassPhrase=NotImplemented,
            ftpPassiveMode=NotImplemented,
            srcFileSyncLocalPath=NotImplemented,
            srcFileSyncId=NotImplemented,
            destFileSyncStoredPath=NotImplemented,
            force=NotImplemented,
            createLink=NotImplemented,
            filesPermissionInS3=NotImplemented,
            s3Region=NotImplemented,
            sseType=NotImplemented,
            sseKmsKeyId=NotImplemented):
        KalturaStorageExportJobData.__init__(self,
            serverUrl,
            serverUsername,
            serverPassword,
            serverPrivateKey,
            serverPublicKey,
            serverPassPhrase,
            ftpPassiveMode,
            srcFileSyncLocalPath,
            srcFileSyncId,
            destFileSyncStoredPath,
            force,
            createLink)

        # @var KalturaAmazonS3StorageProfileFilesPermissionLevel
        self.filesPermissionInS3 = filesPermissionInS3

        # @var string
        self.s3Region = s3Region

        # @var string
        self.sseType = sseType

        # @var string
        self.sseKmsKeyId = sseKmsKeyId


    PROPERTY_LOADERS = {
        'filesPermissionInS3': (KalturaEnumsFactory.createString, "KalturaAmazonS3StorageProfileFilesPermissionLevel"), 
        's3Region': getXmlNodeText, 
        'sseType': getXmlNodeText, 
        'sseKmsKeyId': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaStorageExportJobData.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAmazonS3StorageExportJobData.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageExportJobData.toParams(self)
        kparams.put("objectType", "KalturaAmazonS3StorageExportJobData")
        kparams.addStringEnumIfDefined("filesPermissionInS3", self.filesPermissionInS3)
        kparams.addStringIfDefined("s3Region", self.s3Region)
        kparams.addStringIfDefined("sseType", self.sseType)
        kparams.addStringIfDefined("sseKmsKeyId", self.sseKmsKeyId)
        return kparams

    def getFilesPermissionInS3(self):
        return self.filesPermissionInS3

    def setFilesPermissionInS3(self, newFilesPermissionInS3):
        self.filesPermissionInS3 = newFilesPermissionInS3

    def getS3Region(self):
        return self.s3Region

    def setS3Region(self, newS3Region):
        self.s3Region = newS3Region

    def getSseType(self):
        return self.sseType

    def setSseType(self, newSseType):
        self.sseType = newSseType

    def getSseKmsKeyId(self):
        return self.sseKmsKeyId

    def setSseKmsKeyId(self, newSseKmsKeyId):
        self.sseKmsKeyId = newSseKmsKeyId


# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageProfileBaseFilter(KalturaStorageProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        KalturaStorageProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStorageProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAmazonS3StorageProfileBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStorageProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaAmazonS3StorageProfileBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetFilter(KalturaAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented):
        KalturaAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsFilter(KalturaAssetParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        KalturaAssetParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaBaseEntry attributes. Use KalturaBaseEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaBaseEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaBaseEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaBaseEntry attributes. Use KalturaBaseEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaBaseEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaBaseEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBaseEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaBaseEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaBatchJobFilterExt(KalturaBatchJobFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idGreaterThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            partnerIdNotIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            executionAttemptsGreaterThanOrEqual=NotImplemented,
            executionAttemptsLessThanOrEqual=NotImplemented,
            lockVersionGreaterThanOrEqual=NotImplemented,
            lockVersionLessThanOrEqual=NotImplemented,
            entryIdEqual=NotImplemented,
            jobTypeEqual=NotImplemented,
            jobTypeIn=NotImplemented,
            jobTypeNotIn=NotImplemented,
            jobSubTypeEqual=NotImplemented,
            jobSubTypeIn=NotImplemented,
            jobSubTypeNotIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            priorityGreaterThanOrEqual=NotImplemented,
            priorityLessThanOrEqual=NotImplemented,
            priorityEqual=NotImplemented,
            priorityIn=NotImplemented,
            priorityNotIn=NotImplemented,
            batchVersionGreaterThanOrEqual=NotImplemented,
            batchVersionLessThanOrEqual=NotImplemented,
            batchVersionEqual=NotImplemented,
            queueTimeGreaterThanOrEqual=NotImplemented,
            queueTimeLessThanOrEqual=NotImplemented,
            finishTimeGreaterThanOrEqual=NotImplemented,
            finishTimeLessThanOrEqual=NotImplemented,
            errTypeEqual=NotImplemented,
            errTypeIn=NotImplemented,
            errTypeNotIn=NotImplemented,
            errNumberEqual=NotImplemented,
            errNumberIn=NotImplemented,
            errNumberNotIn=NotImplemented,
            estimatedEffortLessThan=NotImplemented,
            estimatedEffortGreaterThan=NotImplemented,
            urgencyLessThanOrEqual=NotImplemented,
            urgencyGreaterThanOrEqual=NotImplemented,
            jobTypeAndSubTypeIn=NotImplemented):
        KalturaBatchJobFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idGreaterThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            partnerIdNotIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            executionAttemptsGreaterThanOrEqual,
            executionAttemptsLessThanOrEqual,
            lockVersionGreaterThanOrEqual,
            lockVersionLessThanOrEqual,
            entryIdEqual,
            jobTypeEqual,
            jobTypeIn,
            jobTypeNotIn,
            jobSubTypeEqual,
            jobSubTypeIn,
            jobSubTypeNotIn,
            statusEqual,
            statusIn,
            statusNotIn,
            priorityGreaterThanOrEqual,
            priorityLessThanOrEqual,
            priorityEqual,
            priorityIn,
            priorityNotIn,
            batchVersionGreaterThanOrEqual,
            batchVersionLessThanOrEqual,
            batchVersionEqual,
            queueTimeGreaterThanOrEqual,
            queueTimeLessThanOrEqual,
            finishTimeGreaterThanOrEqual,
            finishTimeLessThanOrEqual,
            errTypeEqual,
            errTypeIn,
            errTypeNotIn,
            errNumberEqual,
            errNumberIn,
            errNumberNotIn,
            estimatedEffortLessThan,
            estimatedEffortGreaterThan,
            urgencyLessThanOrEqual,
            urgencyGreaterThanOrEqual)

        # @var string
        self.jobTypeAndSubTypeIn = jobTypeAndSubTypeIn


    PROPERTY_LOADERS = {
        'jobTypeAndSubTypeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBatchJobFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaBatchJobFilterExt.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBatchJobFilter.toParams(self)
        kparams.put("objectType", "KalturaBatchJobFilterExt")
        kparams.addStringIfDefined("jobTypeAndSubTypeIn", self.jobTypeAndSubTypeIn)
        return kparams

    def getJobTypeAndSubTypeIn(self):
        return self.jobTypeAndSubTypeIn

    def setJobTypeAndSubTypeIn(self, newJobTypeAndSubTypeIn):
        self.jobTypeAndSubTypeIn = newJobTypeAndSubTypeIn


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryFilter(KalturaCategoryEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            categoryIdEqual=NotImplemented,
            categoryIdIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            categoryFullIdsStartsWith=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaCategoryEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            categoryIdEqual,
            categoryIdIn,
            entryIdEqual,
            entryIdIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            categoryFullIdsStartsWith,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaCategoryEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaCategoryFilter(KalturaCategoryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            depthEqual=NotImplemented,
            fullNameEqual=NotImplemented,
            fullNameStartsWith=NotImplemented,
            fullNameIn=NotImplemented,
            fullIdsEqual=NotImplemented,
            fullIdsStartsWith=NotImplemented,
            fullIdsMatchOr=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            appearInListEqual=NotImplemented,
            privacyEqual=NotImplemented,
            privacyIn=NotImplemented,
            inheritanceTypeEqual=NotImplemented,
            inheritanceTypeIn=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdEmpty=NotImplemented,
            contributionPolicyEqual=NotImplemented,
            membersCountGreaterThanOrEqual=NotImplemented,
            membersCountLessThanOrEqual=NotImplemented,
            pendingMembersCountGreaterThanOrEqual=NotImplemented,
            pendingMembersCountLessThanOrEqual=NotImplemented,
            privacyContextEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            inheritedParentIdEqual=NotImplemented,
            inheritedParentIdIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            aggregationCategoriesMultiLikeOr=NotImplemented,
            aggregationCategoriesMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            membersIn=NotImplemented,
            nameOrReferenceIdStartsWith=NotImplemented,
            managerEqual=NotImplemented,
            memberEqual=NotImplemented,
            fullNameStartsWithIn=NotImplemented,
            ancestorIdIn=NotImplemented,
            idOrInheritedParentIdIn=NotImplemented):
        KalturaCategoryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            parentIdEqual,
            parentIdIn,
            depthEqual,
            fullNameEqual,
            fullNameStartsWith,
            fullNameIn,
            fullIdsEqual,
            fullIdsStartsWith,
            fullIdsMatchOr,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            appearInListEqual,
            privacyEqual,
            privacyIn,
            inheritanceTypeEqual,
            inheritanceTypeIn,
            referenceIdEqual,
            referenceIdEmpty,
            contributionPolicyEqual,
            membersCountGreaterThanOrEqual,
            membersCountLessThanOrEqual,
            pendingMembersCountGreaterThanOrEqual,
            pendingMembersCountLessThanOrEqual,
            privacyContextEqual,
            statusEqual,
            statusIn,
            inheritedParentIdEqual,
            inheritedParentIdIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            aggregationCategoriesMultiLikeOr,
            aggregationCategoriesMultiLikeAnd)

        # @var string
        self.freeText = freeText

        # @var string
        self.membersIn = membersIn

        # @var string
        self.nameOrReferenceIdStartsWith = nameOrReferenceIdStartsWith

        # @var string
        self.managerEqual = managerEqual

        # @var string
        self.memberEqual = memberEqual

        # @var string
        self.fullNameStartsWithIn = fullNameStartsWithIn

        # not includes the category itself (only sub categories)
        # @var string
        self.ancestorIdIn = ancestorIdIn

        # @var string
        self.idOrInheritedParentIdIn = idOrInheritedParentIdIn


    PROPERTY_LOADERS = {
        'freeText': getXmlNodeText, 
        'membersIn': getXmlNodeText, 
        'nameOrReferenceIdStartsWith': getXmlNodeText, 
        'managerEqual': getXmlNodeText, 
        'memberEqual': getXmlNodeText, 
        'fullNameStartsWithIn': getXmlNodeText, 
        'ancestorIdIn': getXmlNodeText, 
        'idOrInheritedParentIdIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaCategoryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCategoryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaCategoryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaCategoryFilter")
        kparams.addStringIfDefined("freeText", self.freeText)
        kparams.addStringIfDefined("membersIn", self.membersIn)
        kparams.addStringIfDefined("nameOrReferenceIdStartsWith", self.nameOrReferenceIdStartsWith)
        kparams.addStringIfDefined("managerEqual", self.managerEqual)
        kparams.addStringIfDefined("memberEqual", self.memberEqual)
        kparams.addStringIfDefined("fullNameStartsWithIn", self.fullNameStartsWithIn)
        kparams.addStringIfDefined("ancestorIdIn", self.ancestorIdIn)
        kparams.addStringIfDefined("idOrInheritedParentIdIn", self.idOrInheritedParentIdIn)
        return kparams

    def getFreeText(self):
        return self.freeText

    def setFreeText(self, newFreeText):
        self.freeText = newFreeText

    def getMembersIn(self):
        return self.membersIn

    def setMembersIn(self, newMembersIn):
        self.membersIn = newMembersIn

    def getNameOrReferenceIdStartsWith(self):
        return self.nameOrReferenceIdStartsWith

    def setNameOrReferenceIdStartsWith(self, newNameOrReferenceIdStartsWith):
        self.nameOrReferenceIdStartsWith = newNameOrReferenceIdStartsWith

    def getManagerEqual(self):
        return self.managerEqual

    def setManagerEqual(self, newManagerEqual):
        self.managerEqual = newManagerEqual

    def getMemberEqual(self):
        return self.memberEqual

    def setMemberEqual(self, newMemberEqual):
        self.memberEqual = newMemberEqual

    def getFullNameStartsWithIn(self):
        return self.fullNameStartsWithIn

    def setFullNameStartsWithIn(self, newFullNameStartsWithIn):
        self.fullNameStartsWithIn = newFullNameStartsWithIn

    def getAncestorIdIn(self):
        return self.ancestorIdIn

    def setAncestorIdIn(self, newAncestorIdIn):
        self.ancestorIdIn = newAncestorIdIn

    def getIdOrInheritedParentIdIn(self):
        return self.idOrInheritedParentIdIn

    def setIdOrInheritedParentIdIn(self, newIdOrInheritedParentIdIn):
        self.idOrInheritedParentIdIn = newIdOrInheritedParentIdIn


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileFilter(KalturaConversionProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            defaultEntryIdEqual=NotImplemented,
            defaultEntryIdIn=NotImplemented):
        KalturaConversionProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            nameEqual,
            systemNameEqual,
            systemNameIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            defaultEntryIdEqual,
            defaultEntryIdIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaConversionProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConversionProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParamsFilter(KalturaConversionProfileAssetParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            conversionProfileIdEqual=NotImplemented,
            conversionProfileIdIn=NotImplemented,
            assetParamsIdEqual=NotImplemented,
            assetParamsIdIn=NotImplemented,
            readyBehaviorEqual=NotImplemented,
            readyBehaviorIn=NotImplemented,
            originEqual=NotImplemented,
            originIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            conversionProfileIdFilter=NotImplemented,
            assetParamsIdFilter=NotImplemented):
        KalturaConversionProfileAssetParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            conversionProfileIdEqual,
            conversionProfileIdIn,
            assetParamsIdEqual,
            assetParamsIdIn,
            readyBehaviorEqual,
            readyBehaviorIn,
            originEqual,
            originIn,
            systemNameEqual,
            systemNameIn)

        # @var KalturaConversionProfileFilter
        self.conversionProfileIdFilter = conversionProfileIdFilter

        # @var KalturaAssetParamsFilter
        self.assetParamsIdFilter = assetParamsIdFilter


    PROPERTY_LOADERS = {
        'conversionProfileIdFilter': (KalturaObjectFactory.create, KalturaConversionProfileFilter), 
        'assetParamsIdFilter': (KalturaObjectFactory.create, KalturaAssetParamsFilter), 
    }

    def fromXml(self, node):
        KalturaConversionProfileAssetParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaConversionProfileAssetParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaConversionProfileAssetParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaConversionProfileAssetParamsFilter")
        kparams.addObjectIfDefined("conversionProfileIdFilter", self.conversionProfileIdFilter)
        kparams.addObjectIfDefined("assetParamsIdFilter", self.assetParamsIdFilter)
        return kparams

    def getConversionProfileIdFilter(self):
        return self.conversionProfileIdFilter

    def setConversionProfileIdFilter(self, newConversionProfileIdFilter):
        self.conversionProfileIdFilter = newConversionProfileIdFilter

    def getAssetParamsIdFilter(self):
        return self.assetParamsIdFilter

    def setAssetParamsIdFilter(self, newAssetParamsIdFilter):
        self.assetParamsIdFilter = newAssetParamsIdFilter


# @package Kaltura
# @subpackage Client
class KalturaCoordinatesContextField(KalturaStringField):
    """Represents the current request country context as calculated based on the IP address"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            geoCoderType=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)

        # The ip geo coder engine to be used
        # @var KalturaGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (KalturaEnumsFactory.createString, "KalturaGeoCoderType"), 
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCoordinatesContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaCoordinatesContextField")
        kparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return kparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Kaltura
# @subpackage Client
class KalturaCountryContextField(KalturaStringField):
    """Represents the current request country context as calculated based on the IP address"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            geoCoderType=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)

        # The ip geo coder engine to be used
        # @var KalturaGeoCoderType
        self.geoCoderType = geoCoderType


    PROPERTY_LOADERS = {
        'geoCoderType': (KalturaEnumsFactory.createString, "KalturaGeoCoderType"), 
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaCountryContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaCountryContextField")
        kparams.addStringEnumIfDefined("geoCoderType", self.geoCoderType)
        return kparams

    def getGeoCoderType(self):
        return self.geoCoderType

    def setGeoCoderType(self, newGeoCoderType):
        self.geoCoderType = newGeoCoderType


# @package Kaltura
# @subpackage Client
class KalturaDataEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaDataEntry attributes. Use KalturaDataEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaDataEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaDataEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaDataEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaDataEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaDataEntry attributes. Use KalturaDataEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaDataEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaDataEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaDataEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHdsBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHdsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHdsBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHttpBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHttpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericAppleHttpBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericAppleHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericAppleHttpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHdsBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHdsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHdsBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHttpBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHttpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericSilverLightBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericSilverLightBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericSilverLightBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileLiveAppleHttpBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileLiveAppleHttpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileLiveAppleHttpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileRtmpBaseFilter(KalturaDeliveryProfileFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileRtmpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileRtmpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryServerNodeBaseFilter(KalturaServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn)

        # @var string
        self.playbackDomainLike = playbackDomainLike

        # @var string
        self.playbackDomainMultiLikeOr = playbackDomainMultiLikeOr

        # @var string
        self.playbackDomainMultiLikeAnd = playbackDomainMultiLikeAnd


    PROPERTY_LOADERS = {
        'playbackDomainLike': getXmlNodeText, 
        'playbackDomainMultiLikeOr': getXmlNodeText, 
        'playbackDomainMultiLikeAnd': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaServerNodeFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryServerNodeBaseFilter")
        kparams.addStringIfDefined("playbackDomainLike", self.playbackDomainLike)
        kparams.addStringIfDefined("playbackDomainMultiLikeOr", self.playbackDomainMultiLikeOr)
        kparams.addStringIfDefined("playbackDomainMultiLikeAnd", self.playbackDomainMultiLikeAnd)
        return kparams

    def getPlaybackDomainLike(self):
        return self.playbackDomainLike

    def setPlaybackDomainLike(self, newPlaybackDomainLike):
        self.playbackDomainLike = newPlaybackDomainLike

    def getPlaybackDomainMultiLikeOr(self):
        return self.playbackDomainMultiLikeOr

    def setPlaybackDomainMultiLikeOr(self, newPlaybackDomainMultiLikeOr):
        self.playbackDomainMultiLikeOr = newPlaybackDomainMultiLikeOr

    def getPlaybackDomainMultiLikeAnd(self):
        return self.playbackDomainMultiLikeAnd

    def setPlaybackDomainMultiLikeAnd(self, newPlaybackDomainMultiLikeAnd):
        self.playbackDomainMultiLikeAnd = newPlaybackDomainMultiLikeAnd


# @package Kaltura
# @subpackage Client
class KalturaDocumentEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaDocumentEntry attributes. Use KalturaDocumentEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaDocumentEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaDocumentEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDocumentEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaDocumentEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaDocumentEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaDocumentEntry attributes. Use KalturaDocumentEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaDocumentEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaDocumentEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDocumentEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaDocumentEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeFilter(KalturaEntryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        KalturaEntryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEntryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntryServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaEntryServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEvalBooleanField(KalturaBooleanField):
    """Evaluates PHP statement, depends on the execution context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            code=NotImplemented):
        KalturaBooleanField.__init__(self,
            description,
            value)

        # PHP code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaBooleanField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEvalBooleanField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBooleanField.toParams(self)
        kparams.put("objectType", "KalturaEvalBooleanField")
        kparams.addStringIfDefined("code", self.code)
        return kparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Kaltura
# @subpackage Client
class KalturaEvalStringField(KalturaStringField):
    """Evaluates PHP statement, depends on the execution context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            code=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)

        # PHP code
        # @var string
        self.code = code


    PROPERTY_LOADERS = {
        'code': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEvalStringField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaEvalStringField")
        kparams.addStringIfDefined("code", self.code)
        return kparams

    def getCode(self):
        return self.code

    def setCode(self, newCode):
        self.code = newCode


# @package Kaltura
# @subpackage Client
class KalturaExternalMediaEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaExternalMediaEntry attributes. Use KalturaExternalMediaEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaExternalMediaEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaExternalMediaEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalMediaEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaExternalMediaEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaExternalMediaEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaExternalMediaEntry attributes. Use KalturaExternalMediaEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaExternalMediaEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaExternalMediaEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaExternalMediaEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaExternalMediaEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaFileAssetFilter(KalturaFileAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            fileAssetObjectTypeEqual=NotImplemented,
            objectIdEqual=NotImplemented,
            objectIdIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaFileAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            fileAssetObjectTypeEqual,
            objectIdEqual,
            objectIdIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFileAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFileAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFileAssetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaFileAssetFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaGenericSyndicationFeedBaseFilter(KalturaBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaGenericSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaGoogleVideoSyndicationFeedBaseFilter(KalturaBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGoogleVideoSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaGoogleVideoSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaGroupUserFilter(KalturaGroupUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            groupIdEqual=NotImplemented,
            groupIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaGroupUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            userIdEqual,
            userIdIn,
            groupIdEqual,
            groupIdIn,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaGroupUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGroupUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGroupUserBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaGroupUserFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeedBaseFilter(KalturaBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaITunesSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaITunesSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaIpAddressContextField(KalturaStringField):
    """Represents the current request IP address context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaIpAddressContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaIpAddressContextField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveChannel attributes. Use KalturaLiveChannelCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaLiveChannelCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveChannelCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveChannel attributes. Use KalturaLiveChannelMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaLiveChannelMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveChannelMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentFilter(KalturaLiveChannelSegmentBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            channelIdEqual=NotImplemented,
            channelIdIn=NotImplemented,
            startTimeGreaterThanOrEqual=NotImplemented,
            startTimeLessThanOrEqual=NotImplemented):
        KalturaLiveChannelSegmentBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            channelIdEqual,
            channelIdIn,
            startTimeGreaterThanOrEqual,
            startTimeLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveChannelSegmentBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelSegmentFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveChannelSegmentBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelSegmentFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveEntry attributes. Use KalturaLiveEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaLiveEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveEntry attributes. Use KalturaLiveEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaLiveEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveStreamAdminEntry attributes. Use KalturaLiveStreamAdminEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaLiveStreamAdminEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveStreamAdminEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamAdminEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamAdminEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveStreamAdminEntry attributes. Use KalturaLiveStreamAdminEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaLiveStreamAdminEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveStreamAdminEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamAdminEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamAdminEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveStreamEntry attributes. Use KalturaLiveStreamEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaLiveStreamEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveStreamEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaLiveStreamEntry attributes. Use KalturaLiveStreamEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaLiveStreamEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaLiveStreamEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaMediaEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaMediaEntry attributes. Use KalturaMediaEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaMediaEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaMediaEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaMediaEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaMediaEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaMediaEntry attributes. Use KalturaMediaEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaMediaEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaMediaEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaMediaEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsOutput(KalturaFlavorParamsOutput):
    def __init__(self,
            id=NotImplemented,
            partnerId=NotImplemented,
            name=NotImplemented,
            systemName=NotImplemented,
            description=NotImplemented,
            createdAt=NotImplemented,
            isSystemDefault=NotImplemented,
            tags=NotImplemented,
            requiredPermissions=NotImplemented,
            sourceRemoteStorageProfileId=NotImplemented,
            remoteStorageProfileIds=NotImplemented,
            mediaParserType=NotImplemented,
            sourceAssetParamsIds=NotImplemented,
            videoCodec=NotImplemented,
            videoBitrate=NotImplemented,
            audioCodec=NotImplemented,
            audioBitrate=NotImplemented,
            audioChannels=NotImplemented,
            audioSampleRate=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            frameRate=NotImplemented,
            gopSize=NotImplemented,
            conversionEngines=NotImplemented,
            conversionEnginesExtraParams=NotImplemented,
            twoPass=NotImplemented,
            deinterlice=NotImplemented,
            rotate=NotImplemented,
            operators=NotImplemented,
            engineVersion=NotImplemented,
            format=NotImplemented,
            aspectRatioProcessingMode=NotImplemented,
            forceFrameToMultiplication16=NotImplemented,
            isGopInSec=NotImplemented,
            isAvoidVideoShrinkFramesizeToSource=NotImplemented,
            isAvoidVideoShrinkBitrateToSource=NotImplemented,
            isVideoFrameRateForLowBrAppleHls=NotImplemented,
            multiStream=NotImplemented,
            anamorphicPixels=NotImplemented,
            isAvoidForcedKeyFrames=NotImplemented,
            isCropIMX=NotImplemented,
            optimizationPolicy=NotImplemented,
            maxFrameRate=NotImplemented,
            videoConstantBitrate=NotImplemented,
            videoBitrateTolerance=NotImplemented,
            watermarkData=NotImplemented,
            subtitlesData=NotImplemented,
            isEncrypted=NotImplemented,
            contentAwareness=NotImplemented,
            clipOffset=NotImplemented,
            clipDuration=NotImplemented,
            flavorParamsId=NotImplemented,
            commandLinesStr=NotImplemented,
            flavorParamsVersion=NotImplemented,
            flavorAssetId=NotImplemented,
            flavorAssetVersion=NotImplemented,
            readyBehavior=NotImplemented):
        KalturaFlavorParamsOutput.__init__(self,
            id,
            partnerId,
            name,
            systemName,
            description,
            createdAt,
            isSystemDefault,
            tags,
            requiredPermissions,
            sourceRemoteStorageProfileId,
            remoteStorageProfileIds,
            mediaParserType,
            sourceAssetParamsIds,
            videoCodec,
            videoBitrate,
            audioCodec,
            audioBitrate,
            audioChannels,
            audioSampleRate,
            width,
            height,
            frameRate,
            gopSize,
            conversionEngines,
            conversionEnginesExtraParams,
            twoPass,
            deinterlice,
            rotate,
            operators,
            engineVersion,
            format,
            aspectRatioProcessingMode,
            forceFrameToMultiplication16,
            isGopInSec,
            isAvoidVideoShrinkFramesizeToSource,
            isAvoidVideoShrinkBitrateToSource,
            isVideoFrameRateForLowBrAppleHls,
            multiStream,
            anamorphicPixels,
            isAvoidForcedKeyFrames,
            isCropIMX,
            optimizationPolicy,
            maxFrameRate,
            videoConstantBitrate,
            videoBitrateTolerance,
            watermarkData,
            subtitlesData,
            isEncrypted,
            contentAwareness,
            clipOffset,
            clipDuration,
            flavorParamsId,
            commandLinesStr,
            flavorParamsVersion,
            flavorAssetId,
            flavorAssetVersion,
            readyBehavior)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsOutput.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParamsOutput.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsOutput.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParamsOutput")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMixEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaMixEntry attributes. Use KalturaMixEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaMixEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaMixEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaMixEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaMixEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaMixEntry attributes. Use KalturaMixEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaMixEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaMixEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaMixEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaObjectIdField(KalturaStringField):
    """Evaluates object ID according to given context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaObjectIdField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaObjectIdField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPermissionFilter(KalturaPermissionBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            friendlyNameLike=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            dependsOnPermissionNamesMultiLikeOr=NotImplemented,
            dependsOnPermissionNamesMultiLikeAnd=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaPermissionBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            nameEqual,
            nameIn,
            friendlyNameLike,
            descriptionLike,
            statusEqual,
            statusIn,
            partnerIdEqual,
            partnerIdIn,
            dependsOnPermissionNamesMultiLikeOr,
            dependsOnPermissionNamesMultiLikeAnd,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPermissionBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemFilter(KalturaPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaPermissionItemFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaPlayableEntry attributes. Use KalturaPlayableEntryCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaPlayableEntryCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaPlayableEntryCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayableEntryCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaPlayableEntryCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaPlayableEntryMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaPlayableEntry attributes. Use KalturaPlayableEntryMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaPlayableEntryMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaPlayableEntryMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlayableEntryMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaPlayableEntryMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaPlaylistCompareAttributeCondition(KalturaSearchComparableAttributeCondition):
    """Auto-generated class.
     Used to search KalturaPlaylist attributes. Use KalturaPlaylistCompareAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            comparison=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchComparableAttributeCondition.__init__(self,
            value,
            comparison)

        # @var KalturaPlaylistCompareAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaPlaylistCompareAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchComparableAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylistCompareAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchComparableAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaPlaylistCompareAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaPlaylistMatchAttributeCondition(KalturaSearchMatchAttributeCondition):
    """Auto-generated class.
     Used to search KalturaPlaylist attributes. Use KalturaPlaylistMatchAttribute enum to provide attribute name.
    /"""

    def __init__(self,
            value=NotImplemented,
            not_=NotImplemented,
            attribute=NotImplemented):
        KalturaSearchMatchAttributeCondition.__init__(self,
            value,
            not_)

        # @var KalturaPlaylistMatchAttribute
        self.attribute = attribute


    PROPERTY_LOADERS = {
        'attribute': (KalturaEnumsFactory.createString, "KalturaPlaylistMatchAttribute"), 
    }

    def fromXml(self, node):
        KalturaSearchMatchAttributeCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylistMatchAttributeCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaSearchMatchAttributeCondition.toParams(self)
        kparams.put("objectType", "KalturaPlaylistMatchAttributeCondition")
        kparams.addStringEnumIfDefined("attribute", self.attribute)
        return kparams

    def getAttribute(self):
        return self.attribute

    def setAttribute(self, newAttribute):
        self.attribute = newAttribute


# @package Kaltura
# @subpackage Client
class KalturaServerFileResource(KalturaDataCenterContentResource):
    """Used to ingest media file that is already accessible on the shared disc."""

    def __init__(self,
            localFilePath=NotImplemented):
        KalturaDataCenterContentResource.__init__(self)

        # Full path to the local file
        # @var string
        self.localFilePath = localFilePath


    PROPERTY_LOADERS = {
        'localFilePath': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaServerFileResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDataCenterContentResource.toParams(self)
        kparams.put("objectType", "KalturaServerFileResource")
        kparams.addStringIfDefined("localFilePath", self.localFilePath)
        return kparams

    def getLocalFilePath(self):
        return self.localFilePath

    def setLocalFilePath(self, newLocalFilePath):
        self.localFilePath = newLocalFilePath


# @package Kaltura
# @subpackage Client
class KalturaSshUrlResource(KalturaUrlResource):
    """Used to ingest media that is available on remote SSH server and accessible using the supplied URL, media file will be downloaded using import job in order to make the asset ready."""

    def __init__(self,
            url=NotImplemented,
            forceAsyncDownload=NotImplemented,
            privateKey=NotImplemented,
            publicKey=NotImplemented,
            keyPassphrase=NotImplemented):
        KalturaUrlResource.__init__(self,
            url,
            forceAsyncDownload)

        # SSH private key
        # @var string
        self.privateKey = privateKey

        # SSH public key
        # @var string
        self.publicKey = publicKey

        # Passphrase for SSH keys
        # @var string
        self.keyPassphrase = keyPassphrase


    PROPERTY_LOADERS = {
        'privateKey': getXmlNodeText, 
        'publicKey': getXmlNodeText, 
        'keyPassphrase': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaUrlResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaSshUrlResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUrlResource.toParams(self)
        kparams.put("objectType", "KalturaSshUrlResource")
        kparams.addStringIfDefined("privateKey", self.privateKey)
        kparams.addStringIfDefined("publicKey", self.publicKey)
        kparams.addStringIfDefined("keyPassphrase", self.keyPassphrase)
        return kparams

    def getPrivateKey(self):
        return self.privateKey

    def setPrivateKey(self, newPrivateKey):
        self.privateKey = newPrivateKey

    def getPublicKey(self):
        return self.publicKey

    def setPublicKey(self, newPublicKey):
        self.publicKey = newPublicKey

    def getKeyPassphrase(self):
        return self.keyPassphrase

    def setKeyPassphrase(self, newKeyPassphrase):
        self.keyPassphrase = newKeyPassphrase


# @package Kaltura
# @subpackage Client
class KalturaTimeContextField(KalturaIntegerField):
    """Represents the current time context on Kaltura servers"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented,
            offset=NotImplemented):
        KalturaIntegerField.__init__(self,
            description,
            value)

        # Time offset in seconds since current time
        # @var int
        self.offset = offset


    PROPERTY_LOADERS = {
        'offset': getXmlNodeInt, 
    }

    def fromXml(self, node):
        KalturaIntegerField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTimeContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaIntegerField.toParams(self)
        kparams.put("objectType", "KalturaTimeContextField")
        kparams.addIntIfDefined("offset", self.offset)
        return kparams

    def getOffset(self):
        return self.offset

    def setOffset(self, newOffset):
        self.offset = newOffset


# @package Kaltura
# @subpackage Client
class KalturaTubeMogulSyndicationFeedBaseFilter(KalturaBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTubeMogulSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaTubeMogulSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUploadedFileTokenResource(KalturaDataCenterContentResource):
    """Used to ingest media that uploaded to the system and represented by token that returned from upload.upload action or uploadToken.add action."""

    def __init__(self,
            token=NotImplemented):
        KalturaDataCenterContentResource.__init__(self)

        # Token that returned from upload.upload action or uploadToken.add action.
        # @var string
        self.token = token


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUploadedFileTokenResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDataCenterContentResource.toParams(self)
        kparams.put("objectType", "KalturaUploadedFileTokenResource")
        kparams.addStringIfDefined("token", self.token)
        return kparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken


# @package Kaltura
# @subpackage Client
class KalturaUserAgentCondition(KalturaRegexCondition):
    def __init__(self,
            type=NotImplemented,
            description=NotImplemented,
            not_=NotImplemented,
            values=NotImplemented):
        KalturaRegexCondition.__init__(self,
            type,
            description,
            not_,
            values)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaRegexCondition.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAgentCondition.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaRegexCondition.toParams(self)
        kparams.put("objectType", "KalturaUserAgentCondition")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserAgentContextField(KalturaStringField):
    """Represents the current request user agent context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserAgentContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaUserAgentContextField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserEmailContextField(KalturaStringField):
    """Represents the current session user e-mail address context"""

    def __init__(self,
            description=NotImplemented,
            value=NotImplemented):
        KalturaStringField.__init__(self,
            description,
            value)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaStringField.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserEmailContextField.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaStringField.toParams(self)
        kparams.put("objectType", "KalturaUserEmailContextField")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserEntryFilter(KalturaUserEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        KalturaUserEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual)

        # @var KalturaNullableBoolean
        self.userIdEqualCurrent = userIdEqualCurrent

        # @var KalturaNullableBoolean
        self.isAnonymous = isAnonymous


    PROPERTY_LOADERS = {
        'userIdEqualCurrent': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'isAnonymous': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
    }

    def fromXml(self, node):
        KalturaUserEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUserEntryFilter")
        kparams.addIntEnumIfDefined("userIdEqualCurrent", self.userIdEqualCurrent)
        kparams.addIntEnumIfDefined("isAnonymous", self.isAnonymous)
        return kparams

    def getUserIdEqualCurrent(self):
        return self.userIdEqualCurrent

    def setUserIdEqualCurrent(self, newUserIdEqualCurrent):
        self.userIdEqualCurrent = newUserIdEqualCurrent

    def getIsAnonymous(self):
        return self.isAnonymous

    def setIsAnonymous(self, newIsAnonymous):
        self.isAnonymous = newIsAnonymous


# @package Kaltura
# @subpackage Client
class KalturaUserLoginDataFilter(KalturaUserLoginDataBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            loginEmailEqual=NotImplemented):
        KalturaUserLoginDataBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            loginEmailEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUserLoginDataBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserLoginDataFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserLoginDataBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUserLoginDataFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaUserRoleFilter(KalturaUserRoleBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            descriptionLike=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaUserRoleBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            descriptionLike,
            statusEqual,
            statusIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUserRoleBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaUserRoleFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserRoleBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaUserRoleFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaWebcamTokenResource(KalturaDataCenterContentResource):
    """Used to ingest media that streamed to the system and represented by token that returned from media server such as FMS or red5."""

    def __init__(self,
            token=NotImplemented):
        KalturaDataCenterContentResource.__init__(self)

        # Token that returned from media server such as FMS or red5.
        # @var string
        self.token = token


    PROPERTY_LOADERS = {
        'token': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaDataCenterContentResource.fromXml(self, node)
        self.fromXmlImpl(node, KalturaWebcamTokenResource.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDataCenterContentResource.toParams(self)
        kparams.put("objectType", "KalturaWebcamTokenResource")
        kparams.addStringIfDefined("token", self.token)
        return kparams

    def getToken(self):
        return self.token

    def setToken(self, newToken):
        self.token = newToken


# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeedBaseFilter(KalturaBaseSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaBaseSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaYahooSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaYahooSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAdminUserBaseFilter(KalturaUserFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        KalturaUserFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual,
            idOrScreenNameStartsWith,
            idEqual,
            idIn,
            loginEnabledEqual,
            roleIdEqual,
            roleIdsEqual,
            roleIdsIn,
            firstNameOrLastNameStartsWith,
            permissionNamesMultiLikeOr,
            permissionNamesMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUserFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAdminUserBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserFilter.toParams(self)
        kparams.put("objectType", "KalturaAdminUserBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAmazonS3StorageProfileFilter(KalturaAmazonS3StorageProfileBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            protocolEqual=NotImplemented,
            protocolIn=NotImplemented):
        KalturaAmazonS3StorageProfileBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            statusEqual,
            statusIn,
            protocolEqual,
            protocolIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAmazonS3StorageProfileBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAmazonS3StorageProfileFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAmazonS3StorageProfileBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAmazonS3StorageProfileFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApiActionPermissionItemBaseFilter(KalturaPermissionItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaPermissionItemFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiActionPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemFilter.toParams(self)
        kparams.put("objectType", "KalturaApiActionPermissionItemBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItemBaseFilter(KalturaPermissionItemFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaPermissionItemFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPermissionItemFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiParameterPermissionItemBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPermissionItemFilter.toParams(self)
        kparams.put("objectType", "KalturaApiParameterPermissionItemBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOutputBaseFilter(KalturaAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        KalturaAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsOutputBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDataEntryBaseFilter(KalturaBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        KalturaBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaDataEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiAppleHttpManifestFilter(KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiAppleHttpManifestFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiAppleHttpManifestFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHdsFilter(KalturaDeliveryProfileAkamaiHdsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileAkamaiHdsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileAkamaiHdsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileAkamaiHdsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHdsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileAkamaiHttpFilter(KalturaDeliveryProfileAkamaiHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileAkamaiHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileAkamaiHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileAkamaiHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileAkamaiHttpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileAkamaiHttpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericAppleHttpFilter(KalturaDeliveryProfileGenericAppleHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileGenericAppleHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileGenericAppleHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericAppleHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileGenericAppleHttpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericAppleHttpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHdsFilter(KalturaDeliveryProfileGenericHdsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileGenericHdsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileGenericHdsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHdsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileGenericHdsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHdsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericHttpFilter(KalturaDeliveryProfileGenericHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileGenericHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileGenericHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileGenericHttpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericHttpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericSilverLightFilter(KalturaDeliveryProfileGenericSilverLightBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileGenericSilverLightBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileGenericSilverLightBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericSilverLightFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileGenericSilverLightBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericSilverLightFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileLiveAppleHttpFilter(KalturaDeliveryProfileLiveAppleHttpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileLiveAppleHttpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileLiveAppleHttpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileLiveAppleHttpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileLiveAppleHttpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileLiveAppleHttpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileRtmpFilter(KalturaDeliveryProfileRtmpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileRtmpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileRtmpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileRtmpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileRtmpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileRtmpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryServerNodeFilter(KalturaDeliveryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaDeliveryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetBaseFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)

        # @var int
        self.flavorParamsIdEqual = flavorParamsIdEqual

        # @var string
        self.flavorParamsIdIn = flavorParamsIdIn

        # @var KalturaFlavorAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn


    PROPERTY_LOADERS = {
        'flavorParamsIdEqual': getXmlNodeInt, 
        'flavorParamsIdIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaFlavorAssetStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorAssetBaseFilter")
        kparams.addIntIfDefined("flavorParamsIdEqual", self.flavorParamsIdEqual)
        kparams.addStringIfDefined("flavorParamsIdIn", self.flavorParamsIdIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        return kparams

    def getFlavorParamsIdEqual(self):
        return self.flavorParamsIdEqual

    def setFlavorParamsIdEqual(self, newFlavorParamsIdEqual):
        self.flavorParamsIdEqual = newFlavorParamsIdEqual

    def getFlavorParamsIdIn(self):
        return self.flavorParamsIdIn

    def setFlavorParamsIdIn(self, newFlavorParamsIdIn):
        self.flavorParamsIdIn = newFlavorParamsIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsBaseFilter(KalturaAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)

        # @var KalturaContainerFormat
        self.formatEqual = formatEqual


    PROPERTY_LOADERS = {
        'formatEqual': (KalturaEnumsFactory.createString, "KalturaContainerFormat"), 
    }

    def fromXml(self, node):
        KalturaAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsBaseFilter")
        kparams.addStringEnumIfDefined("formatEqual", self.formatEqual)
        return kparams

    def getFormatEqual(self):
        return self.formatEqual

    def setFormatEqual(self, newFormatEqual):
        self.formatEqual = newFormatEqual


# @package Kaltura
# @subpackage Client
class KalturaGenericSyndicationFeedFilter(KalturaGenericSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaGenericSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaGenericSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGenericSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaGenericSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaGoogleVideoSyndicationFeedFilter(KalturaGoogleVideoSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaGoogleVideoSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaGoogleVideoSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGoogleVideoSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGoogleVideoSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaGoogleVideoSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaITunesSyndicationFeedFilter(KalturaITunesSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaITunesSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaITunesSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaITunesSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaITunesSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaITunesSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryServerNodeBaseFilter(KalturaEntryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        KalturaEntryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEntryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEntryServerNodeFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryServerNodeBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPlaylistBaseFilter(KalturaBaseEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        KalturaBaseEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaBaseEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylistBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaBaseEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaPlaylistBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaQuizUserEntryBaseFilter(KalturaUserEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        KalturaUserEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual,
            userIdEqualCurrent,
            isAnonymous)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaUserEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaQuizUserEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaUserEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaQuizUserEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaThumbAssetBaseFilter(KalturaAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        KalturaAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual)

        # @var int
        self.thumbParamsIdEqual = thumbParamsIdEqual

        # @var string
        self.thumbParamsIdIn = thumbParamsIdIn

        # @var KalturaThumbAssetStatus
        self.statusEqual = statusEqual

        # @var string
        self.statusIn = statusIn

        # @var string
        self.statusNotIn = statusNotIn


    PROPERTY_LOADERS = {
        'thumbParamsIdEqual': getXmlNodeInt, 
        'thumbParamsIdIn': getXmlNodeText, 
        'statusEqual': (KalturaEnumsFactory.createInt, "KalturaThumbAssetStatus"), 
        'statusIn': getXmlNodeText, 
        'statusNotIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbAssetBaseFilter")
        kparams.addIntIfDefined("thumbParamsIdEqual", self.thumbParamsIdEqual)
        kparams.addStringIfDefined("thumbParamsIdIn", self.thumbParamsIdIn)
        kparams.addIntEnumIfDefined("statusEqual", self.statusEqual)
        kparams.addStringIfDefined("statusIn", self.statusIn)
        kparams.addStringIfDefined("statusNotIn", self.statusNotIn)
        return kparams

    def getThumbParamsIdEqual(self):
        return self.thumbParamsIdEqual

    def setThumbParamsIdEqual(self, newThumbParamsIdEqual):
        self.thumbParamsIdEqual = newThumbParamsIdEqual

    def getThumbParamsIdIn(self):
        return self.thumbParamsIdIn

    def setThumbParamsIdIn(self, newThumbParamsIdIn):
        self.thumbParamsIdIn = newThumbParamsIdIn

    def getStatusEqual(self):
        return self.statusEqual

    def setStatusEqual(self, newStatusEqual):
        self.statusEqual = newStatusEqual

    def getStatusIn(self):
        return self.statusIn

    def setStatusIn(self, newStatusIn):
        self.statusIn = newStatusIn

    def getStatusNotIn(self):
        return self.statusNotIn

    def setStatusNotIn(self, newStatusNotIn):
        self.statusNotIn = newStatusNotIn


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsBaseFilter(KalturaAssetParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaAssetParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)

        # @var KalturaContainerFormat
        self.formatEqual = formatEqual


    PROPERTY_LOADERS = {
        'formatEqual': (KalturaEnumsFactory.createString, "KalturaContainerFormat"), 
    }

    def fromXml(self, node):
        KalturaAssetParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsBaseFilter")
        kparams.addStringEnumIfDefined("formatEqual", self.formatEqual)
        return kparams

    def getFormatEqual(self):
        return self.formatEqual

    def setFormatEqual(self, newFormatEqual):
        self.formatEqual = newFormatEqual


# @package Kaltura
# @subpackage Client
class KalturaTubeMogulSyndicationFeedFilter(KalturaTubeMogulSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaTubeMogulSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaTubeMogulSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaTubeMogulSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaTubeMogulSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaTubeMogulSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaYahooSyndicationFeedFilter(KalturaYahooSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaYahooSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaYahooSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaYahooSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaYahooSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaYahooSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAdminUserFilter(KalturaAdminUserBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            partnerIdEqual=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            screenNameLike=NotImplemented,
            screenNameStartsWith=NotImplemented,
            emailLike=NotImplemented,
            emailStartsWith=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            firstNameStartsWith=NotImplemented,
            lastNameStartsWith=NotImplemented,
            isAdminEqual=NotImplemented,
            idOrScreenNameStartsWith=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            loginEnabledEqual=NotImplemented,
            roleIdEqual=NotImplemented,
            roleIdsEqual=NotImplemented,
            roleIdsIn=NotImplemented,
            firstNameOrLastNameStartsWith=NotImplemented,
            permissionNamesMultiLikeOr=NotImplemented,
            permissionNamesMultiLikeAnd=NotImplemented):
        KalturaAdminUserBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            partnerIdEqual,
            typeEqual,
            typeIn,
            screenNameLike,
            screenNameStartsWith,
            emailLike,
            emailStartsWith,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            statusEqual,
            statusIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            firstNameStartsWith,
            lastNameStartsWith,
            isAdminEqual,
            idOrScreenNameStartsWith,
            idEqual,
            idIn,
            loginEnabledEqual,
            roleIdEqual,
            roleIdsEqual,
            roleIdsIn,
            firstNameOrLastNameStartsWith,
            permissionNamesMultiLikeOr,
            permissionNamesMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAdminUserBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAdminUserFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAdminUserBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAdminUserFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApiActionPermissionItemFilter(KalturaApiActionPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaApiActionPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaApiActionPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiActionPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaApiActionPermissionItemBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaApiActionPermissionItemFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaApiParameterPermissionItemFilter(KalturaApiParameterPermissionItemBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented):
        KalturaApiParameterPermissionItemBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            typeEqual,
            typeIn,
            partnerIdEqual,
            partnerIdIn,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaApiParameterPermissionItemBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaApiParameterPermissionItemFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaApiParameterPermissionItemBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaApiParameterPermissionItemFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaAssetParamsOutputFilter(KalturaAssetParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented):
        KalturaAssetParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaAssetParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaAssetParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaAssetParamsOutputBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaAssetParamsOutputFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDataEntryFilter(KalturaDataEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        KalturaDataEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDataEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDataEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDataEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDataEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericRtmpBaseFilter(KalturaDeliveryProfileRtmpFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileRtmpFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileRtmpFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericRtmpBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileRtmpFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericRtmpBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEdgeServerNodeBaseFilter(KalturaDeliveryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaDeliveryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEdgeServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryServerNodeFilter.toParams(self)
        kparams.put("objectType", "KalturaEdgeServerNodeBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetFilter(KalturaFlavorAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        KalturaFlavorAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorAssetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorAssetFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsFilter(KalturaFlavorParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaFlavorParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaGenericXsltSyndicationFeedBaseFilter(KalturaGenericSyndicationFeedFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaGenericSyndicationFeedFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaGenericSyndicationFeedFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericXsltSyndicationFeedBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGenericSyndicationFeedFilter.toParams(self)
        kparams.put("objectType", "KalturaGenericXsltSyndicationFeedBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryServerNodeFilter(KalturaLiveEntryServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            serverNodeIdEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            serverTypeEqual=NotImplemented):
        KalturaLiveEntryServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            entryIdEqual,
            entryIdIn,
            serverNodeIdEqual,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            statusEqual,
            statusIn,
            serverTypeEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveEntryServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntryServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntry(KalturaLiveStreamEntry):
    def __init__(self,
            id=NotImplemented,
            name=NotImplemented,
            description=NotImplemented,
            partnerId=NotImplemented,
            userId=NotImplemented,
            creatorId=NotImplemented,
            tags=NotImplemented,
            adminTags=NotImplemented,
            categories=NotImplemented,
            categoriesIds=NotImplemented,
            status=NotImplemented,
            moderationStatus=NotImplemented,
            moderationCount=NotImplemented,
            type=NotImplemented,
            createdAt=NotImplemented,
            updatedAt=NotImplemented,
            rank=NotImplemented,
            totalRank=NotImplemented,
            votes=NotImplemented,
            groupId=NotImplemented,
            partnerData=NotImplemented,
            downloadUrl=NotImplemented,
            searchText=NotImplemented,
            licenseType=NotImplemented,
            version=NotImplemented,
            thumbnailUrl=NotImplemented,
            accessControlId=NotImplemented,
            startDate=NotImplemented,
            endDate=NotImplemented,
            referenceId=NotImplemented,
            replacingEntryId=NotImplemented,
            replacedEntryId=NotImplemented,
            replacementStatus=NotImplemented,
            partnerSortValue=NotImplemented,
            conversionProfileId=NotImplemented,
            redirectEntryId=NotImplemented,
            rootEntryId=NotImplemented,
            parentEntryId=NotImplemented,
            operationAttributes=NotImplemented,
            entitledUsersEdit=NotImplemented,
            entitledUsersPublish=NotImplemented,
            capabilities=NotImplemented,
            templateEntryId=NotImplemented,
            plays=NotImplemented,
            views=NotImplemented,
            lastPlayedAt=NotImplemented,
            width=NotImplemented,
            height=NotImplemented,
            duration=NotImplemented,
            msDuration=NotImplemented,
            durationType=NotImplemented,
            mediaType=NotImplemented,
            conversionQuality=NotImplemented,
            sourceType=NotImplemented,
            searchProviderType=NotImplemented,
            searchProviderId=NotImplemented,
            creditUserName=NotImplemented,
            creditUrl=NotImplemented,
            mediaDate=NotImplemented,
            dataUrl=NotImplemented,
            flavorParamsIds=NotImplemented,
            isTrimDisabled=NotImplemented,
            offlineMessage=NotImplemented,
            recordStatus=NotImplemented,
            dvrStatus=NotImplemented,
            dvrWindow=NotImplemented,
            lastElapsedRecordingTime=NotImplemented,
            liveStreamConfigurations=NotImplemented,
            recordedEntryId=NotImplemented,
            pushPublishEnabled=NotImplemented,
            publishConfigurations=NotImplemented,
            firstBroadcast=NotImplemented,
            lastBroadcast=NotImplemented,
            currentBroadcastStartTime=NotImplemented,
            recordingOptions=NotImplemented,
            liveStatus=NotImplemented,
            streamRemoteId=NotImplemented,
            streamRemoteBackupId=NotImplemented,
            bitrates=NotImplemented,
            primaryBroadcastingUrl=NotImplemented,
            secondaryBroadcastingUrl=NotImplemented,
            primaryRtspBroadcastingUrl=NotImplemented,
            secondaryRtspBroadcastingUrl=NotImplemented,
            streamName=NotImplemented,
            streamUrl=NotImplemented,
            hlsStreamUrl=NotImplemented,
            urlManager=NotImplemented,
            encodingIP1=NotImplemented,
            encodingIP2=NotImplemented,
            streamPassword=NotImplemented,
            streamUsername=NotImplemented,
            primaryServerNodeId=NotImplemented):
        KalturaLiveStreamEntry.__init__(self,
            id,
            name,
            description,
            partnerId,
            userId,
            creatorId,
            tags,
            adminTags,
            categories,
            categoriesIds,
            status,
            moderationStatus,
            moderationCount,
            type,
            createdAt,
            updatedAt,
            rank,
            totalRank,
            votes,
            groupId,
            partnerData,
            downloadUrl,
            searchText,
            licenseType,
            version,
            thumbnailUrl,
            accessControlId,
            startDate,
            endDate,
            referenceId,
            replacingEntryId,
            replacedEntryId,
            replacementStatus,
            partnerSortValue,
            conversionProfileId,
            redirectEntryId,
            rootEntryId,
            parentEntryId,
            operationAttributes,
            entitledUsersEdit,
            entitledUsersPublish,
            capabilities,
            templateEntryId,
            plays,
            views,
            lastPlayedAt,
            width,
            height,
            duration,
            msDuration,
            durationType,
            mediaType,
            conversionQuality,
            sourceType,
            searchProviderType,
            searchProviderId,
            creditUserName,
            creditUrl,
            mediaDate,
            dataUrl,
            flavorParamsIds,
            isTrimDisabled,
            offlineMessage,
            recordStatus,
            dvrStatus,
            dvrWindow,
            lastElapsedRecordingTime,
            liveStreamConfigurations,
            recordedEntryId,
            pushPublishEnabled,
            publishConfigurations,
            firstBroadcast,
            lastBroadcast,
            currentBroadcastStartTime,
            recordingOptions,
            liveStatus,
            streamRemoteId,
            streamRemoteBackupId,
            bitrates,
            primaryBroadcastingUrl,
            secondaryBroadcastingUrl,
            primaryRtspBroadcastingUrl,
            secondaryRtspBroadcastingUrl,
            streamName,
            streamUrl,
            hlsStreamUrl,
            urlManager,
            encodingIP1,
            encodingIP2,
            streamPassword,
            streamUsername,
            primaryServerNodeId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveStreamEntry.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamAdminEntry.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStreamEntry.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamAdminEntry")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaServerNodeBaseFilter(KalturaDeliveryServerNodeFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaDeliveryServerNodeFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryServerNodeFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaServerNodeBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryServerNodeFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaServerNodeBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaPlaylistFilter(KalturaPlaylistBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented):
        KalturaPlaylistBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPlaylistBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaPlaylistFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlaylistBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaPlaylistFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaQuizUserEntryFilter(KalturaQuizUserEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            entryIdNotIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            userIdNotIn=NotImplemented,
            statusEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            typeEqual=NotImplemented,
            userIdEqualCurrent=NotImplemented,
            isAnonymous=NotImplemented):
        KalturaQuizUserEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            entryIdEqual,
            entryIdIn,
            entryIdNotIn,
            userIdEqual,
            userIdIn,
            userIdNotIn,
            statusEqual,
            createdAtLessThanOrEqual,
            createdAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            typeEqual,
            userIdEqualCurrent,
            isAnonymous)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaQuizUserEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaQuizUserEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaQuizUserEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaQuizUserEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaThumbAssetFilter(KalturaThumbAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            typeIn=NotImplemented):
        KalturaThumbAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            thumbParamsIdEqual,
            thumbParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)

        # @var string
        self.typeIn = typeIn


    PROPERTY_LOADERS = {
        'typeIn': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaThumbAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaThumbAssetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbAssetFilter")
        kparams.addStringIfDefined("typeIn", self.typeIn)
        return kparams

    def getTypeIn(self):
        return self.typeIn

    def setTypeIn(self, newTypeIn):
        self.typeIn = newTypeIn


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsFilter(KalturaThumbParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaThumbParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaThumbParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaThumbParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileGenericRtmpFilter(KalturaDeliveryProfileGenericRtmpBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            streamerTypeEqual=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented):
        KalturaDeliveryProfileGenericRtmpBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            partnerIdEqual,
            partnerIdIn,
            systemNameEqual,
            systemNameIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            streamerTypeEqual,
            statusEqual,
            statusIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaDeliveryProfileGenericRtmpBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaDeliveryProfileGenericRtmpFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaDeliveryProfileGenericRtmpBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaDeliveryProfileGenericRtmpFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaEdgeServerNodeFilter(KalturaEdgeServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaEdgeServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaEdgeServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaEdgeServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaEdgeServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaEdgeServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutputBaseFilter(KalturaFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        KalturaFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)

        # @var int
        self.flavorParamsIdEqual = flavorParamsIdEqual

        # @var string
        self.flavorParamsVersionEqual = flavorParamsVersionEqual

        # @var string
        self.flavorAssetIdEqual = flavorAssetIdEqual

        # @var string
        self.flavorAssetVersionEqual = flavorAssetVersionEqual


    PROPERTY_LOADERS = {
        'flavorParamsIdEqual': getXmlNodeInt, 
        'flavorParamsVersionEqual': getXmlNodeText, 
        'flavorAssetIdEqual': getXmlNodeText, 
        'flavorAssetVersionEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsOutputBaseFilter")
        kparams.addIntIfDefined("flavorParamsIdEqual", self.flavorParamsIdEqual)
        kparams.addStringIfDefined("flavorParamsVersionEqual", self.flavorParamsVersionEqual)
        kparams.addStringIfDefined("flavorAssetIdEqual", self.flavorAssetIdEqual)
        kparams.addStringIfDefined("flavorAssetVersionEqual", self.flavorAssetVersionEqual)
        return kparams

    def getFlavorParamsIdEqual(self):
        return self.flavorParamsIdEqual

    def setFlavorParamsIdEqual(self, newFlavorParamsIdEqual):
        self.flavorParamsIdEqual = newFlavorParamsIdEqual

    def getFlavorParamsVersionEqual(self):
        return self.flavorParamsVersionEqual

    def setFlavorParamsVersionEqual(self, newFlavorParamsVersionEqual):
        self.flavorParamsVersionEqual = newFlavorParamsVersionEqual

    def getFlavorAssetIdEqual(self):
        return self.flavorAssetIdEqual

    def setFlavorAssetIdEqual(self, newFlavorAssetIdEqual):
        self.flavorAssetIdEqual = newFlavorAssetIdEqual

    def getFlavorAssetVersionEqual(self):
        return self.flavorAssetVersionEqual

    def setFlavorAssetVersionEqual(self, newFlavorAssetVersionEqual):
        self.flavorAssetVersionEqual = newFlavorAssetVersionEqual


# @package Kaltura
# @subpackage Client
class KalturaGenericXsltSyndicationFeedFilter(KalturaGenericXsltSyndicationFeedBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented):
        KalturaGenericXsltSyndicationFeedBaseFilter.__init__(self,
            orderBy,
            advancedSearch)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaGenericXsltSyndicationFeedBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaGenericXsltSyndicationFeedFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaGenericXsltSyndicationFeedBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaGenericXsltSyndicationFeedFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveAssetBaseFilter(KalturaFlavorAssetFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        KalturaFlavorAssetFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorAssetFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveAssetBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorAssetFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveAssetBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveParamsBaseFilter(KalturaFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveParamsBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsBaseFilter(KalturaFlavorParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaFlavorParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParamsBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParamsBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaServerNodeFilter(KalturaMediaServerNodeBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            heartbeatTimeGreaterThanOrEqual=NotImplemented,
            heartbeatTimeLessThanOrEqual=NotImplemented,
            nameEqual=NotImplemented,
            nameIn=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            hostNameLike=NotImplemented,
            hostNameMultiLikeOr=NotImplemented,
            hostNameMultiLikeAnd=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            dcEqual=NotImplemented,
            dcIn=NotImplemented,
            parentIdEqual=NotImplemented,
            parentIdIn=NotImplemented,
            playbackDomainLike=NotImplemented,
            playbackDomainMultiLikeOr=NotImplemented,
            playbackDomainMultiLikeAnd=NotImplemented):
        KalturaMediaServerNodeBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            heartbeatTimeGreaterThanOrEqual,
            heartbeatTimeLessThanOrEqual,
            nameEqual,
            nameIn,
            systemNameEqual,
            systemNameIn,
            hostNameLike,
            hostNameMultiLikeOr,
            hostNameMultiLikeAnd,
            statusEqual,
            statusIn,
            typeEqual,
            typeIn,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            dcEqual,
            dcIn,
            parentIdEqual,
            parentIdIn,
            playbackDomainLike,
            playbackDomainMultiLikeOr,
            playbackDomainMultiLikeAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaServerNodeBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaServerNodeFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaServerNodeBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaServerNodeFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMixEntryBaseFilter(KalturaPlayableEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        KalturaPlayableEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaPlayableEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaPlayableEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaMixEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutputBaseFilter(KalturaThumbParamsFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsVersionEqual=NotImplemented,
            thumbAssetIdEqual=NotImplemented,
            thumbAssetVersionEqual=NotImplemented):
        KalturaThumbParamsFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)

        # @var int
        self.thumbParamsIdEqual = thumbParamsIdEqual

        # @var string
        self.thumbParamsVersionEqual = thumbParamsVersionEqual

        # @var string
        self.thumbAssetIdEqual = thumbAssetIdEqual

        # @var string
        self.thumbAssetVersionEqual = thumbAssetVersionEqual


    PROPERTY_LOADERS = {
        'thumbParamsIdEqual': getXmlNodeInt, 
        'thumbParamsVersionEqual': getXmlNodeText, 
        'thumbAssetIdEqual': getXmlNodeText, 
        'thumbAssetVersionEqual': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaThumbParamsFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaThumbParamsFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsOutputBaseFilter")
        kparams.addIntIfDefined("thumbParamsIdEqual", self.thumbParamsIdEqual)
        kparams.addStringIfDefined("thumbParamsVersionEqual", self.thumbParamsVersionEqual)
        kparams.addStringIfDefined("thumbAssetIdEqual", self.thumbAssetIdEqual)
        kparams.addStringIfDefined("thumbAssetVersionEqual", self.thumbAssetVersionEqual)
        return kparams

    def getThumbParamsIdEqual(self):
        return self.thumbParamsIdEqual

    def setThumbParamsIdEqual(self, newThumbParamsIdEqual):
        self.thumbParamsIdEqual = newThumbParamsIdEqual

    def getThumbParamsVersionEqual(self):
        return self.thumbParamsVersionEqual

    def setThumbParamsVersionEqual(self, newThumbParamsVersionEqual):
        self.thumbParamsVersionEqual = newThumbParamsVersionEqual

    def getThumbAssetIdEqual(self):
        return self.thumbAssetIdEqual

    def setThumbAssetIdEqual(self, newThumbAssetIdEqual):
        self.thumbAssetIdEqual = newThumbAssetIdEqual

    def getThumbAssetVersionEqual(self):
        return self.thumbAssetVersionEqual

    def setThumbAssetVersionEqual(self, newThumbAssetVersionEqual):
        self.thumbAssetVersionEqual = newThumbAssetVersionEqual


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutputFilter(KalturaFlavorParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        KalturaFlavorParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaFlavorParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsOutputBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaFlavorParamsOutputFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveAssetFilter(KalturaLiveAssetBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            entryIdEqual=NotImplemented,
            entryIdIn=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            sizeGreaterThanOrEqual=NotImplemented,
            sizeLessThanOrEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            deletedAtGreaterThanOrEqual=NotImplemented,
            deletedAtLessThanOrEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsIdIn=NotImplemented,
            statusEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented):
        KalturaLiveAssetBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            entryIdEqual,
            entryIdIn,
            partnerIdEqual,
            partnerIdIn,
            sizeGreaterThanOrEqual,
            sizeLessThanOrEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            deletedAtGreaterThanOrEqual,
            deletedAtLessThanOrEqual,
            flavorParamsIdEqual,
            flavorParamsIdIn,
            statusEqual,
            statusIn,
            statusNotIn)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveAssetBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveAssetFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveAssetBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveAssetFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveParamsFilter(KalturaLiveParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaLiveParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveParamsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsFilter(KalturaMediaFlavorParamsBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented):
        KalturaMediaFlavorParamsBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaFlavorParamsBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParamsFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaFlavorParamsBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParamsFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMixEntryFilter(KalturaMixEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented):
        KalturaMixEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMixEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMixEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMixEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMixEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutputFilter(KalturaThumbParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            thumbParamsIdEqual=NotImplemented,
            thumbParamsVersionEqual=NotImplemented,
            thumbAssetIdEqual=NotImplemented,
            thumbAssetVersionEqual=NotImplemented):
        KalturaThumbParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            thumbParamsIdEqual,
            thumbParamsVersionEqual,
            thumbAssetIdEqual,
            thumbAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaThumbParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaThumbParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaThumbParamsOutputBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaThumbParamsOutputFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryBaseFilter(KalturaMediaEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented):
        KalturaMediaEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsOutputBaseFilter(KalturaFlavorParamsOutputFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        KalturaFlavorParamsOutputFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaFlavorParamsOutputFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParamsOutputBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaFlavorParamsOutputFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParamsOutputBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveEntryFilter(KalturaLiveEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd)

        # @var KalturaNullableBoolean
        self.isLive = isLive

        # @var KalturaNullableBoolean
        self.isRecordedEntryIdEmpty = isRecordedEntryIdEmpty

        # @var string
        self.hasMediaServerHostname = hasMediaServerHostname


    PROPERTY_LOADERS = {
        'isLive': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'isRecordedEntryIdEmpty': (KalturaEnumsFactory.createInt, "KalturaNullableBoolean"), 
        'hasMediaServerHostname': getXmlNodeText, 
    }

    def fromXml(self, node):
        KalturaLiveEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveEntryFilter")
        kparams.addIntEnumIfDefined("isLive", self.isLive)
        kparams.addIntEnumIfDefined("isRecordedEntryIdEmpty", self.isRecordedEntryIdEmpty)
        kparams.addStringIfDefined("hasMediaServerHostname", self.hasMediaServerHostname)
        return kparams

    def getIsLive(self):
        return self.isLive

    def setIsLive(self, newIsLive):
        self.isLive = newIsLive

    def getIsRecordedEntryIdEmpty(self):
        return self.isRecordedEntryIdEmpty

    def setIsRecordedEntryIdEmpty(self, newIsRecordedEntryIdEmpty):
        self.isRecordedEntryIdEmpty = newIsRecordedEntryIdEmpty

    def getHasMediaServerHostname(self):
        return self.hasMediaServerHostname

    def setHasMediaServerHostname(self, newHasMediaServerHostname):
        self.hasMediaServerHostname = newHasMediaServerHostname


# @package Kaltura
# @subpackage Client
class KalturaMediaFlavorParamsOutputFilter(KalturaMediaFlavorParamsOutputBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            systemNameEqual=NotImplemented,
            systemNameIn=NotImplemented,
            isSystemDefaultEqual=NotImplemented,
            tagsEqual=NotImplemented,
            formatEqual=NotImplemented,
            flavorParamsIdEqual=NotImplemented,
            flavorParamsVersionEqual=NotImplemented,
            flavorAssetIdEqual=NotImplemented,
            flavorAssetVersionEqual=NotImplemented):
        KalturaMediaFlavorParamsOutputBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            systemNameEqual,
            systemNameIn,
            isSystemDefaultEqual,
            tagsEqual,
            formatEqual,
            flavorParamsIdEqual,
            flavorParamsVersionEqual,
            flavorAssetIdEqual,
            flavorAssetVersionEqual)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaMediaFlavorParamsOutputBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaMediaFlavorParamsOutputFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaMediaFlavorParamsOutputBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaMediaFlavorParamsOutputFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelBaseFilter(KalturaLiveEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryBaseFilter(KalturaLiveEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelFilter(KalturaLiveChannelBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveChannelBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveChannelBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveChannelFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveChannelBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveChannelFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamEntryFilter(KalturaLiveStreamEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveStreamEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveStreamEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStreamEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamEntryFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryBaseFilter(KalturaLiveStreamEntryFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveStreamEntryFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveStreamEntryFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamAdminEntryBaseFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStreamEntryFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamAdminEntryBaseFilter")
        return kparams


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamAdminEntryFilter(KalturaLiveStreamAdminEntryBaseFilter):
    def __init__(self,
            orderBy=NotImplemented,
            advancedSearch=NotImplemented,
            idEqual=NotImplemented,
            idIn=NotImplemented,
            idNotIn=NotImplemented,
            nameLike=NotImplemented,
            nameMultiLikeOr=NotImplemented,
            nameMultiLikeAnd=NotImplemented,
            nameEqual=NotImplemented,
            partnerIdEqual=NotImplemented,
            partnerIdIn=NotImplemented,
            userIdEqual=NotImplemented,
            userIdIn=NotImplemented,
            creatorIdEqual=NotImplemented,
            tagsLike=NotImplemented,
            tagsMultiLikeOr=NotImplemented,
            tagsMultiLikeAnd=NotImplemented,
            adminTagsLike=NotImplemented,
            adminTagsMultiLikeOr=NotImplemented,
            adminTagsMultiLikeAnd=NotImplemented,
            categoriesMatchAnd=NotImplemented,
            categoriesMatchOr=NotImplemented,
            categoriesNotContains=NotImplemented,
            categoriesIdsMatchAnd=NotImplemented,
            categoriesIdsMatchOr=NotImplemented,
            categoriesIdsNotContains=NotImplemented,
            categoriesIdsEmpty=NotImplemented,
            statusEqual=NotImplemented,
            statusNotEqual=NotImplemented,
            statusIn=NotImplemented,
            statusNotIn=NotImplemented,
            moderationStatusEqual=NotImplemented,
            moderationStatusNotEqual=NotImplemented,
            moderationStatusIn=NotImplemented,
            moderationStatusNotIn=NotImplemented,
            typeEqual=NotImplemented,
            typeIn=NotImplemented,
            createdAtGreaterThanOrEqual=NotImplemented,
            createdAtLessThanOrEqual=NotImplemented,
            updatedAtGreaterThanOrEqual=NotImplemented,
            updatedAtLessThanOrEqual=NotImplemented,
            totalRankLessThanOrEqual=NotImplemented,
            totalRankGreaterThanOrEqual=NotImplemented,
            groupIdEqual=NotImplemented,
            searchTextMatchAnd=NotImplemented,
            searchTextMatchOr=NotImplemented,
            accessControlIdEqual=NotImplemented,
            accessControlIdIn=NotImplemented,
            startDateGreaterThanOrEqual=NotImplemented,
            startDateLessThanOrEqual=NotImplemented,
            startDateGreaterThanOrEqualOrNull=NotImplemented,
            startDateLessThanOrEqualOrNull=NotImplemented,
            endDateGreaterThanOrEqual=NotImplemented,
            endDateLessThanOrEqual=NotImplemented,
            endDateGreaterThanOrEqualOrNull=NotImplemented,
            endDateLessThanOrEqualOrNull=NotImplemented,
            referenceIdEqual=NotImplemented,
            referenceIdIn=NotImplemented,
            replacingEntryIdEqual=NotImplemented,
            replacingEntryIdIn=NotImplemented,
            replacedEntryIdEqual=NotImplemented,
            replacedEntryIdIn=NotImplemented,
            replacementStatusEqual=NotImplemented,
            replacementStatusIn=NotImplemented,
            partnerSortValueGreaterThanOrEqual=NotImplemented,
            partnerSortValueLessThanOrEqual=NotImplemented,
            rootEntryIdEqual=NotImplemented,
            rootEntryIdIn=NotImplemented,
            parentEntryIdEqual=NotImplemented,
            entitledUsersEditMatchAnd=NotImplemented,
            entitledUsersEditMatchOr=NotImplemented,
            entitledUsersPublishMatchAnd=NotImplemented,
            entitledUsersPublishMatchOr=NotImplemented,
            tagsNameMultiLikeOr=NotImplemented,
            tagsAdminTagsMultiLikeOr=NotImplemented,
            tagsAdminTagsNameMultiLikeOr=NotImplemented,
            tagsNameMultiLikeAnd=NotImplemented,
            tagsAdminTagsMultiLikeAnd=NotImplemented,
            tagsAdminTagsNameMultiLikeAnd=NotImplemented,
            freeText=NotImplemented,
            isRoot=NotImplemented,
            categoriesFullNameIn=NotImplemented,
            categoryAncestorIdIn=NotImplemented,
            redirectFromEntryId=NotImplemented,
            lastPlayedAtGreaterThanOrEqual=NotImplemented,
            lastPlayedAtLessThanOrEqual=NotImplemented,
            durationLessThan=NotImplemented,
            durationGreaterThan=NotImplemented,
            durationLessThanOrEqual=NotImplemented,
            durationGreaterThanOrEqual=NotImplemented,
            durationTypeMatchOr=NotImplemented,
            mediaTypeEqual=NotImplemented,
            mediaTypeIn=NotImplemented,
            sourceTypeEqual=NotImplemented,
            sourceTypeNotEqual=NotImplemented,
            sourceTypeIn=NotImplemented,
            sourceTypeNotIn=NotImplemented,
            mediaDateGreaterThanOrEqual=NotImplemented,
            mediaDateLessThanOrEqual=NotImplemented,
            flavorParamsIdsMatchOr=NotImplemented,
            flavorParamsIdsMatchAnd=NotImplemented,
            isLive=NotImplemented,
            isRecordedEntryIdEmpty=NotImplemented,
            hasMediaServerHostname=NotImplemented):
        KalturaLiveStreamAdminEntryBaseFilter.__init__(self,
            orderBy,
            advancedSearch,
            idEqual,
            idIn,
            idNotIn,
            nameLike,
            nameMultiLikeOr,
            nameMultiLikeAnd,
            nameEqual,
            partnerIdEqual,
            partnerIdIn,
            userIdEqual,
            userIdIn,
            creatorIdEqual,
            tagsLike,
            tagsMultiLikeOr,
            tagsMultiLikeAnd,
            adminTagsLike,
            adminTagsMultiLikeOr,
            adminTagsMultiLikeAnd,
            categoriesMatchAnd,
            categoriesMatchOr,
            categoriesNotContains,
            categoriesIdsMatchAnd,
            categoriesIdsMatchOr,
            categoriesIdsNotContains,
            categoriesIdsEmpty,
            statusEqual,
            statusNotEqual,
            statusIn,
            statusNotIn,
            moderationStatusEqual,
            moderationStatusNotEqual,
            moderationStatusIn,
            moderationStatusNotIn,
            typeEqual,
            typeIn,
            createdAtGreaterThanOrEqual,
            createdAtLessThanOrEqual,
            updatedAtGreaterThanOrEqual,
            updatedAtLessThanOrEqual,
            totalRankLessThanOrEqual,
            totalRankGreaterThanOrEqual,
            groupIdEqual,
            searchTextMatchAnd,
            searchTextMatchOr,
            accessControlIdEqual,
            accessControlIdIn,
            startDateGreaterThanOrEqual,
            startDateLessThanOrEqual,
            startDateGreaterThanOrEqualOrNull,
            startDateLessThanOrEqualOrNull,
            endDateGreaterThanOrEqual,
            endDateLessThanOrEqual,
            endDateGreaterThanOrEqualOrNull,
            endDateLessThanOrEqualOrNull,
            referenceIdEqual,
            referenceIdIn,
            replacingEntryIdEqual,
            replacingEntryIdIn,
            replacedEntryIdEqual,
            replacedEntryIdIn,
            replacementStatusEqual,
            replacementStatusIn,
            partnerSortValueGreaterThanOrEqual,
            partnerSortValueLessThanOrEqual,
            rootEntryIdEqual,
            rootEntryIdIn,
            parentEntryIdEqual,
            entitledUsersEditMatchAnd,
            entitledUsersEditMatchOr,
            entitledUsersPublishMatchAnd,
            entitledUsersPublishMatchOr,
            tagsNameMultiLikeOr,
            tagsAdminTagsMultiLikeOr,
            tagsAdminTagsNameMultiLikeOr,
            tagsNameMultiLikeAnd,
            tagsAdminTagsMultiLikeAnd,
            tagsAdminTagsNameMultiLikeAnd,
            freeText,
            isRoot,
            categoriesFullNameIn,
            categoryAncestorIdIn,
            redirectFromEntryId,
            lastPlayedAtGreaterThanOrEqual,
            lastPlayedAtLessThanOrEqual,
            durationLessThan,
            durationGreaterThan,
            durationLessThanOrEqual,
            durationGreaterThanOrEqual,
            durationTypeMatchOr,
            mediaTypeEqual,
            mediaTypeIn,
            sourceTypeEqual,
            sourceTypeNotEqual,
            sourceTypeIn,
            sourceTypeNotIn,
            mediaDateGreaterThanOrEqual,
            mediaDateLessThanOrEqual,
            flavorParamsIdsMatchOr,
            flavorParamsIdsMatchAnd,
            isLive,
            isRecordedEntryIdEmpty,
            hasMediaServerHostname)


    PROPERTY_LOADERS = {
    }

    def fromXml(self, node):
        KalturaLiveStreamAdminEntryBaseFilter.fromXml(self, node)
        self.fromXmlImpl(node, KalturaLiveStreamAdminEntryFilter.PROPERTY_LOADERS)

    def toParams(self):
        kparams = KalturaLiveStreamAdminEntryBaseFilter.toParams(self)
        kparams.put("objectType", "KalturaLiveStreamAdminEntryFilter")
        return kparams


########## services ##########

# @package Kaltura
# @subpackage Client
class KalturaAccessControlProfileService(KalturaServiceBase):
    """Manage access control profiles"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, accessControlProfile):
        """Add new access control profile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("accessControlProfile", accessControlProfile)
        self.client.queueServiceActionCall("accesscontrolprofile", "add", KalturaAccessControlProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControlProfile)

    def get(self, id):
        """Get access control profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrolprofile", "get", KalturaAccessControlProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControlProfile)

    def update(self, id, accessControlProfile):
        """Update access control profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("accessControlProfile", accessControlProfile)
        self.client.queueServiceActionCall("accesscontrolprofile", "update", KalturaAccessControlProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControlProfile)

    def delete(self, id):
        """Delete access control profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrolprofile", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List access control profiles by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("accesscontrolprofile", "list", KalturaAccessControlProfileListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControlProfileListResponse)


# @package Kaltura
# @subpackage Client
class KalturaAccessControlService(KalturaServiceBase):
    """Add & Manage Access Controls"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, accessControl):
        """Add new Access Control Profile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("accessControl", accessControl)
        self.client.queueServiceActionCall("accesscontrol", "add", KalturaAccessControl, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControl)

    def get(self, id):
        """Get Access Control Profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrol", "get", KalturaAccessControl, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControl)

    def update(self, id, accessControl):
        """Update Access Control Profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("accessControl", accessControl)
        self.client.queueServiceActionCall("accesscontrol", "update", KalturaAccessControl, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControl)

    def delete(self, id):
        """Delete Access Control Profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("accesscontrol", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Access Control Profiles by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("accesscontrol", "list", KalturaAccessControlListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAccessControlListResponse)


# @package Kaltura
# @subpackage Client
class KalturaAdminUserService(KalturaServiceBase):
    """Manage details for the administrative user"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def updatePassword(self, email, password, newEmail = "", newPassword = ""):
        """Update admin user password and email"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("email", email)
        kparams.addStringIfDefined("password", password)
        kparams.addStringIfDefined("newEmail", newEmail)
        kparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("adminuser", "updatePassword", KalturaAdminUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAdminUser)

    def resetPassword(self, email):
        """Reset admin user password and send it to the users email address"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("email", email)
        self.client.queueServiceActionCall("adminuser", "resetPassword", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def login(self, email, password, partnerId = NotImplemented):
        """Get an admin session using admin email and password (Used for login to the KMC application)"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("email", email)
        kparams.addStringIfDefined("password", password)
        kparams.addIntIfDefined("partnerId", partnerId);
        self.client.queueServiceActionCall("adminuser", "login", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def setInitialPassword(self, hashKey, newPassword):
        """Set initial users password"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("hashKey", hashKey)
        kparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("adminuser", "setInitialPassword", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaAnalyticsService(KalturaServiceBase):
    """api for getting analytics data"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def query(self, filter):
        """report query action allows to get a analytics data for specific query dimensions, metrics and filters."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("analytics", "query", KalturaReportResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaReportResponse)


# @package Kaltura
# @subpackage Client
class KalturaAppTokenService(KalturaServiceBase):
    """Manage application authentication tokens"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, appToken):
        """Add new application authentication token"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("appToken", appToken)
        self.client.queueServiceActionCall("apptoken", "add", KalturaAppToken, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAppToken)

    def get(self, id):
        """Get application authentication token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "get", KalturaAppToken, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAppToken)

    def update(self, id, appToken):
        """Update application authentication token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("appToken", appToken)
        self.client.queueServiceActionCall("apptoken", "update", KalturaAppToken, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAppToken)

    def delete(self, id):
        """Delete application authentication token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("apptoken", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List application authentication tokens by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("apptoken", "list", KalturaAppTokenListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaAppTokenListResponse)

    def startSession(self, id, tokenHash, userId = NotImplemented, type = NotImplemented, expiry = NotImplemented):
        """Starts a new KS (kaltura Session) based on application authentication token id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("tokenHash", tokenHash)
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("type", type);
        kparams.addIntIfDefined("expiry", expiry);
        self.client.queueServiceActionCall("apptoken", "startSession", KalturaSessionInfo, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSessionInfo)


# @package Kaltura
# @subpackage Client
class KalturaBaseEntryService(KalturaServiceBase):
    """Base Entry Service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, entry, type = NotImplemented):
        """Generic add entry, should be used when the uploaded entry type is not known."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("entry", entry)
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("baseentry", "add", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def addContent(self, entryId, resource):
        """Attach content resource to entry in status NO_MEDIA"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("resource", resource)
        self.client.queueServiceActionCall("baseentry", "addContent", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def addFromUploadedFile(self, entry, uploadTokenId, type = NotImplemented):
        """Generic add entry using an uploaded file, should be used when the uploaded entry type is not known."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("entry", entry)
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("baseentry", "addFromUploadedFile", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def get(self, entryId, version = -1):
        """Get base entry by ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("baseentry", "get", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def getRemotePaths(self, entryId):
        """Get remote storage existing paths for the asset."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "getRemotePaths", KalturaRemotePathListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaRemotePathListResponse)

    def update(self, entryId, baseEntry):
        """Update base entry. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("baseEntry", baseEntry)
        self.client.queueServiceActionCall("baseentry", "update", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def updateContent(self, entryId, resource, conversionProfileId = NotImplemented, advancedOptions = NotImplemented):
        """Update the content resource associated with the entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        kparams.addObjectIfDefined("advancedOptions", advancedOptions)
        self.client.queueServiceActionCall("baseentry", "updateContent", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def getByIds(self, entryIds):
        """Get an array of KalturaBaseEntry objects by a comma-separated list of ids."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryIds", entryIds)
        self.client.queueServiceActionCall("baseentry", "getByIds", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaBaseEntry)

    def delete(self, entryId):
        """Delete an entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List base entries by filter with paging support."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "list", KalturaBaseEntryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntryListResponse)

    def listByReferenceId(self, refId, pager = NotImplemented):
        """List base entries by filter according to reference id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("refId", refId)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "listByReferenceId", KalturaBaseEntryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntryListResponse)

    def count(self, filter = NotImplemented):
        """Count base entries by filter."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("baseentry", "count", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def upload(self, fileData):
        """Upload a file to Kaltura, that can be used to create an entry."""

        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("baseentry", "upload", None, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateThumbnailJpeg(self, entryId, fileData):
        """Update entry thumbnail using a raw jpeg file."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("baseentry", "updateThumbnailJpeg", KalturaBaseEntry, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def updateThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("baseentry", "updateThumbnailFromUrl", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def updateThumbnailFromSourceEntry(self, entryId, sourceEntryId, timeOffset):
        """Update entry thumbnail from a different entry by a specified time offset (in seconds)."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        kparams.addIntIfDefined("timeOffset", timeOffset);
        self.client.queueServiceActionCall("baseentry", "updateThumbnailFromSourceEntry", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def flag(self, moderationFlag):
        """Flag inappropriate entry for moderation."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("moderationFlag", moderationFlag)
        self.client.queueServiceActionCall("baseentry", "flag", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId):
        """Reject the entry and mark the pending flags (if any) as moderated (this will make the entry non-playable)."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "reject", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approve(self, entryId):
        """Approve the entry and mark the pending flags (if any) as moderated (this will make the entry playable)."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("baseentry", "approve", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def listFlags(self, entryId, pager = NotImplemented):
        """List all pending flags for the entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("baseentry", "listFlags", KalturaModerationFlagListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaModerationFlagListResponse)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank an entry, no validation is done on duplicate rankings."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("baseentry", "anonymousRank", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getContextData(self, entryId, contextDataParams):
        """This action delivers entry-related data, based on the user's context: access control, restriction, playback format and storage information."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("contextDataParams", contextDataParams)
        self.client.queueServiceActionCall("baseentry", "getContextData", KalturaEntryContextDataResult, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEntryContextDataResult)

    def export(self, entryId, storageProfileId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("baseentry", "export", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def index(self, id, shouldUpdate = True):
        """Index an entry by id."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("baseentry", "index", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def clone(self, entryId, cloneOptions = NotImplemented):
        """Clone an entry with optional attributes to apply to the clone"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addArrayIfDefined("cloneOptions", cloneOptions)
        self.client.queueServiceActionCall("baseentry", "clone", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)


# @package Kaltura
# @subpackage Client
class KalturaBulkUploadService(KalturaServiceBase):
    """Bulk upload service is used to upload & manage bulk uploads using CSV files.
     This service manages only entry bulk uploads."""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, conversionProfileId, csvFileData, bulkUploadType = NotImplemented, uploadedBy = NotImplemented, fileName = NotImplemented):
        """Add new bulk upload batch job
        	 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
        	 If no conversion profile was specified, partner's default will be used"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        kfiles = KalturaFiles()
        kfiles.put("csvFileData", csvFileData);
        kparams.addStringIfDefined("bulkUploadType", bulkUploadType)
        kparams.addStringIfDefined("uploadedBy", uploadedBy)
        kparams.addStringIfDefined("fileName", fileName)
        self.client.queueServiceActionCall("bulkupload", "add", KalturaBulkUpload, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)

    def get(self, id):
        """Get bulk upload batch job by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("bulkupload", "get", KalturaBulkUpload, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)

    def list(self, pager = NotImplemented):
        """List bulk upload batch jobs"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("bulkupload", "list", KalturaBulkUploadListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUploadListResponse)

    def serve(self, id):
        """serve action returan the original file."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('bulkupload', 'serve', None ,kparams)
        return self.client.getServeUrl()

    def serveLog(self, id):
        """serveLog action returan the original file."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('bulkupload', 'serveLog', None ,kparams)
        return self.client.getServeUrl()

    def abort(self, id):
        """Aborts the bulk upload and all its child jobs"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("bulkupload", "abort", KalturaBulkUpload, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)


# @package Kaltura
# @subpackage Client
class KalturaCategoryEntryService(KalturaServiceBase):
    """Add & Manage CategoryEntry - assign entry to category"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, categoryEntry):
        """Add new CategoryEntry"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("categoryEntry", categoryEntry)
        self.client.queueServiceActionCall("categoryentry", "add", KalturaCategoryEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryEntry)

    def delete(self, entryId, categoryId):
        """Delete CategoryEntry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categoryEntry"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryentry", "list", KalturaCategoryEntryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryEntryListResponse)

    def index(self, entryId, categoryId, shouldUpdate = True):
        """Index CategoryEntry by Id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("categoryentry", "index", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def activate(self, entryId, categoryId):
        """activate CategoryEntry when it is pending moderation"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "activate", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId, categoryId):
        """activate CategoryEntry when it is pending moderation"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "reject", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def syncPrivacyContext(self, entryId, categoryId):
        """update privacy context from the category"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryentry", "syncPrivacyContext", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addFromBulkUpload(self, bulkUploadData, bulkUploadCategoryEntryData = NotImplemented):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        kparams.addObjectIfDefined("bulkUploadCategoryEntryData", bulkUploadCategoryEntryData)
        self.client.queueServiceActionCall("categoryentry", "addFromBulkUpload", KalturaBulkUpload, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)


# @package Kaltura
# @subpackage Client
class KalturaCategoryService(KalturaServiceBase):
    """Add & Manage Categories"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, category):
        """Add new Category"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("category", category)
        self.client.queueServiceActionCall("category", "add", KalturaCategory, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategory)

    def get(self, id):
        """Get Category by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("category", "get", KalturaCategory, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategory)

    def update(self, id, category):
        """Update Category"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("category", category)
        self.client.queueServiceActionCall("category", "update", KalturaCategory, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategory)

    def delete(self, id, moveEntriesToParentCategory = 1):
        """Delete a Category"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addIntIfDefined("moveEntriesToParentCategory", moveEntriesToParentCategory);
        self.client.queueServiceActionCall("category", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categories"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("category", "list", KalturaCategoryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryListResponse)

    def index(self, id, shouldUpdate = True):
        """Index Category by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("category", "index", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def move(self, categoryIds, targetCategoryParentId):
        """Move categories that belong to the same parent category to a target categroy - enabled only for ks with disable entitlement"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("categoryIds", categoryIds)
        kparams.addIntIfDefined("targetCategoryParentId", targetCategoryParentId);
        self.client.queueServiceActionCall("category", "move", KalturaCategoryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryListResponse)

    def unlockCategories(self):
        """Unlock categories"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("category", "unlockCategories", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadCategoryData = NotImplemented):
        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        kparams.addObjectIfDefined("bulkUploadCategoryData", bulkUploadCategoryData)
        self.client.queueServiceActionCall("category", "addFromBulkUpload", KalturaBulkUpload, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)


# @package Kaltura
# @subpackage Client
class KalturaCategoryUserService(KalturaServiceBase):
    """Add & Manage CategoryUser - membership of a user in a category"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, categoryUser):
        """Add new CategoryUser"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("categoryUser", categoryUser)
        self.client.queueServiceActionCall("categoryuser", "add", KalturaCategoryUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUser)

    def get(self, categoryId, userId):
        """Get CategoryUser by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "get", KalturaCategoryUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUser)

    def update(self, categoryId, userId, categoryUser, override = False):
        """Update CategoryUser by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addStringIfDefined("userId", userId)
        kparams.addObjectIfDefined("categoryUser", categoryUser)
        kparams.addBoolIfDefined("override", override);
        self.client.queueServiceActionCall("categoryuser", "update", KalturaCategoryUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUser)

    def delete(self, categoryId, userId):
        """Delete a CategoryUser"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def activate(self, categoryId, userId):
        """activate CategoryUser"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "activate", KalturaCategoryUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUser)

    def deactivate(self, categoryId, userId):
        """reject CategoryUser"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("categoryuser", "deactivate", KalturaCategoryUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUser)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all categories"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("categoryuser", "list", KalturaCategoryUserListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCategoryUserListResponse)

    def copyFromCategory(self, categoryId):
        """Copy all memeber from parent category"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("categoryId", categoryId);
        self.client.queueServiceActionCall("categoryuser", "copyFromCategory", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def index(self, userId, categoryId, shouldUpdate = True):
        """Index CategoryUser by userid and category id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("categoryId", categoryId);
        kparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("categoryuser", "index", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadCategoryUserData = NotImplemented):
        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        kparams.addObjectIfDefined("bulkUploadCategoryUserData", bulkUploadCategoryUserData)
        self.client.queueServiceActionCall("categoryuser", "addFromBulkUpload", KalturaBulkUpload, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileAssetParamsService(KalturaServiceBase):
    """Manage the connection between Conversion Profiles and Asset Params"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists asset parmas of conversion profile by ID"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("conversionprofileassetparams", "list", KalturaConversionProfileAssetParamsListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfileAssetParamsListResponse)

    def update(self, conversionProfileId, assetParamsId, conversionProfileAssetParams):
        """Update asset parmas of conversion profile by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        kparams.addIntIfDefined("assetParamsId", assetParamsId);
        kparams.addObjectIfDefined("conversionProfileAssetParams", conversionProfileAssetParams)
        self.client.queueServiceActionCall("conversionprofileassetparams", "update", KalturaConversionProfileAssetParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfileAssetParams)


# @package Kaltura
# @subpackage Client
class KalturaConversionProfileService(KalturaServiceBase):
    """Add & Manage Conversion Profiles"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def setAsDefault(self, id):
        """Set Conversion Profile to be the partner default"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "setAsDefault", KalturaConversionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfile)

    def getDefault(self, type = NotImplemented):
        """Get the partner's default conversion profile"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall("conversionprofile", "getDefault", KalturaConversionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfile)

    def add(self, conversionProfile):
        """Add new Conversion Profile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("conversionProfile", conversionProfile)
        self.client.queueServiceActionCall("conversionprofile", "add", KalturaConversionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfile)

    def get(self, id):
        """Get Conversion Profile by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "get", KalturaConversionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfile)

    def update(self, id, conversionProfile):
        """Update Conversion Profile by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("conversionProfile", conversionProfile)
        self.client.queueServiceActionCall("conversionprofile", "update", KalturaConversionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfile)

    def delete(self, id):
        """Delete Conversion Profile by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("conversionprofile", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Conversion Profiles by filter with paging support"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("conversionprofile", "list", KalturaConversionProfileListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaConversionProfileListResponse)


# @package Kaltura
# @subpackage Client
class KalturaDataService(KalturaServiceBase):
    """Data service lets you manage data content (textual content)"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, dataEntry):
        """Adds a new data entry"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("dataEntry", dataEntry)
        self.client.queueServiceActionCall("data", "add", KalturaDataEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDataEntry)

    def get(self, entryId, version = -1):
        """Get data entry by ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("data", "get", KalturaDataEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDataEntry)

    def update(self, entryId, documentEntry):
        """Update data entry. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("documentEntry", documentEntry)
        self.client.queueServiceActionCall("data", "update", KalturaDataEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDataEntry)

    def delete(self, entryId):
        """Delete a data entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("data", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List data entries by filter with paging support."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("data", "list", KalturaDataListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDataListResponse)

    def serve(self, entryId, version = -1, forceProxy = False):
        """serve action returan the file from dataContent field."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        kparams.addBoolIfDefined("forceProxy", forceProxy);
        self.client.queueServiceActionCall('data', 'serve', None ,kparams)
        return self.client.getServeUrl()


# @package Kaltura
# @subpackage Client
class KalturaDeliveryProfileService(KalturaServiceBase):
    """delivery service is used to control delivery objects"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, delivery):
        """Add new delivery."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("delivery", delivery)
        self.client.queueServiceActionCall("deliveryprofile", "add", KalturaDeliveryProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDeliveryProfile)

    def update(self, id, delivery):
        """Update exisiting delivery"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("delivery", delivery)
        self.client.queueServiceActionCall("deliveryprofile", "update", KalturaDeliveryProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDeliveryProfile)

    def get(self, id):
        """Get delivery by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("deliveryprofile", "get", KalturaDeliveryProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDeliveryProfile)

    def clone(self, deliveryId):
        """Add delivery based on existing delivery.
        	Must provide valid sourceDeliveryId"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("deliveryId", deliveryId);
        self.client.queueServiceActionCall("deliveryprofile", "clone", KalturaDeliveryProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDeliveryProfile)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available delivery depends on the filter given"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("deliveryprofile", "list", KalturaDeliveryProfileListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaDeliveryProfileListResponse)


# @package Kaltura
# @subpackage Client
class KalturaEmailIngestionProfileService(KalturaServiceBase):
    """EmailIngestionProfile service lets you manage email ingestion profile records"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, EmailIP):
        """EmailIngestionProfile Add action allows you to add a EmailIngestionProfile to Kaltura DB"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("EmailIP", EmailIP)
        self.client.queueServiceActionCall("emailingestionprofile", "add", KalturaEmailIngestionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEmailIngestionProfile)

    def getByEmailAddress(self, emailAddress):
        """Retrieve a EmailIngestionProfile by email address"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("emailAddress", emailAddress)
        self.client.queueServiceActionCall("emailingestionprofile", "getByEmailAddress", KalturaEmailIngestionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEmailIngestionProfile)

    def get(self, id):
        """Retrieve a EmailIngestionProfile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("emailingestionprofile", "get", KalturaEmailIngestionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEmailIngestionProfile)

    def update(self, id, EmailIP):
        """Update an existing EmailIngestionProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("EmailIP", EmailIP)
        self.client.queueServiceActionCall("emailingestionprofile", "update", KalturaEmailIngestionProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEmailIngestionProfile)

    def delete(self, id):
        """Delete an existing EmailIngestionProfile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("emailingestionprofile", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def addMediaEntry(self, mediaEntry, uploadTokenId, emailProfId, fromAddress, emailMsgId):
        """add KalturaMediaEntry from email ingestion"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        kparams.addIntIfDefined("emailProfId", emailProfId);
        kparams.addStringIfDefined("fromAddress", fromAddress)
        kparams.addStringIfDefined("emailMsgId", emailMsgId)
        self.client.queueServiceActionCall("emailingestionprofile", "addMediaEntry", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)


# @package Kaltura
# @subpackage Client
class KalturaEntryServerNodeService(KalturaServiceBase):
    """Base class for entry server node"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def update(self, id, entryServerNode):
        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("entryServerNode", entryServerNode)
        self.client.queueServiceActionCall("entryservernode", "update", KalturaEntryServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEntryServerNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("entryservernode", "list", KalturaEntryServerNodeListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEntryServerNodeListResponse)

    def get(self, id):
        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("entryservernode", "get", KalturaEntryServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaEntryServerNode)

    def validateRegisteredEntryServerNode(self, id):
        """Validates server node still registered on entry"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("entryservernode", "validateRegisteredEntryServerNode", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaFileAssetService(KalturaServiceBase):
    """Manage file assets"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, fileAsset):
        """Add new file asset"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("fileAsset", fileAsset)
        self.client.queueServiceActionCall("fileasset", "add", KalturaFileAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFileAsset)

    def get(self, id):
        """Get file asset by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("fileasset", "get", KalturaFileAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFileAsset)

    def update(self, id, fileAsset):
        """Update file asset by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("fileAsset", fileAsset)
        self.client.queueServiceActionCall("fileasset", "update", KalturaFileAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFileAsset)

    def delete(self, id):
        """Delete file asset by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("fileasset", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def serve(self, id):
        """Serve file asset by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall('fileasset', 'serve', None ,kparams)
        return self.client.getServeUrl()

    def setContent(self, id, contentResource):
        """Set content of file asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("fileasset", "setContent", KalturaFileAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFileAsset)

    def list(self, filter, pager = NotImplemented):
        """List file assets by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("fileasset", "list", KalturaFileAssetListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFileAssetListResponse)


# @package Kaltura
# @subpackage Client
class KalturaFlavorAssetService(KalturaServiceBase):
    """Retrieve information and invoke actions on Flavor Asset"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, entryId, flavorAsset):
        """Add flavor asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("flavorAsset", flavorAsset)
        self.client.queueServiceActionCall("flavorasset", "add", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)

    def update(self, id, flavorAsset):
        """Update flavor asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("flavorAsset", flavorAsset)
        self.client.queueServiceActionCall("flavorasset", "update", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)

    def setContent(self, id, contentResource):
        """Update content of flavor asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("flavorasset", "setContent", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)

    def get(self, id):
        """Get Flavor Asset by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "get", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)

    def getByEntryId(self, entryId):
        """Get Flavor Assets for Entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getByEntryId", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaFlavorAsset)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Flavor Assets by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorasset", "list", KalturaFlavorAssetListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAssetListResponse)

    def getWebPlayableByEntryId(self, entryId):
        """Get web playable Flavor Assets for Entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getWebPlayableByEntryId", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaFlavorAsset)

    def convert(self, entryId, flavorParamsId, priority = 0):
        """Add and convert new Flavor Asset for Entry with specific Flavor Params"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        kparams.addIntIfDefined("priority", priority);
        self.client.queueServiceActionCall("flavorasset", "convert", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reconvert(self, id):
        """Reconvert Flavor Asset by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "reconvert", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        """Delete Flavor Asset by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getUrl(self, id, storageId = NotImplemented, forceProxy = False, options = NotImplemented):
        """Get download URL for the asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addIntIfDefined("storageId", storageId);
        kparams.addBoolIfDefined("forceProxy", forceProxy);
        kparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall("flavorasset", "getUrl", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getRemotePaths(self, id):
        """Get remote storage existing paths for the asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("flavorasset", "getRemotePaths", KalturaRemotePathListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaRemotePathListResponse)

    def getDownloadUrl(self, id, useCdn = False):
        """Get download URL for the Flavor Asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addBoolIfDefined("useCdn", useCdn);
        self.client.queueServiceActionCall("flavorasset", "getDownloadUrl", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getFlavorAssetsWithParams(self, entryId):
        """Get Flavor Asset with the relevant Flavor Params (Flavor Params can exist without Flavor Asset & vice versa)"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("flavorasset", "getFlavorAssetsWithParams", KalturaFlavorAssetWithParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaFlavorAssetWithParams)

    def export(self, assetId, storageProfileId):
        """manually export an asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("flavorasset", "export", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)

    def setAsSource(self, assetId):
        """Set a given flavor as the original flavor"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        self.client.queueServiceActionCall("flavorasset", "setAsSource", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def deleteLocalContent(self, assetId):
        """delete all local file syncs for this asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        self.client.queueServiceActionCall("flavorasset", "deleteLocalContent", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsOutputService(KalturaServiceBase):
    """Flavor Params Output service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, id):
        """Get flavor params output object by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparamsoutput", "get", KalturaFlavorParamsOutput, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParamsOutput)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List flavor params output objects by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorparamsoutput", "list", KalturaFlavorParamsOutputListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParamsOutputListResponse)


# @package Kaltura
# @subpackage Client
class KalturaFlavorParamsService(KalturaServiceBase):
    """Add & Manage Flavor Params"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, flavorParams):
        """Add new Flavor Params"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("flavorParams", flavorParams)
        self.client.queueServiceActionCall("flavorparams", "add", KalturaFlavorParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParams)

    def get(self, id):
        """Get Flavor Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparams", "get", KalturaFlavorParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParams)

    def update(self, id, flavorParams):
        """Update Flavor Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("flavorParams", flavorParams)
        self.client.queueServiceActionCall("flavorparams", "update", KalturaFlavorParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParams)

    def delete(self, id):
        """Delete Flavor Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("flavorparams", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Flavor Params by filter with paging support (By default - all system default params will be listed too)"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("flavorparams", "list", KalturaFlavorParamsListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorParamsListResponse)

    def getByConversionProfileId(self, conversionProfileId):
        """Get Flavor Params by Conversion Profile ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        self.client.queueServiceActionCall("flavorparams", "getByConversionProfileId", KalturaFlavorParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaFlavorParams)


# @package Kaltura
# @subpackage Client
class KalturaGroupUserService(KalturaServiceBase):
    """Add & Manage GroupUser"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, groupUser):
        """Add new GroupUser"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("groupUser", groupUser)
        self.client.queueServiceActionCall("groupuser", "add", KalturaGroupUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaGroupUser)

    def delete(self, userId, groupId):
        """delete by userId and groupId"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addStringIfDefined("groupId", groupId)
        self.client.queueServiceActionCall("groupuser", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List all GroupUsers"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("groupuser", "list", KalturaGroupUserListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaGroupUserListResponse)


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelSegmentService(KalturaServiceBase):
    """Manage live channel segments"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, liveChannelSegment):
        """Add new live channel segment"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("liveChannelSegment", liveChannelSegment)
        self.client.queueServiceActionCall("livechannelsegment", "add", KalturaLiveChannelSegment, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannelSegment)

    def get(self, id):
        """Get live channel segment by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("livechannelsegment", "get", KalturaLiveChannelSegment, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannelSegment)

    def update(self, id, liveChannelSegment):
        """Update live channel segment by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("liveChannelSegment", liveChannelSegment)
        self.client.queueServiceActionCall("livechannelsegment", "update", KalturaLiveChannelSegment, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannelSegment)

    def delete(self, id):
        """Delete live channel segment by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("livechannelsegment", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live channel segments by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livechannelsegment", "list", KalturaLiveChannelSegmentListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannelSegmentListResponse)


# @package Kaltura
# @subpackage Client
class KalturaLiveChannelService(KalturaServiceBase):
    """Live Channel service lets you manage live channels"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, liveChannel):
        """Adds new live channel."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("liveChannel", liveChannel)
        self.client.queueServiceActionCall("livechannel", "add", KalturaLiveChannel, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannel)

    def get(self, id):
        """Get live channel by ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "get", KalturaLiveChannel, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannel)

    def update(self, id, liveChannel):
        """Update live channel. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("liveChannel", liveChannel)
        self.client.queueServiceActionCall("livechannel", "update", KalturaLiveChannel, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannel)

    def delete(self, id):
        """Delete a live channel."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live channels by filter with paging support."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livechannel", "list", KalturaLiveChannelListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveChannelListResponse)

    def isLive(self, id):
        """Delivering the status of a live channel (on-air/offline)"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livechannel", "isLive", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def appendRecording(self, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk = False):
        """Append recorded video to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addFloatIfDefined("duration", duration)
        kparams.addBoolIfDefined("isLastChunk", isLastChunk);
        self.client.queueServiceActionCall("livechannel", "appendRecording", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def registerMediaServer(self, entryId, hostname, mediaServerIndex, applicationName = NotImplemented, liveEntryStatus = 1):
        """Register media server to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("hostname", hostname)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addStringIfDefined("applicationName", applicationName)
        kparams.addIntIfDefined("liveEntryStatus", liveEntryStatus);
        self.client.queueServiceActionCall("livechannel", "registerMediaServer", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def unregisterMediaServer(self, entryId, hostname, mediaServerIndex):
        """Unregister media server from live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("hostname", hostname)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        self.client.queueServiceActionCall("livechannel", "unregisterMediaServer", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def validateRegisteredMediaServers(self, entryId):
        """Validates all registered media servers"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livechannel", "validateRegisteredMediaServers", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setRecordedContent(self, entryId, mediaServerIndex, resource, duration = 0):
        """Sey recorded video to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addFloatIfDefined("duration", duration)
        self.client.queueServiceActionCall("livestream", "setRecordedContent", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry), header


# @package Kaltura
# @subpackage Client
class KalturaLiveReportsService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getEvents(self, reportType, filter = NotImplemented, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livereports", "getEvents", KalturaReportGraph, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaReportGraph)

    def getReport(self, reportType, filter = NotImplemented, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livereports", "getReport", KalturaLiveStatsListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStatsListResponse)

    def exportToCsv(self, reportType, params):
        kparams = KalturaParams()
        kparams.addIntIfDefined("reportType", reportType);
        kparams.addObjectIfDefined("params", params)
        self.client.queueServiceActionCall("livereports", "exportToCsv", KalturaLiveReportExportResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveReportExportResponse)

    def serveReport(self, id):
        """Will serve a requested report"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("livereports", "serveReport", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaLiveStatsService(KalturaServiceBase):
    """Stats Service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def collect(self, event):
        """Will write to the event log a single line representing the event
        	 KalturaStatsEvent $event"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("event", event)
        self.client.queueServiceActionCall("livestats", "collect", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaLiveStreamService(KalturaServiceBase):
    """Live Stream service lets you manage live stream entries"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, liveStreamEntry, sourceType = NotImplemented):
        """Adds new live stream entry.
        	 The entry will be queued for provision."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("liveStreamEntry", liveStreamEntry)
        kparams.addStringIfDefined("sourceType", sourceType)
        self.client.queueServiceActionCall("livestream", "add", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def get(self, entryId, version = -1):
        """Get live stream entry by ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("livestream", "get", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry), header

    def authenticate(self, entryId, token, hostname = NotImplemented, mediaServerIndex = NotImplemented, applicationName = NotImplemented):
        """Authenticate live-stream entry against stream token and partner limitations"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("token", token)
        kparams.addStringIfDefined("hostname", hostname)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addStringIfDefined("applicationName", applicationName)
        self.client.queueServiceActionCall("livestream", "authenticate", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def update(self, entryId, liveStreamEntry):
        """Update live stream entry. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("liveStreamEntry", liveStreamEntry)
        self.client.queueServiceActionCall("livestream", "update", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def delete(self, entryId):
        """Delete a live stream entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livestream", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List live stream entries by filter with paging support."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("livestream", "list", KalturaLiveStreamListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamListResponse)

    def updateOfflineThumbnailJpeg(self, entryId, fileData):
        """Update live stream entry thumbnail using a raw jpeg file"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("livestream", "updateOfflineThumbnailJpeg", KalturaLiveStreamEntry, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def updateOfflineThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("livestream", "updateOfflineThumbnailFromUrl", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def isLive(self, id, protocol):
        """Delivering the status of a live stream (on-air/offline) if it is possible"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("protocol", protocol)
        self.client.queueServiceActionCall("livestream", "isLive", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def addLiveStreamPushPublishConfiguration(self, entryId, protocol, url = NotImplemented, liveStreamConfiguration = NotImplemented):
        """Add new pushPublish configuration to entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("protocol", protocol)
        kparams.addStringIfDefined("url", url)
        kparams.addObjectIfDefined("liveStreamConfiguration", liveStreamConfiguration)
        self.client.queueServiceActionCall("livestream", "addLiveStreamPushPublishConfiguration", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def removeLiveStreamPushPublishConfiguration(self, entryId, protocol):
        """Remove push publish configuration from entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("protocol", protocol)
        self.client.queueServiceActionCall("livestream", "removeLiveStreamPushPublishConfiguration", KalturaLiveStreamEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveStreamEntry)

    def appendRecording(self, entryId, assetId, mediaServerIndex, resource, duration, isLastChunk = False):
        """Append recorded video to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addFloatIfDefined("duration", duration)
        kparams.addBoolIfDefined("isLastChunk", isLastChunk);
        self.client.queueServiceActionCall("livestream", "appendRecording", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def registerMediaServer(self, entryId, hostname, mediaServerIndex, applicationName = NotImplemented, liveEntryStatus = 1):
        """Register media server to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("hostname", hostname)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addStringIfDefined("applicationName", applicationName)
        kparams.addIntIfDefined("liveEntryStatus", liveEntryStatus);
        self.client.queueServiceActionCall("livestream", "registerMediaServer", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def unregisterMediaServer(self, entryId, hostname, mediaServerIndex):
        """Unregister media server from live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("hostname", hostname)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        self.client.queueServiceActionCall("livestream", "unregisterMediaServer", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry)

    def validateRegisteredMediaServers(self, entryId):
        """Validates all registered media servers"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("livestream", "validateRegisteredMediaServers", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setRecordedContent(self, entryId, mediaServerIndex, resource, duration = 0):
        """Sey recorded video to live entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("mediaServerIndex", mediaServerIndex)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addFloatIfDefined("duration", duration)
        self.client.queueServiceActionCall("livestream", "setRecordedContent", KalturaLiveEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaLiveEntry), header

    def createPeriodicSyncPoints(self, entryId, interval, duration):
        """Creates perioding metadata sync-point events on a live stream"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("interval", interval);
        kparams.addIntIfDefined("duration", duration);
        self.client.queueServiceActionCall("livestream", "createPeriodicSyncPoints", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaMediaInfoService(KalturaServiceBase):
    """Media Info service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List media info objects by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("mediainfo", "list", KalturaMediaInfoListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaInfoListResponse)


# @package Kaltura
# @subpackage Client
class KalturaMediaService(KalturaServiceBase):
    """Media service lets you upload and manage media files (images / videos & audio)"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, entry):
        """Add entry"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("entry", entry)
        self.client.queueServiceActionCall("media", "add", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addContent(self, entryId, resource = NotImplemented):
        """Add content to media entry which is not yet associated with content (therefore is in status NO_CONTENT).
             If the requirement is to replace the entry's associated content, use action updateContent."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("resource", resource)
        self.client.queueServiceActionCall("media", "addContent", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry), header

    def addFromBulk(self, mediaEntry, url, bulkUploadId):
        """Adds new media entry by importing an HTTP or FTP URL.
        	 The entry will be queued for import and then for conversion.
        	 This action should be exposed only to the batches"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addStringIfDefined("url", url)
        kparams.addIntIfDefined("bulkUploadId", bulkUploadId);
        self.client.queueServiceActionCall("media", "addFromBulk", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromUrl(self, mediaEntry, url):
        """Adds new media entry by importing an HTTP or FTP URL.
        	 The entry will be queued for import and then for conversion."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("media", "addFromUrl", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromSearchResult(self, mediaEntry = NotImplemented, searchResult = NotImplemented):
        """Adds new media entry by importing the media file from a search provider.
        	 This action should be used with the search service result."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addObjectIfDefined("searchResult", searchResult)
        self.client.queueServiceActionCall("media", "addFromSearchResult", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromUploadedFile(self, mediaEntry, uploadTokenId):
        """Add new entry after the specific media file was uploaded and the upload token id exists"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("media", "addFromUploadedFile", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromRecordedWebcam(self, mediaEntry, webcamTokenId):
        """Add new entry after the file was recored on the server and the token id exists"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addStringIfDefined("webcamTokenId", webcamTokenId)
        self.client.queueServiceActionCall("media", "addFromRecordedWebcam", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromEntry(self, sourceEntryId, mediaEntry = NotImplemented, sourceFlavorParamsId = NotImplemented):
        """Copy entry into new entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        kparams.addIntIfDefined("sourceFlavorParamsId", sourceFlavorParamsId);
        self.client.queueServiceActionCall("media", "addFromEntry", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def addFromFlavorAsset(self, sourceFlavorAssetId, mediaEntry = NotImplemented):
        """Copy flavor asset into new entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("sourceFlavorAssetId", sourceFlavorAssetId)
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        self.client.queueServiceActionCall("media", "addFromFlavorAsset", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def convert(self, entryId, conversionProfileId = NotImplemented, dynamicConversionAttributes = NotImplemented):
        """Convert entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        kparams.addArrayIfDefined("dynamicConversionAttributes", dynamicConversionAttributes)
        self.client.queueServiceActionCall("media", "convert", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def get(self, entryId, version = -1):
        """Get media entry by ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("media", "get", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry), header

    def getMrss(self, entryId, extendingItemsArray = NotImplemented, features = NotImplemented):
        """Get MRSS by entry id
             XML will return as an escaped string"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addArrayIfDefined("extendingItemsArray", extendingItemsArray)
        kparams.addStringIfDefined("features", features)
        self.client.queueServiceActionCall("media", "getMrss", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def update(self, entryId, mediaEntry):
        """Update media entry. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("mediaEntry", mediaEntry)
        self.client.queueServiceActionCall("media", "update", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry), header

    def updateContent(self, entryId, resource, conversionProfileId = NotImplemented, advancedOptions = NotImplemented):
        """Replace content associated with the media entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("resource", resource)
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        kparams.addObjectIfDefined("advancedOptions", advancedOptions)
        self.client.queueServiceActionCall("media", "updateContent", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry), header

    def delete(self, entryId):
        """Delete a media entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approveReplace(self, entryId):
        """Approves media replacement"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "approveReplace", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def cancelReplace(self, entryId):
        """Cancels media replacement"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "cancelReplace", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry), header

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List media entries by filter with paging support."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("media", "list", KalturaMediaListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaListResponse)

    def count(self, filter = NotImplemented):
        """Count media entries by filter."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("media", "count", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def upload(self, fileData):
        """Upload a media file to Kaltura, then the file can be used to create a media entry."""

        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("media", "upload", None, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateThumbnail(self, entryId, timeOffset, flavorParamsId = NotImplemented):
        """Update media entry thumbnail by a specified time offset (In seconds)
        	 If flavor params id not specified, source flavor will be used by default"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("timeOffset", timeOffset);
        kparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        self.client.queueServiceActionCall("media", "updateThumbnail", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def updateThumbnailFromSourceEntry(self, entryId, sourceEntryId, timeOffset, flavorParamsId = NotImplemented):
        """Update media entry thumbnail from a different entry by a specified time offset (In seconds)
        	 If flavor params id not specified, source flavor will be used by default"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("sourceEntryId", sourceEntryId)
        kparams.addIntIfDefined("timeOffset", timeOffset);
        kparams.addIntIfDefined("flavorParamsId", flavorParamsId);
        self.client.queueServiceActionCall("media", "updateThumbnailFromSourceEntry", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def updateThumbnailJpeg(self, entryId, fileData):
        """Update media entry thumbnail using a raw jpeg file"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("media", "updateThumbnailJpeg", KalturaMediaEntry, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMediaEntry)

    def updateThumbnailFromUrl(self, entryId, url):
        """Update entry thumbnail using url"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("media", "updateThumbnailFromUrl", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseEntry)

    def requestConversion(self, entryId, fileFormat):
        """Request a new conversion job, this can be used to convert the media entry to a different format"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("fileFormat", fileFormat)
        self.client.queueServiceActionCall("media", "requestConversion", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def flag(self, moderationFlag):
        """Flag inappropriate media entry for moderation"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("moderationFlag", moderationFlag)
        self.client.queueServiceActionCall("media", "flag", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reject(self, entryId):
        """Reject the media entry and mark the pending flags (if any) as moderated (this will make the entry non playable)"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "reject", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def approve(self, entryId):
        """Approve the media entry and mark the pending flags (if any) as moderated (this will make the entry playable)"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("media", "approve", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def listFlags(self, entryId, pager = NotImplemented):
        """List all pending flags for the media entry"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("media", "listFlags", KalturaModerationFlagListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaModerationFlagListResponse)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank a media entry, no validation is done on duplicate rankings"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("media", "anonymousRank", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def bulkUploadAdd(self, fileData, bulkUploadData = NotImplemented, bulkUploadEntryData = NotImplemented):
        """Add new bulk upload batch job
        	 Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
        	 If no conversion profile was specified, partner's default will be used"""

        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        kparams.addObjectIfDefined("bulkUploadEntryData", bulkUploadEntryData)
        self.client.queueServiceActionCall("media", "bulkUploadAdd", KalturaBulkUpload, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)


# @package Kaltura
# @subpackage Client
class KalturaMixingService(KalturaServiceBase):
    """A Mix is an XML unique format invented by Kaltura, it allows the user to create a mix of videos and images, in and out points, transitions, text overlays, soundtrack, effects and much more...
     Mixing service lets you create a new mix, manage its metadata and make basic manipulations."""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, mixEntry):
        """Adds a new mix.
        	 If the dataContent is null, a default timeline will be created."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("mixEntry", mixEntry)
        self.client.queueServiceActionCall("mixing", "add", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixEntry)

    def get(self, entryId, version = -1):
        """Get mix entry by id."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("mixing", "get", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixEntry)

    def update(self, entryId, mixEntry):
        """Update mix entry. Only the properties that were set will be updated."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("mixEntry", mixEntry)
        self.client.queueServiceActionCall("mixing", "update", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixEntry)

    def delete(self, entryId):
        """Delete a mix entry."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("mixing", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List entries by filter with paging support.
        	 Return parameter is an array of mix entries."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("mixing", "list", KalturaMixListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixListResponse)

    def count(self, filter = NotImplemented):
        """Count mix entries by filter."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("mixing", "count", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def clone(self, entryId):
        """Clones an existing mix."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("mixing", "clone", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixEntry)

    def appendMediaEntry(self, mixEntryId, mediaEntryId):
        """Appends a media entry to a the end of the mix timeline, this will save the mix timeline as a new version."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("mixEntryId", mixEntryId)
        kparams.addStringIfDefined("mediaEntryId", mediaEntryId)
        self.client.queueServiceActionCall("mixing", "appendMediaEntry", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaMixEntry)

    def getMixesByMediaId(self, mediaEntryId):
        """Get the mixes in which the media entry is included"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("mediaEntryId", mediaEntryId)
        self.client.queueServiceActionCall("mixing", "getMixesByMediaId", KalturaMixEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaMixEntry)

    def getReadyMediaEntries(self, mixId, version = -1):
        """Get all ready media entries that exist in the given mix id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("mixId", mixId)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("mixing", "getReadyMediaEntries", KalturaMediaEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaMediaEntry)

    def anonymousRank(self, entryId, rank):
        """Anonymously rank a mix entry, no validation is done on duplicate rankings"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("rank", rank);
        self.client.queueServiceActionCall("mixing", "anonymousRank", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaNotificationService(KalturaServiceBase):
    """Notification Service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getClientNotification(self, entryId, type):
        """Return the notifications for a specific entry id and type"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("type", type);
        self.client.queueServiceActionCall("notification", "getClientNotification", KalturaClientNotification, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaClientNotification)


# @package Kaltura
# @subpackage Client
class KalturaPartnerService(KalturaServiceBase):
    """partner service allows you to change/manage your partner personal details and settings as well"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def register(self, partner, cmsPassword = "", templatePartnerId = NotImplemented, silent = False):
        """Create a new Partner object"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("partner", partner)
        kparams.addStringIfDefined("cmsPassword", cmsPassword)
        kparams.addIntIfDefined("templatePartnerId", templatePartnerId);
        kparams.addBoolIfDefined("silent", silent);
        self.client.queueServiceActionCall("partner", "register", KalturaPartner, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartner)

    def update(self, partner, allowEmpty = False):
        """Update details and settings of an existing partner"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("partner", partner)
        kparams.addBoolIfDefined("allowEmpty", allowEmpty);
        self.client.queueServiceActionCall("partner", "update", KalturaPartner, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartner)

    def get(self, id = NotImplemented):
        """Retrieve partner object by Id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("partner", "get", KalturaPartner, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartner)

    def getSecrets(self, partnerId, adminEmail, cmsPassword):
        """Retrieve partner secret and admin secret"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("adminEmail", adminEmail)
        kparams.addStringIfDefined("cmsPassword", cmsPassword)
        self.client.queueServiceActionCall("partner", "getSecrets", KalturaPartner, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartner)

    def getInfo(self):
        """Retrieve all info attributed to the partner
        	 This action expects no parameters. It returns information for the current KS partnerId."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partner", "getInfo", KalturaPartner, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartner)

    def getUsage(self, year = "", month = 1, resolution = NotImplemented):
        """Get usage statistics for a partner
        	 Calculation is done according to partner's package
        	 Additional data returned is a graph points of streaming usage in a timeframe
        	 The resolution can be "days" or "months" """

        kparams = KalturaParams()
        kparams.addIntIfDefined("year", year);
        kparams.addIntIfDefined("month", month);
        kparams.addStringIfDefined("resolution", resolution)
        self.client.queueServiceActionCall("partner", "getUsage", KalturaPartnerUsage, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartnerUsage)

    def getStatistics(self):
        """Get usage statistics for a partner
        	 Calculation is done according to partner's package"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partner", "getStatistics", KalturaPartnerStatistics, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartnerStatistics)

    def listPartnersForUser(self, partnerFilter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of partner objects which the current user is allowed to access."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("partnerFilter", partnerFilter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("partner", "listPartnersForUser", KalturaPartnerListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartnerListResponse)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List partners by filter with paging support
        	 Current implementation will only list the sub partners of the partner initiating the api call (using the current KS).
        	 This action is only partially implemented to support listing sub partners of a VAR partner."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("partner", "list", KalturaPartnerListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPartnerListResponse)

    def listFeatureStatus(self):
        """List partner's current processes' statuses"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("partner", "listFeatureStatus", KalturaFeatureStatusListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFeatureStatusListResponse)

    def count(self, filter = NotImplemented):
        """Count partner's existing sub-publishers (count includes the partner itself)."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("partner", "count", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaPermissionItemService(KalturaServiceBase):
    """PermissionItem service lets you create and manage permission items"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, permissionItem):
        """Adds a new permission item object to the account.
        	 This action is available only to Kaltura system administrators."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("permissionItem", permissionItem)
        self.client.queueServiceActionCall("permissionitem", "add", KalturaPermissionItem, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionItem)

    def get(self, permissionItemId):
        """Retrieves a permission item object using its ID."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permissionitem", "get", KalturaPermissionItem, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionItem)

    def update(self, permissionItemId, permissionItem):
        """Updates an existing permission item object.
        	 This action is available only to Kaltura system administrators."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("permissionItemId", permissionItemId);
        kparams.addObjectIfDefined("permissionItem", permissionItem)
        self.client.queueServiceActionCall("permissionitem", "update", KalturaPermissionItem, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionItem)

    def delete(self, permissionItemId):
        """Deletes an existing permission item object.
        	 This action is available only to Kaltura system administrators."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("permissionItemId", permissionItemId);
        self.client.queueServiceActionCall("permissionitem", "delete", KalturaPermissionItem, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionItem)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists permission item objects that are associated with an account."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("permissionitem", "list", KalturaPermissionItemListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionItemListResponse)


# @package Kaltura
# @subpackage Client
class KalturaPermissionService(KalturaServiceBase):
    """Permission service lets you create and manage user permissions"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, permission):
        """Adds a new permission object to the account."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "add", KalturaPermission, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermission)

    def get(self, permissionName):
        """Retrieves a permission object using its ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("permissionName", permissionName)
        self.client.queueServiceActionCall("permission", "get", KalturaPermission, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermission)

    def update(self, permissionName, permission):
        """Updates an existing permission object."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("permissionName", permissionName)
        kparams.addObjectIfDefined("permission", permission)
        self.client.queueServiceActionCall("permission", "update", KalturaPermission, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermission)

    def delete(self, permissionName):
        """Deletes an existing permission object."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("permissionName", permissionName)
        self.client.queueServiceActionCall("permission", "delete", KalturaPermission, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermission)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists permission objects that are associated with an account.
        	 Blocked permissions are listed unless you use a filter to exclude them.
        	 Blocked permissions are listed unless you use a filter to exclude them."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("permission", "list", KalturaPermissionListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPermissionListResponse)

    def getCurrentPermissions(self):
        """Retrieves a list of permissions that apply to the current KS."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("permission", "getCurrentPermissions", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaPlaylistService(KalturaServiceBase):
    """Playlist service lets you create,manage and play your playlists
     Playlists could be static (containing a fixed list of entries) or dynamic (baseed on a filter)"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, playlist, updateStats = False):
        """Add new playlist
        	 Note that all entries used in a playlist will become public and may appear in KalturaNetwork"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("playlist", playlist)
        kparams.addBoolIfDefined("updateStats", updateStats);
        self.client.queueServiceActionCall("playlist", "add", KalturaPlaylist, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylist)

    def get(self, id, version = -1):
        """Retrieve a playlist"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addIntIfDefined("version", version);
        self.client.queueServiceActionCall("playlist", "get", KalturaPlaylist, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylist)

    def update(self, id, playlist, updateStats = False):
        """Update existing playlist
        	 Note - you cannot change playlist type. updated playlist must be of the same type."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("playlist", playlist)
        kparams.addBoolIfDefined("updateStats", updateStats);
        self.client.queueServiceActionCall("playlist", "update", KalturaPlaylist, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylist)

    def delete(self, id):
        """Delete existing playlist"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("playlist", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def clone(self, id, newPlaylist = NotImplemented):
        """Clone an existing playlist"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("newPlaylist", newPlaylist)
        self.client.queueServiceActionCall("playlist", "clone", KalturaPlaylist, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylist)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List available playlists"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "list", KalturaPlaylistListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylistListResponse)

    def execute(self, id, detailed = "", playlistContext = NotImplemented, filter = NotImplemented, pager = NotImplemented):
        """Retrieve playlist for playing purpose"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addStringIfDefined("detailed", detailed)
        kparams.addObjectIfDefined("playlistContext", playlistContext)
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "execute", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaBaseEntry)

    def executeFromContent(self, playlistType, playlistContent, detailed = "", pager = NotImplemented):
        """Retrieve playlist for playing purpose, based on content"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("playlistType", playlistType);
        kparams.addStringIfDefined("playlistContent", playlistContent)
        kparams.addStringIfDefined("detailed", detailed)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "executeFromContent", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaBaseEntry)

    def executeFromFilters(self, filters, totalResults, detailed = "1", pager = NotImplemented):
        """Revrieve playlist for playing purpose, based on media entry filters"""

        kparams = KalturaParams()
        kparams.addArrayIfDefined("filters", filters)
        kparams.addIntIfDefined("totalResults", totalResults);
        kparams.addStringIfDefined("detailed", detailed)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("playlist", "executeFromFilters", KalturaBaseEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaBaseEntry)

    def getStatsFromContent(self, playlistType, playlistContent):
        """Retrieve playlist statistics"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("playlistType", playlistType);
        kparams.addStringIfDefined("playlistContent", playlistContent)
        self.client.queueServiceActionCall("playlist", "getStatsFromContent", KalturaPlaylist, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaPlaylist)


# @package Kaltura
# @subpackage Client
class KalturaReportService(KalturaServiceBase):
    """api for getting reports data by the report type and some inputFilter"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def getGraphs(self, reportType, reportInputFilter, dimension = NotImplemented, objectIds = NotImplemented):
        """report getGraphs action allows to get a graph data for a specific report."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        kparams.addStringIfDefined("dimension", dimension)
        kparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getGraphs", KalturaReportGraph, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaReportGraph)

    def getTotal(self, reportType, reportInputFilter, objectIds = NotImplemented):
        """report getTotal action allows to get a graph data for a specific report."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        kparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getTotal", KalturaReportTotal, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaReportTotal)

    def getBaseTotal(self, reportType, reportInputFilter, objectIds = NotImplemented):
        """report getBaseTotal action allows to get a the total base for storage reports"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        kparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getBaseTotal", KalturaReportBaseTotal, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaReportBaseTotal)

    def getTable(self, reportType, reportInputFilter, pager, order = NotImplemented, objectIds = NotImplemented):
        """report getTable action allows to get a graph data for a specific report."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        kparams.addObjectIfDefined("pager", pager)
        kparams.addStringIfDefined("order", order)
        kparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getTable", KalturaReportTable, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaReportTable)

    def getUrlForReportAsCsv(self, reportTitle, reportText, headers, reportType, reportInputFilter, dimension = NotImplemented, pager = NotImplemented, order = NotImplemented, objectIds = NotImplemented):
        """will create a Csv file for the given report and return the URL to access it"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("reportTitle", reportTitle)
        kparams.addStringIfDefined("reportText", reportText)
        kparams.addStringIfDefined("headers", headers)
        kparams.addStringIfDefined("reportType", reportType)
        kparams.addObjectIfDefined("reportInputFilter", reportInputFilter)
        kparams.addStringIfDefined("dimension", dimension)
        kparams.addObjectIfDefined("pager", pager)
        kparams.addStringIfDefined("order", order)
        kparams.addStringIfDefined("objectIds", objectIds)
        self.client.queueServiceActionCall("report", "getUrlForReportAsCsv", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def serve(self, id):
        """Will serve a requested report"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("report", "serve", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def execute(self, id, params = NotImplemented):
        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addArrayIfDefined("params", params)
        self.client.queueServiceActionCall("report", "execute", KalturaReportResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaReportResponse)

    def getCsv(self, id, params = NotImplemented):
        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addArrayIfDefined("params", params)
        self.client.queueServiceActionCall('report', 'getCsv', None ,kparams)
        return self.client.getServeUrl()

    def getCsvFromStringParams(self, id, params = NotImplemented):
        """Returns report CSV file executed by string params with the following convention: param1=value1;param2=value2"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addStringIfDefined("params", params)
        self.client.queueServiceActionCall('report', 'getCsvFromStringParams', None ,kparams)
        return self.client.getServeUrl()


# @package Kaltura
# @subpackage Client
class KalturaResponseProfileService(KalturaServiceBase):
    """Manage response profiles"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, addResponseProfile):
        """Add new response profile"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("addResponseProfile", addResponseProfile)
        self.client.queueServiceActionCall("responseprofile", "add", KalturaResponseProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfile)

    def get(self, id):
        """Get response profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("responseprofile", "get", KalturaResponseProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfile)

    def update(self, id, updateResponseProfile):
        """Update response profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("updateResponseProfile", updateResponseProfile)
        self.client.queueServiceActionCall("responseprofile", "update", KalturaResponseProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfile)

    def updateStatus(self, id, status):
        """Update response profile status by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addIntIfDefined("status", status);
        self.client.queueServiceActionCall("responseprofile", "updateStatus", KalturaResponseProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfile)

    def delete(self, id):
        """Delete response profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("responseprofile", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List response profiles by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("responseprofile", "list", KalturaResponseProfileListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfileListResponse)

    def recalculate(self, options):
        """Recalculate response profile cached objects"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall("responseprofile", "recalculate", KalturaResponseProfileCacheRecalculateResults, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfileCacheRecalculateResults)

    def clone(self, id, profile):
        """Clone an existing response profile"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("profile", profile)
        self.client.queueServiceActionCall("responseprofile", "clone", KalturaResponseProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaResponseProfile)


# @package Kaltura
# @subpackage Client
class KalturaSchemaService(KalturaServiceBase):
    """Expose the schema definitions for syndication MRSS, bulk upload XML and other schema types."""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def serve(self, type):
        """Serves the requested XSD according to the type and name."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("type", type)
        self.client.queueServiceActionCall('schema', 'serve', None ,kparams)
        return self.client.getServeUrl()


# @package Kaltura
# @subpackage Client
class KalturaSearchService(KalturaServiceBase):
    """Search service allows you to search for media in various media providers
     This service is being used mostly by the CW component"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def search(self, search, pager = NotImplemented):
        """Search for media in one of the supported media providers"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("search", search)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("search", "search", KalturaSearchResultResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSearchResultResponse)

    def getMediaInfo(self, searchResult):
        """Retrieve extra information about media found in search action
        	 Some providers return only part of the fields needed to create entry from, use this action to get the rest of the fields."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("searchResult", searchResult)
        self.client.queueServiceActionCall("search", "getMediaInfo", KalturaSearchResult, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSearchResult)

    def searchUrl(self, mediaType, url):
        """Search for media given a specific URL
        	 Kaltura supports a searchURL action on some of the media providers.
        	 This action will return a KalturaSearchResult object based on a given URL (assuming the media provider is supported)"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("mediaType", mediaType);
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("search", "searchUrl", KalturaSearchResult, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSearchResult)

    def externalLogin(self, searchSource, userName, password):
        kparams = KalturaParams()
        kparams.addIntIfDefined("searchSource", searchSource);
        kparams.addStringIfDefined("userName", userName)
        kparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("search", "externalLogin", KalturaSearchAuthData, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSearchAuthData)


# @package Kaltura
# @subpackage Client
class KalturaServerNodeService(KalturaServiceBase):
    """Server Node service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, serverNode):
        """Adds a server node to the Kaltura DB."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "add", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)

    def get(self, serverNodeId):
        """Get server node by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("serverNodeId", serverNodeId);
        self.client.queueServiceActionCall("servernode", "get", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)

    def update(self, serverNodeId, serverNode):
        """Update server node by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("serverNodeId", serverNodeId);
        kparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "update", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)

    def delete(self, serverNodeId):
        """delete server node by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def disable(self, serverNodeId):
        """Disable server node by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "disable", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)

    def enable(self, serverNodeId):
        """Enable server node by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("serverNodeId", serverNodeId)
        self.client.queueServiceActionCall("servernode", "enable", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("servernode", "list", KalturaServerNodeListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNodeListResponse)

    def reportStatus(self, hostName, serverNode = NotImplemented):
        """Update server node status"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("hostName", hostName)
        kparams.addObjectIfDefined("serverNode", serverNode)
        self.client.queueServiceActionCall("servernode", "reportStatus", KalturaServerNode, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaServerNode)


# @package Kaltura
# @subpackage Client
class KalturaSessionService(KalturaServiceBase):
    """Session service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def start(self, secret, userId = "", type = 0, partnerId = NotImplemented, expiry = 86400, privileges = NotImplemented):
        """Start a session with Kaltura's server.
        	 The result KS is the session key that you should pass to all services that requires a ticket."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("secret", secret)
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("type", type);
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "start", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return (getXmlNodeText(resultNode[0]), resultNode[1])

    def end(self):
        """End a session with the Kaltura server, making the current KS invalid."""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("session", "end", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def impersonate(self, secret, impersonatedPartnerId, userId = "", type = 0, partnerId = NotImplemented, expiry = 86400, privileges = NotImplemented):
        """Start an impersonated session with Kaltura's server.
        	 The result KS is the session key that you should pass to all services that requires a ticket."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("secret", secret)
        kparams.addIntIfDefined("impersonatedPartnerId", impersonatedPartnerId);
        kparams.addStringIfDefined("userId", userId)
        kparams.addIntIfDefined("type", type);
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "impersonate", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def impersonateByKs(self, session, type = NotImplemented, expiry = NotImplemented, privileges = NotImplemented):
        """Start an impersonated session with Kaltura's server.
        	 The result KS info contains the session key that you should pass to all services that requires a ticket.
        	 Type, expiry and privileges won't be changed if they're not set"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("session", session)
        kparams.addIntIfDefined("type", type);
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("session", "impersonateByKs", KalturaSessionInfo, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSessionInfo)

    def get(self, session = NotImplemented):
        """Parse session key and return its info"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("session", session)
        self.client.queueServiceActionCall("session", "get", KalturaSessionInfo, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSessionInfo)

    def startWidgetSession(self, widgetId, expiry = 86400):
        """Start a session for Kaltura's flash widgets"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("widgetId", widgetId)
        kparams.addIntIfDefined("expiry", expiry);
        self.client.queueServiceActionCall("session", "startWidgetSession", KalturaStartWidgetSessionResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaStartWidgetSessionResponse)


# @package Kaltura
# @subpackage Client
class KalturaStatsService(KalturaServiceBase):
    """Stats Service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def collect(self, event):
        """Will write to the event log a single line representing the event
        	 client version - will help interprete the line structure. different client versions might have slightly different data/data formats in the line
        event_id - number is the row number in yuval's excel
        datetime - same format as MySql's datetime - can change and should reflect the time zone
        session id - can be some big random number or guid
        partner id
        entry id
        unique viewer
        widget id
        ui_conf id
        uid - the puser id as set by the ppartner
        current point - in milliseconds
        duration - milliseconds
        user ip
        process duration - in milliseconds
        control id
        seek
        new point
        referrer
        	
        	
        	 KalturaStatsEvent $event"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("event", event)
        self.client.queueServiceActionCall("stats", "collect", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def kmcCollect(self, kmcEvent):
        """Will collect the kmcEvent sent form the KMC client
        	 // this will actually be an empty function because all events will be sent using GET and will anyway be logged in the apache log"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("kmcEvent", kmcEvent)
        self.client.queueServiceActionCall("stats", "kmcCollect", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def reportKceError(self, kalturaCEError):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("kalturaCEError", kalturaCEError)
        self.client.queueServiceActionCall("stats", "reportKceError", KalturaCEError, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaCEError)

    def reportError(self, errorCode, errorMessage):
        """Use this action to report errors to the kaltura server."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("errorCode", errorCode)
        kparams.addStringIfDefined("errorMessage", errorMessage)
        self.client.queueServiceActionCall("stats", "reportError", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()


# @package Kaltura
# @subpackage Client
class KalturaStorageProfileService(KalturaServiceBase):
    """Storage Profiles service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, storageProfile):
        """Adds a storage profile to the Kaltura DB."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("storageProfile", storageProfile)
        self.client.queueServiceActionCall("storageprofile", "add", KalturaStorageProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaStorageProfile)

    def updateStatus(self, storageId, status):
        kparams = KalturaParams()
        kparams.addIntIfDefined("storageId", storageId);
        kparams.addIntIfDefined("status", status);
        self.client.queueServiceActionCall("storageprofile", "updateStatus", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def get(self, storageProfileId):
        """Get storage profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("storageprofile", "get", KalturaStorageProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaStorageProfile)

    def update(self, storageProfileId, storageProfile):
        """Update storage profile by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("storageProfileId", storageProfileId);
        kparams.addObjectIfDefined("storageProfile", storageProfile)
        self.client.queueServiceActionCall("storageprofile", "update", KalturaStorageProfile, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaStorageProfile)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("storageprofile", "list", KalturaStorageProfileListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaStorageProfileListResponse)


# @package Kaltura
# @subpackage Client
class KalturaSyndicationFeedService(KalturaServiceBase):
    """Add & Manage Syndication Feeds"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, syndicationFeed):
        """Add new Syndication Feed"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("syndicationFeed", syndicationFeed)
        self.client.queueServiceActionCall("syndicationfeed", "add", KalturaBaseSyndicationFeed, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseSyndicationFeed)

    def get(self, id):
        """Get Syndication Feed by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("syndicationfeed", "get", KalturaBaseSyndicationFeed, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseSyndicationFeed)

    def update(self, id, syndicationFeed):
        """Update Syndication Feed by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("syndicationFeed", syndicationFeed)
        self.client.queueServiceActionCall("syndicationfeed", "update", KalturaBaseSyndicationFeed, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseSyndicationFeed)

    def delete(self, id):
        """Delete Syndication Feed by ID"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("syndicationfeed", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Syndication Feeds by filter with paging support"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("syndicationfeed", "list", KalturaBaseSyndicationFeedListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBaseSyndicationFeedListResponse)

    def getEntryCount(self, feedId):
        """get entry count for a syndication feed"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("feedId", feedId)
        self.client.queueServiceActionCall("syndicationfeed", "getEntryCount", KalturaSyndicationFeedEntryCount, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaSyndicationFeedEntryCount)

    def requestConversion(self, feedId):
        """request conversion for all entries that doesnt have the required flavor param
        	 returns a comma-separated ids of conversion jobs"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("feedId", feedId)
        self.client.queueServiceActionCall("syndicationfeed", "requestConversion", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaSystemService(KalturaServiceBase):
    """System service is used for internal system helpers & to retrieve system level information"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def ping(self):
        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "ping", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def pingDatabase(self):
        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "pingDatabase", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)

    def getTime(self):
        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "getTime", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeInt(resultNode)

    def getVersion(self):
        kparams = KalturaParams()
        self.client.queueServiceActionCall("system", "getVersion", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaThumbAssetService(KalturaServiceBase):
    """Retrieve information and invoke actions on Thumb Asset"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, entryId, thumbAsset):
        """Add thumbnail asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("thumbAsset", thumbAsset)
        self.client.queueServiceActionCall("thumbasset", "add", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def setContent(self, id, contentResource):
        """Update content of thumbnail asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("contentResource", contentResource)
        self.client.queueServiceActionCall("thumbasset", "setContent", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def update(self, id, thumbAsset):
        """Update thumbnail asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("thumbAsset", thumbAsset)
        self.client.queueServiceActionCall("thumbasset", "update", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def serveByEntryId(self, entryId, thumbParamId = NotImplemented):
        """Serves thumbnail by entry id and thumnail params id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("thumbParamId", thumbParamId);
        self.client.queueServiceActionCall('thumbasset', 'serveByEntryId', None ,kparams)
        return self.client.getServeUrl()

    def serve(self, thumbAssetId, version = NotImplemented, thumbParams = NotImplemented, options = NotImplemented):
        """Serves thumbnail by its id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        kparams.addIntIfDefined("version", version);
        kparams.addObjectIfDefined("thumbParams", thumbParams)
        kparams.addObjectIfDefined("options", options)
        self.client.queueServiceActionCall('thumbasset', 'serve', None ,kparams)
        return self.client.getServeUrl()

    def setAsDefault(self, thumbAssetId):
        """Tags the thumbnail as DEFAULT_THUMB and removes that tag from all other thumbnail assets of the entry.
        	 Create a new file sync link on the entry thumbnail that points to the thumbnail asset file sync."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "setAsDefault", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def generateByEntryId(self, entryId, destThumbParamsId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addIntIfDefined("destThumbParamsId", destThumbParamsId);
        self.client.queueServiceActionCall("thumbasset", "generateByEntryId", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def generate(self, entryId, thumbParams, sourceAssetId = NotImplemented):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addObjectIfDefined("thumbParams", thumbParams)
        kparams.addStringIfDefined("sourceAssetId", sourceAssetId)
        self.client.queueServiceActionCall("thumbasset", "generate", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def regenerate(self, thumbAssetId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "regenerate", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def get(self, thumbAssetId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "get", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def getByEntryId(self, entryId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        self.client.queueServiceActionCall("thumbasset", "getByEntryId", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaThumbAsset)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Thumbnail Assets by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbasset", "list", KalturaThumbAssetListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAssetListResponse)

    def addFromUrl(self, entryId, url):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kparams.addStringIfDefined("url", url)
        self.client.queueServiceActionCall("thumbasset", "addFromUrl", KalturaThumbAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def addFromImage(self, entryId, fileData):
        kparams = KalturaParams()
        kparams.addStringIfDefined("entryId", entryId)
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("thumbasset", "addFromImage", KalturaThumbAsset, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbAsset)

    def delete(self, thumbAssetId):
        kparams = KalturaParams()
        kparams.addStringIfDefined("thumbAssetId", thumbAssetId)
        self.client.queueServiceActionCall("thumbasset", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def getUrl(self, id, storageId = NotImplemented, thumbParams = NotImplemented):
        """Get download URL for the asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addIntIfDefined("storageId", storageId);
        kparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbasset", "getUrl", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getRemotePaths(self, id):
        """Get remote storage existing paths for the asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("thumbasset", "getRemotePaths", KalturaRemotePathListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaRemotePathListResponse)

    def export(self, assetId, storageProfileId):
        """manually export an asset"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("assetId", assetId)
        kparams.addIntIfDefined("storageProfileId", storageProfileId);
        self.client.queueServiceActionCall("thumbasset", "export", KalturaFlavorAsset, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaFlavorAsset)


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsOutputService(KalturaServiceBase):
    """Thumbnail Params Output service"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def get(self, id):
        """Get thumb params output object by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparamsoutput", "get", KalturaThumbParamsOutput, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParamsOutput)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List thumb params output objects by filter and pager"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbparamsoutput", "list", KalturaThumbParamsOutputListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParamsOutputListResponse)


# @package Kaltura
# @subpackage Client
class KalturaThumbParamsService(KalturaServiceBase):
    """Add & Manage Thumb Params"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, thumbParams):
        """Add new Thumb Params"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbparams", "add", KalturaThumbParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParams)

    def get(self, id):
        """Get Thumb Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparams", "get", KalturaThumbParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParams)

    def update(self, id, thumbParams):
        """Update Thumb Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("thumbParams", thumbParams)
        self.client.queueServiceActionCall("thumbparams", "update", KalturaThumbParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParams)

    def delete(self, id):
        """Delete Thumb Params by ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("thumbparams", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List Thumb Params by filter with paging support (By default - all system default params will be listed too)"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("thumbparams", "list", KalturaThumbParamsListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaThumbParamsListResponse)

    def getByConversionProfileId(self, conversionProfileId):
        """Get Thumb Params by Conversion Profile ID"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("conversionProfileId", conversionProfileId);
        self.client.queueServiceActionCall("thumbparams", "getByConversionProfileId", KalturaThumbParams, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaThumbParams)


# @package Kaltura
# @subpackage Client
class KalturaUiConfService(KalturaServiceBase):
    """UiConf service lets you create and manage your UIConfs for the various flash components
     This service is used by the KMC-ApplicationStudio"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, uiConf):
        """UIConf Add action allows you to add a UIConf to Kaltura DB"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("uiConf", uiConf)
        self.client.queueServiceActionCall("uiconf", "add", KalturaUiConf, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConf)

    def update(self, id, uiConf):
        """Update an existing UIConf"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("uiConf", uiConf)
        self.client.queueServiceActionCall("uiconf", "update", KalturaUiConf, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConf)

    def get(self, id):
        """Retrieve a UIConf by id"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "get", KalturaUiConf, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConf)

    def delete(self, id):
        """Delete an existing UIConf"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def clone(self, id):
        """Clone an existing UIConf"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("uiconf", "clone", KalturaUiConf, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConf)

    def listTemplates(self, filter = NotImplemented, pager = NotImplemented):
        """retrieve a list of available template UIConfs"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uiconf", "listTemplates", KalturaUiConfListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConfListResponse)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available UIConfs"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uiconf", "list", KalturaUiConfListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUiConfListResponse)

    def getAvailableTypes(self):
        """Retrieve a list of all available versions by object type"""

        kparams = KalturaParams()
        self.client.queueServiceActionCall("uiconf", "getAvailableTypes", KalturaUiConfTypeInfo, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.createArray(resultNode, KalturaUiConfTypeInfo)


# @package Kaltura
# @subpackage Client
class KalturaUploadService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def upload(self, fileData):
        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        self.client.queueServiceActionCall("upload", "upload", None, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def getUploadedFileTokenByFileName(self, fileName):
        kparams = KalturaParams()
        kparams.addStringIfDefined("fileName", fileName)
        self.client.queueServiceActionCall("upload", "getUploadedFileTokenByFileName", KalturaUploadResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUploadResponse)


# @package Kaltura
# @subpackage Client
class KalturaUploadTokenService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, uploadToken = NotImplemented):
        """Adds new upload token to upload a file"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("uploadToken", uploadToken)
        self.client.queueServiceActionCall("uploadtoken", "add", KalturaUploadToken, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUploadToken), header

    def get(self, uploadTokenId):
        """Get upload token by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("uploadtoken", "get", KalturaUploadToken, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUploadToken), header

    def upload(self, uploadTokenId, fileData, resume = False, finalChunk = True, resumeAt = -1):
        """Upload a file using the upload token id, returns an error on failure (an exception will be thrown when using one of the Kaltura clients)
        	 Chunks can be uploaded in parallel and they will be appended according to their resumeAt position.
        	 A parallel upload session should have three stages:
        	 1. A single upload with resume=false and finalChunk=false
        	 2. Parallel upload requests each with resume=true,finalChunk=false and the expected resumetAt position.
        	 If a chunk fails to upload it can be re-uploaded.
        	 3. After all of the chunks have been uploaded a final chunk (can be of zero size) should be uploaded 
        	 with resume=true, finalChunk=true and the expected resumeAt position. In case an UPLOAD_TOKEN_CANNOT_MATCH_EXPECTED_SIZE exception
        	 has been returned (indicating not all of the chunks were appended yet) the final request can be retried."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        kparams.addBoolIfDefined("resume", resume);
        kparams.addBoolIfDefined("finalChunk", finalChunk);
        kparams.addFloatIfDefined("resumeAt", resumeAt)
        self.client.queueServiceActionCall("uploadtoken", "upload", KalturaUploadToken, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode , header= self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUploadToken), header

    def delete(self, uploadTokenId):
        """Deletes the upload token by upload token id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("uploadTokenId", uploadTokenId)
        self.client.queueServiceActionCall("uploadtoken", "delete", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """List upload token by filter with pager support. 
        	 When using a user session the service will be restricted to users objects only."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("uploadtoken", "list", KalturaUploadTokenListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode, header  = self.client.doQueue()
        return (KalturaObjectFactory.create(resultNode, KalturaUploadTokenListResponse), header)


# @package Kaltura
# @subpackage Client
class KalturaUserEntryService(KalturaServiceBase):
    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userEntry):
        """Adds a user_entry to the Kaltura DB."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userEntry", userEntry)
        self.client.queueServiceActionCall("userentry", "add", KalturaUserEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserEntry)

    def update(self, id, userEntry):
        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        kparams.addObjectIfDefined("userEntry", userEntry)
        self.client.queueServiceActionCall("userentry", "update", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def delete(self, id):
        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("userentry", "delete", KalturaUserEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserEntry)

    def list(self, filter, pager = NotImplemented):
        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("userentry", "list", KalturaUserEntryListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserEntryListResponse)

    def get(self, id):
        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("userentry", "get", KalturaUserEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserEntry)

    def submitQuiz(self, id):
        """Submits the quiz so that it's status will be submitted and calculates the score for the quiz"""

        kparams = KalturaParams()
        kparams.addIntIfDefined("id", id);
        self.client.queueServiceActionCall("userentry", "submitQuiz", KalturaQuizUserEntry, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaQuizUserEntry)


# @package Kaltura
# @subpackage Client
class KalturaUserRoleService(KalturaServiceBase):
    """UserRole service lets you create and manage user roles"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, userRole):
        """Adds a new user role object to the account."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("userRole", userRole)
        self.client.queueServiceActionCall("userrole", "add", KalturaUserRole, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRole)

    def get(self, userRoleId):
        """Retrieves a user role object using its ID."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "get", KalturaUserRole, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRole)

    def update(self, userRoleId, userRole):
        """Updates an existing user role object."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userRoleId", userRoleId);
        kparams.addObjectIfDefined("userRole", userRole)
        self.client.queueServiceActionCall("userrole", "update", KalturaUserRole, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRole)

    def delete(self, userRoleId):
        """Deletes an existing user role object."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "delete", KalturaUserRole, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRole)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists user role objects that are associated with an account.
        	 Blocked user roles are listed unless you use a filter to exclude them.
        	 Deleted user roles are not listed unless you use a filter to include them."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("userrole", "list", KalturaUserRoleListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRoleListResponse)

    def clone(self, userRoleId):
        """Creates a new user role object that is a duplicate of an existing role."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("userRoleId", userRoleId);
        self.client.queueServiceActionCall("userrole", "clone", KalturaUserRole, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserRole)


# @package Kaltura
# @subpackage Client
class KalturaUserService(KalturaServiceBase):
    """Manage partner users on Kaltura's side
     The userId in kaltura is the unique Id in the partner's system, and the [partnerId,Id] couple are unique key in kaltura's DB"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, user):
        """Adds a new user to an existing account in the Kaltura database.
        	 Input param $id is the unique identifier in the partner's system."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("user", user)
        self.client.queueServiceActionCall("user", "add", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def update(self, userId, user):
        """Updates an existing user object.
        	 You can also use this action to update the userId."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addObjectIfDefined("user", user)
        self.client.queueServiceActionCall("user", "update", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def get(self, userId = NotImplemented):
        """Retrieves a user object for a specified user ID."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "get", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def getByLoginId(self, loginId):
        """Retrieves a user object for a user's login ID and partner ID.
        	 A login ID is the email address used by a user to log into the system."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("loginId", loginId)
        self.client.queueServiceActionCall("user", "getByLoginId", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def delete(self, userId):
        """Deletes a user from a partner account."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "delete", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Lists user objects that are associated with an account.
        	 Blocked users are listed unless you use a filter to exclude them.
        	 Deleted users are not listed unless you use a filter to include them."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("user", "list", KalturaUserListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUserListResponse)

    def notifyBan(self, userId):
        """Notifies that a user is banned from an account."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        self.client.queueServiceActionCall("user", "notifyBan", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def login(self, partnerId, userId, password, expiry = 86400, privileges = "*"):
        """Logs a user into a partner account with a partner ID, a partner user ID (puser), and a user password."""

        kparams = KalturaParams()
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addStringIfDefined("userId", userId)
        kparams.addStringIfDefined("password", password)
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("user", "login", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def loginByLoginId(self, loginId, password, partnerId = NotImplemented, expiry = 86400, privileges = "*"):
        """Logs a user into a partner account with a user login ID and a user password."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("loginId", loginId)
        kparams.addStringIfDefined("password", password)
        kparams.addIntIfDefined("partnerId", partnerId);
        kparams.addIntIfDefined("expiry", expiry);
        kparams.addStringIfDefined("privileges", privileges)
        self.client.queueServiceActionCall("user", "loginByLoginId", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def updateLoginData(self, oldLoginId, password, newLoginId = "", newPassword = "", newFirstName = NotImplemented, newLastName = NotImplemented):
        """Updates a user's login data: email, password, name."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("oldLoginId", oldLoginId)
        kparams.addStringIfDefined("password", password)
        kparams.addStringIfDefined("newLoginId", newLoginId)
        kparams.addStringIfDefined("newPassword", newPassword)
        kparams.addStringIfDefined("newFirstName", newFirstName)
        kparams.addStringIfDefined("newLastName", newLastName)
        self.client.queueServiceActionCall("user", "updateLoginData", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def resetPassword(self, email):
        """Reset user's password and send the user an email to generate a new one."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("email", email)
        self.client.queueServiceActionCall("user", "resetPassword", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def setInitialPassword(self, hashKey, newPassword):
        """Set initial users password"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("hashKey", hashKey)
        kparams.addStringIfDefined("newPassword", newPassword)
        self.client.queueServiceActionCall("user", "setInitialPassword", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()

    def enableLogin(self, userId, loginId, password = NotImplemented):
        """Enables a user to log into a partner account using an email address and a password"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addStringIfDefined("loginId", loginId)
        kparams.addStringIfDefined("password", password)
        self.client.queueServiceActionCall("user", "enableLogin", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def disableLogin(self, userId = NotImplemented, loginId = NotImplemented):
        """Disables a user's ability to log into a partner account using an email address and a password.
        	 You may use either a userId or a loginId parameter for this action."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("userId", userId)
        kparams.addStringIfDefined("loginId", loginId)
        self.client.queueServiceActionCall("user", "disableLogin", KalturaUser, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaUser)

    def index(self, id, shouldUpdate = True):
        """Index an entry by id."""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addBoolIfDefined("shouldUpdate", shouldUpdate);
        self.client.queueServiceActionCall("user", "index", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeText(resultNode)

    def addFromBulkUpload(self, fileData, bulkUploadData = NotImplemented, bulkUploadUserData = NotImplemented):
        kparams = KalturaParams()
        kfiles = KalturaFiles()
        kfiles.put("fileData", fileData);
        kparams.addObjectIfDefined("bulkUploadData", bulkUploadData)
        kparams.addObjectIfDefined("bulkUploadUserData", bulkUploadUserData)
        self.client.queueServiceActionCall("user", "addFromBulkUpload", KalturaBulkUpload, kparams, kfiles)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaBulkUpload)

    def checkLoginDataExists(self, filter):
        """Action which checks whther user login"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        self.client.queueServiceActionCall("user", "checkLoginDataExists", None, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return getXmlNodeBool(resultNode)


# @package Kaltura
# @subpackage Client
class KalturaWidgetService(KalturaServiceBase):
    """widget service for full widget management"""

    def __init__(self, client = None):
        KalturaServiceBase.__init__(self, client)

    def add(self, widget):
        """Add new widget, can be attached to entry or kshow
        	 SourceWidget is ignored."""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "add", KalturaWidget, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaWidget)

    def update(self, id, widget):
        """Update exisiting widget"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        kparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "update", KalturaWidget, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaWidget)

    def get(self, id):
        """Get widget by id"""

        kparams = KalturaParams()
        kparams.addStringIfDefined("id", id)
        self.client.queueServiceActionCall("widget", "get", KalturaWidget, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaWidget)

    def clone(self, widget):
        """Add widget based on existing widget.
        	 Must provide valid sourceWidgetId"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("widget", widget)
        self.client.queueServiceActionCall("widget", "clone", KalturaWidget, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaWidget)

    def list(self, filter = NotImplemented, pager = NotImplemented):
        """Retrieve a list of available widget depends on the filter given"""

        kparams = KalturaParams()
        kparams.addObjectIfDefined("filter", filter)
        kparams.addObjectIfDefined("pager", pager)
        self.client.queueServiceActionCall("widget", "list", KalturaWidgetListResponse, kparams)
        if self.client.isMultiRequest():
            return self.client.getMultiRequestResult()
        resultNode = self.client.doQueue()
        return KalturaObjectFactory.create(resultNode, KalturaWidgetListResponse)

########## main ##########
class KalturaCoreClient(KalturaClientPlugin):
    # KalturaCoreClient
    instance = None

    # @return KalturaCoreClient
    @staticmethod
    def get():
        if KalturaCoreClient.instance == None:
            KalturaCoreClient.instance = KalturaCoreClient()
        return KalturaCoreClient.instance

    # @return array<KalturaServiceBase>
    def getServices(self):
        return {
            'accessControlProfile': KalturaAccessControlProfileService,
            'accessControl': KalturaAccessControlService,
            'adminUser': KalturaAdminUserService,
            'analytics': KalturaAnalyticsService,
            'appToken': KalturaAppTokenService,
            'baseEntry': KalturaBaseEntryService,
            'bulkUpload': KalturaBulkUploadService,
            'categoryEntry': KalturaCategoryEntryService,
            'category': KalturaCategoryService,
            'categoryUser': KalturaCategoryUserService,
            'conversionProfileAssetParams': KalturaConversionProfileAssetParamsService,
            'conversionProfile': KalturaConversionProfileService,
            'data': KalturaDataService,
            'deliveryProfile': KalturaDeliveryProfileService,
            'EmailIngestionProfile': KalturaEmailIngestionProfileService,
            'entryServerNode': KalturaEntryServerNodeService,
            'fileAsset': KalturaFileAssetService,
            'flavorAsset': KalturaFlavorAssetService,
            'flavorParamsOutput': KalturaFlavorParamsOutputService,
            'flavorParams': KalturaFlavorParamsService,
            'groupUser': KalturaGroupUserService,
            'liveChannelSegment': KalturaLiveChannelSegmentService,
            'liveChannel': KalturaLiveChannelService,
            'liveReports': KalturaLiveReportsService,
            'liveStats': KalturaLiveStatsService,
            'liveStream': KalturaLiveStreamService,
            'mediaInfo': KalturaMediaInfoService,
            'media': KalturaMediaService,
            'mixing': KalturaMixingService,
            'notification': KalturaNotificationService,
            'partner': KalturaPartnerService,
            'permissionItem': KalturaPermissionItemService,
            'permission': KalturaPermissionService,
            'playlist': KalturaPlaylistService,
            'report': KalturaReportService,
            'responseProfile': KalturaResponseProfileService,
            'schema': KalturaSchemaService,
            'search': KalturaSearchService,
            'serverNode': KalturaServerNodeService,
            'session': KalturaSessionService,
            'stats': KalturaStatsService,
            'storageProfile': KalturaStorageProfileService,
            'syndicationFeed': KalturaSyndicationFeedService,
            'system': KalturaSystemService,
            'thumbAsset': KalturaThumbAssetService,
            'thumbParamsOutput': KalturaThumbParamsOutputService,
            'thumbParams': KalturaThumbParamsService,
            'uiConf': KalturaUiConfService,
            'upload': KalturaUploadService,
            'uploadToken': KalturaUploadTokenService,
            'userEntry': KalturaUserEntryService,
            'userRole': KalturaUserRoleService,
            'user': KalturaUserService,
            'widget': KalturaWidgetService,
        }

    def getEnums(self):
        return {
            'KalturaAppTokenStatus': KalturaAppTokenStatus,
            'KalturaAppearInListType': KalturaAppearInListType,
            'KalturaAssetParamsDeletePolicy': KalturaAssetParamsDeletePolicy,
            'KalturaAssetParamsOrigin': KalturaAssetParamsOrigin,
            'KalturaBatchJobErrorTypes': KalturaBatchJobErrorTypes,
            'KalturaBatchJobStatus': KalturaBatchJobStatus,
            'KalturaBitRateMode': KalturaBitRateMode,
            'KalturaCategoryEntryStatus': KalturaCategoryEntryStatus,
            'KalturaCategoryStatus': KalturaCategoryStatus,
            'KalturaCategoryUserPermissionLevel': KalturaCategoryUserPermissionLevel,
            'KalturaCategoryUserStatus': KalturaCategoryUserStatus,
            'KalturaCommercialUseType': KalturaCommercialUseType,
            'KalturaContributionPolicyType': KalturaContributionPolicyType,
            'KalturaControlPanelCommandStatus': KalturaControlPanelCommandStatus,
            'KalturaControlPanelCommandTargetType': KalturaControlPanelCommandTargetType,
            'KalturaControlPanelCommandType': KalturaControlPanelCommandType,
            'KalturaCountryRestrictionType': KalturaCountryRestrictionType,
            'KalturaDVRStatus': KalturaDVRStatus,
            'KalturaDeliveryStatus': KalturaDeliveryStatus,
            'KalturaDirectoryRestrictionType': KalturaDirectoryRestrictionType,
            'KalturaEditorType': KalturaEditorType,
            'KalturaEmailIngestionProfileStatus': KalturaEmailIngestionProfileStatus,
            'KalturaEntryModerationStatus': KalturaEntryModerationStatus,
            'KalturaEntryServerNodeStatus': KalturaEntryServerNodeStatus,
            'KalturaFeatureStatusType': KalturaFeatureStatusType,
            'KalturaFlavorAssetStatus': KalturaFlavorAssetStatus,
            'KalturaFlavorReadyBehaviorType': KalturaFlavorReadyBehaviorType,
            'KalturaGender': KalturaGender,
            'KalturaGroupUserStatus': KalturaGroupUserStatus,
            'KalturaInheritanceType': KalturaInheritanceType,
            'KalturaIpAddressRestrictionType': KalturaIpAddressRestrictionType,
            'KalturaLicenseType': KalturaLicenseType,
            'KalturaLimitFlavorsRestrictionType': KalturaLimitFlavorsRestrictionType,
            'KalturaLivePublishStatus': KalturaLivePublishStatus,
            'KalturaLiveReportExportType': KalturaLiveReportExportType,
            'KalturaLiveStatsEventType': KalturaLiveStatsEventType,
            'KalturaMailJobStatus': KalturaMailJobStatus,
            'KalturaMediaType': KalturaMediaType,
            'KalturaModerationFlagType': KalturaModerationFlagType,
            'KalturaMrssExtensionMode': KalturaMrssExtensionMode,
            'KalturaNotificationObjectType': KalturaNotificationObjectType,
            'KalturaNotificationStatus': KalturaNotificationStatus,
            'KalturaNotificationType': KalturaNotificationType,
            'KalturaNullableBoolean': KalturaNullableBoolean,
            'KalturaPartnerGroupType': KalturaPartnerGroupType,
            'KalturaPartnerStatus': KalturaPartnerStatus,
            'KalturaPartnerType': KalturaPartnerType,
            'KalturaPermissionStatus': KalturaPermissionStatus,
            'KalturaPermissionType': KalturaPermissionType,
            'KalturaPlaylistType': KalturaPlaylistType,
            'KalturaPrivacyType': KalturaPrivacyType,
            'KalturaRecordStatus': KalturaRecordStatus,
            'KalturaResponseProfileStatus': KalturaResponseProfileStatus,
            'KalturaResponseProfileType': KalturaResponseProfileType,
            'KalturaResponseType': KalturaResponseType,
            'KalturaSchedulerStatusType': KalturaSchedulerStatusType,
            'KalturaSearchOperatorType': KalturaSearchOperatorType,
            'KalturaSearchProviderType': KalturaSearchProviderType,
            'KalturaServerNodeStatus': KalturaServerNodeStatus,
            'KalturaSessionType': KalturaSessionType,
            'KalturaSiteRestrictionType': KalturaSiteRestrictionType,
            'KalturaStatsEventType': KalturaStatsEventType,
            'KalturaStatsFeatureType': KalturaStatsFeatureType,
            'KalturaStatsKmcEventType': KalturaStatsKmcEventType,
            'KalturaStorageProfileDeliveryStatus': KalturaStorageProfileDeliveryStatus,
            'KalturaStorageProfileReadyBehavior': KalturaStorageProfileReadyBehavior,
            'KalturaStorageProfileStatus': KalturaStorageProfileStatus,
            'KalturaSyndicationFeedStatus': KalturaSyndicationFeedStatus,
            'KalturaSyndicationFeedType': KalturaSyndicationFeedType,
            'KalturaThumbAssetStatus': KalturaThumbAssetStatus,
            'KalturaThumbCropType': KalturaThumbCropType,
            'KalturaUiConfCreationMode': KalturaUiConfCreationMode,
            'KalturaUiConfObjType': KalturaUiConfObjType,
            'KalturaUpdateMethodType': KalturaUpdateMethodType,
            'KalturaUploadErrorCode': KalturaUploadErrorCode,
            'KalturaUploadTokenStatus': KalturaUploadTokenStatus,
            'KalturaUserAgentRestrictionType': KalturaUserAgentRestrictionType,
            'KalturaUserJoinPolicyType': KalturaUserJoinPolicyType,
            'KalturaUserRoleStatus': KalturaUserRoleStatus,
            'KalturaUserStatus': KalturaUserStatus,
            'KalturaUserType': KalturaUserType,
            'KalturaWidgetSecurityType': KalturaWidgetSecurityType,
            'KalturaAccessControlOrderBy': KalturaAccessControlOrderBy,
            'KalturaAccessControlProfileOrderBy': KalturaAccessControlProfileOrderBy,
            'KalturaAdminUserOrderBy': KalturaAdminUserOrderBy,
            'KalturaAkamaiUniversalStreamType': KalturaAkamaiUniversalStreamType,
            'KalturaAmazonS3StorageProfileFilesPermissionLevel': KalturaAmazonS3StorageProfileFilesPermissionLevel,
            'KalturaAmazonS3StorageProfileOrderBy': KalturaAmazonS3StorageProfileOrderBy,
            'KalturaApiActionPermissionItemOrderBy': KalturaApiActionPermissionItemOrderBy,
            'KalturaApiParameterPermissionItemAction': KalturaApiParameterPermissionItemAction,
            'KalturaApiParameterPermissionItemOrderBy': KalturaApiParameterPermissionItemOrderBy,
            'KalturaAppTokenHashType': KalturaAppTokenHashType,
            'KalturaAppTokenOrderBy': KalturaAppTokenOrderBy,
            'KalturaAssetOrderBy': KalturaAssetOrderBy,
            'KalturaAssetParamsOrderBy': KalturaAssetParamsOrderBy,
            'KalturaAssetParamsOutputOrderBy': KalturaAssetParamsOutputOrderBy,
            'KalturaAssetType': KalturaAssetType,
            'KalturaAudioCodec': KalturaAudioCodec,
            'KalturaBaseEntryCloneOptions': KalturaBaseEntryCloneOptions,
            'KalturaBaseEntryCompareAttribute': KalturaBaseEntryCompareAttribute,
            'KalturaBaseEntryMatchAttribute': KalturaBaseEntryMatchAttribute,
            'KalturaBaseEntryOrderBy': KalturaBaseEntryOrderBy,
            'KalturaBaseSyndicationFeedOrderBy': KalturaBaseSyndicationFeedOrderBy,
            'KalturaBatchJobObjectType': KalturaBatchJobObjectType,
            'KalturaBatchJobOrderBy': KalturaBatchJobOrderBy,
            'KalturaBatchJobType': KalturaBatchJobType,
            'KalturaBulkUploadAction': KalturaBulkUploadAction,
            'KalturaBulkUploadObjectType': KalturaBulkUploadObjectType,
            'KalturaBulkUploadOrderBy': KalturaBulkUploadOrderBy,
            'KalturaBulkUploadResultStatus': KalturaBulkUploadResultStatus,
            'KalturaBulkUploadType': KalturaBulkUploadType,
            'KalturaCategoryEntryAdvancedOrderBy': KalturaCategoryEntryAdvancedOrderBy,
            'KalturaCategoryEntryOrderBy': KalturaCategoryEntryOrderBy,
            'KalturaCategoryIdentifierField': KalturaCategoryIdentifierField,
            'KalturaCategoryOrderBy': KalturaCategoryOrderBy,
            'KalturaCategoryUserOrderBy': KalturaCategoryUserOrderBy,
            'KalturaCloneComponentSelectorType': KalturaCloneComponentSelectorType,
            'KalturaConditionType': KalturaConditionType,
            'KalturaContainerFormat': KalturaContainerFormat,
            'KalturaContextType': KalturaContextType,
            'KalturaControlPanelCommandOrderBy': KalturaControlPanelCommandOrderBy,
            'KalturaConversionProfileAssetParamsOrderBy': KalturaConversionProfileAssetParamsOrderBy,
            'KalturaConversionProfileOrderBy': KalturaConversionProfileOrderBy,
            'KalturaConversionProfileStatus': KalturaConversionProfileStatus,
            'KalturaConversionProfileType': KalturaConversionProfileType,
            'KalturaDataEntryCompareAttribute': KalturaDataEntryCompareAttribute,
            'KalturaDataEntryMatchAttribute': KalturaDataEntryMatchAttribute,
            'KalturaDataEntryOrderBy': KalturaDataEntryOrderBy,
            'KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy': KalturaDeliveryProfileAkamaiAppleHttpManifestOrderBy,
            'KalturaDeliveryProfileAkamaiHdsOrderBy': KalturaDeliveryProfileAkamaiHdsOrderBy,
            'KalturaDeliveryProfileAkamaiHttpOrderBy': KalturaDeliveryProfileAkamaiHttpOrderBy,
            'KalturaDeliveryProfileGenericAppleHttpOrderBy': KalturaDeliveryProfileGenericAppleHttpOrderBy,
            'KalturaDeliveryProfileGenericHdsOrderBy': KalturaDeliveryProfileGenericHdsOrderBy,
            'KalturaDeliveryProfileGenericHttpOrderBy': KalturaDeliveryProfileGenericHttpOrderBy,
            'KalturaDeliveryProfileGenericRtmpOrderBy': KalturaDeliveryProfileGenericRtmpOrderBy,
            'KalturaDeliveryProfileGenericSilverLightOrderBy': KalturaDeliveryProfileGenericSilverLightOrderBy,
            'KalturaDeliveryProfileLiveAppleHttpOrderBy': KalturaDeliveryProfileLiveAppleHttpOrderBy,
            'KalturaDeliveryProfileOrderBy': KalturaDeliveryProfileOrderBy,
            'KalturaDeliveryProfileRtmpOrderBy': KalturaDeliveryProfileRtmpOrderBy,
            'KalturaDeliveryProfileType': KalturaDeliveryProfileType,
            'KalturaDeliveryServerNodeOrderBy': KalturaDeliveryServerNodeOrderBy,
            'KalturaDocumentEntryCompareAttribute': KalturaDocumentEntryCompareAttribute,
            'KalturaDocumentEntryMatchAttribute': KalturaDocumentEntryMatchAttribute,
            'KalturaDurationType': KalturaDurationType,
            'KalturaEdgeServerNodeOrderBy': KalturaEdgeServerNodeOrderBy,
            'KalturaEntryIdentifierField': KalturaEntryIdentifierField,
            'KalturaEntryReplacementStatus': KalturaEntryReplacementStatus,
            'KalturaEntryServerNodeOrderBy': KalturaEntryServerNodeOrderBy,
            'KalturaEntryServerNodeType': KalturaEntryServerNodeType,
            'KalturaEntryStatus': KalturaEntryStatus,
            'KalturaEntryType': KalturaEntryType,
            'KalturaExternalMediaEntryCompareAttribute': KalturaExternalMediaEntryCompareAttribute,
            'KalturaExternalMediaEntryMatchAttribute': KalturaExternalMediaEntryMatchAttribute,
            'KalturaFileAssetObjectType': KalturaFileAssetObjectType,
            'KalturaFileAssetOrderBy': KalturaFileAssetOrderBy,
            'KalturaFileAssetStatus': KalturaFileAssetStatus,
            'KalturaFileSyncObjectType': KalturaFileSyncObjectType,
            'KalturaFlavorAssetOrderBy': KalturaFlavorAssetOrderBy,
            'KalturaFlavorParamsOrderBy': KalturaFlavorParamsOrderBy,
            'KalturaFlavorParamsOutputOrderBy': KalturaFlavorParamsOutputOrderBy,
            'KalturaGenericSyndicationFeedOrderBy': KalturaGenericSyndicationFeedOrderBy,
            'KalturaGenericXsltSyndicationFeedOrderBy': KalturaGenericXsltSyndicationFeedOrderBy,
            'KalturaGeoCoderType': KalturaGeoCoderType,
            'KalturaGoogleSyndicationFeedAdultValues': KalturaGoogleSyndicationFeedAdultValues,
            'KalturaGoogleVideoSyndicationFeedOrderBy': KalturaGoogleVideoSyndicationFeedOrderBy,
            'KalturaGroupUserOrderBy': KalturaGroupUserOrderBy,
            'KalturaITunesSyndicationFeedAdultValues': KalturaITunesSyndicationFeedAdultValues,
            'KalturaITunesSyndicationFeedCategories': KalturaITunesSyndicationFeedCategories,
            'KalturaITunesSyndicationFeedOrderBy': KalturaITunesSyndicationFeedOrderBy,
            'KalturaLanguage': KalturaLanguage,
            'KalturaLanguageCode': KalturaLanguageCode,
            'KalturaLiveAssetOrderBy': KalturaLiveAssetOrderBy,
            'KalturaLiveChannelCompareAttribute': KalturaLiveChannelCompareAttribute,
            'KalturaLiveChannelMatchAttribute': KalturaLiveChannelMatchAttribute,
            'KalturaLiveChannelOrderBy': KalturaLiveChannelOrderBy,
            'KalturaLiveChannelSegmentOrderBy': KalturaLiveChannelSegmentOrderBy,
            'KalturaLiveChannelSegmentStatus': KalturaLiveChannelSegmentStatus,
            'KalturaLiveChannelSegmentTriggerType': KalturaLiveChannelSegmentTriggerType,
            'KalturaLiveChannelSegmentType': KalturaLiveChannelSegmentType,
            'KalturaLiveEntryCompareAttribute': KalturaLiveEntryCompareAttribute,
            'KalturaLiveEntryMatchAttribute': KalturaLiveEntryMatchAttribute,
            'KalturaLiveEntryOrderBy': KalturaLiveEntryOrderBy,
            'KalturaLiveEntryServerNodeOrderBy': KalturaLiveEntryServerNodeOrderBy,
            'KalturaLiveParamsOrderBy': KalturaLiveParamsOrderBy,
            'KalturaLiveReportOrderBy': KalturaLiveReportOrderBy,
            'KalturaLiveReportType': KalturaLiveReportType,
            'KalturaLiveStreamAdminEntryCompareAttribute': KalturaLiveStreamAdminEntryCompareAttribute,
            'KalturaLiveStreamAdminEntryMatchAttribute': KalturaLiveStreamAdminEntryMatchAttribute,
            'KalturaLiveStreamAdminEntryOrderBy': KalturaLiveStreamAdminEntryOrderBy,
            'KalturaLiveStreamEntryCompareAttribute': KalturaLiveStreamEntryCompareAttribute,
            'KalturaLiveStreamEntryMatchAttribute': KalturaLiveStreamEntryMatchAttribute,
            'KalturaLiveStreamEntryOrderBy': KalturaLiveStreamEntryOrderBy,
            'KalturaMailType': KalturaMailType,
            'KalturaMediaEntryCompareAttribute': KalturaMediaEntryCompareAttribute,
            'KalturaMediaEntryMatchAttribute': KalturaMediaEntryMatchAttribute,
            'KalturaMediaEntryOrderBy': KalturaMediaEntryOrderBy,
            'KalturaMediaFlavorParamsOrderBy': KalturaMediaFlavorParamsOrderBy,
            'KalturaMediaFlavorParamsOutputOrderBy': KalturaMediaFlavorParamsOutputOrderBy,
            'KalturaMediaInfoOrderBy': KalturaMediaInfoOrderBy,
            'KalturaMediaParserType': KalturaMediaParserType,
            'KalturaMediaServerNodeOrderBy': KalturaMediaServerNodeOrderBy,
            'KalturaMixEntryCompareAttribute': KalturaMixEntryCompareAttribute,
            'KalturaMixEntryMatchAttribute': KalturaMixEntryMatchAttribute,
            'KalturaMixEntryOrderBy': KalturaMixEntryOrderBy,
            'KalturaModerationFlagStatus': KalturaModerationFlagStatus,
            'KalturaModerationObjectType': KalturaModerationObjectType,
            'KalturaPartnerOrderBy': KalturaPartnerOrderBy,
            'KalturaPermissionItemOrderBy': KalturaPermissionItemOrderBy,
            'KalturaPermissionItemType': KalturaPermissionItemType,
            'KalturaPermissionOrderBy': KalturaPermissionOrderBy,
            'KalturaPlayableEntryCompareAttribute': KalturaPlayableEntryCompareAttribute,
            'KalturaPlayableEntryMatchAttribute': KalturaPlayableEntryMatchAttribute,
            'KalturaPlayableEntryOrderBy': KalturaPlayableEntryOrderBy,
            'KalturaPlaybackProtocol': KalturaPlaybackProtocol,
            'KalturaPlaylistCompareAttribute': KalturaPlaylistCompareAttribute,
            'KalturaPlaylistMatchAttribute': KalturaPlaylistMatchAttribute,
            'KalturaPlaylistOrderBy': KalturaPlaylistOrderBy,
            'KalturaQuizUserEntryOrderBy': KalturaQuizUserEntryOrderBy,
            'KalturaReportInterval': KalturaReportInterval,
            'KalturaReportOrderBy': KalturaReportOrderBy,
            'KalturaReportType': KalturaReportType,
            'KalturaResponseProfileOrderBy': KalturaResponseProfileOrderBy,
            'KalturaRuleActionType': KalturaRuleActionType,
            'KalturaSchemaType': KalturaSchemaType,
            'KalturaSearchConditionComparison': KalturaSearchConditionComparison,
            'KalturaServerNodeOrderBy': KalturaServerNodeOrderBy,
            'KalturaServerNodeType': KalturaServerNodeType,
            'KalturaSourceType': KalturaSourceType,
            'KalturaStorageProfileOrderBy': KalturaStorageProfileOrderBy,
            'KalturaStorageProfileProtocol': KalturaStorageProfileProtocol,
            'KalturaSyndicationFeedEntriesOrderBy': KalturaSyndicationFeedEntriesOrderBy,
            'KalturaTaggedObjectType': KalturaTaggedObjectType,
            'KalturaThumbAssetOrderBy': KalturaThumbAssetOrderBy,
            'KalturaThumbParamsOrderBy': KalturaThumbParamsOrderBy,
            'KalturaThumbParamsOutputOrderBy': KalturaThumbParamsOutputOrderBy,
            'KalturaTubeMogulSyndicationFeedCategories': KalturaTubeMogulSyndicationFeedCategories,
            'KalturaTubeMogulSyndicationFeedOrderBy': KalturaTubeMogulSyndicationFeedOrderBy,
            'KalturaUiConfOrderBy': KalturaUiConfOrderBy,
            'KalturaUploadTokenOrderBy': KalturaUploadTokenOrderBy,
            'KalturaUserEntryOrderBy': KalturaUserEntryOrderBy,
            'KalturaUserEntryStatus': KalturaUserEntryStatus,
            'KalturaUserEntryType': KalturaUserEntryType,
            'KalturaUserLoginDataOrderBy': KalturaUserLoginDataOrderBy,
            'KalturaUserOrderBy': KalturaUserOrderBy,
            'KalturaUserRoleOrderBy': KalturaUserRoleOrderBy,
            'KalturaVideoCodec': KalturaVideoCodec,
            'KalturaWidgetOrderBy': KalturaWidgetOrderBy,
            'KalturaYahooSyndicationFeedAdultValues': KalturaYahooSyndicationFeedAdultValues,
            'KalturaYahooSyndicationFeedCategories': KalturaYahooSyndicationFeedCategories,
            'KalturaYahooSyndicationFeedOrderBy': KalturaYahooSyndicationFeedOrderBy,
        }

    def getTypes(self):
        return {
            'KalturaListResponse': KalturaListResponse,
            'KalturaBaseRestriction': KalturaBaseRestriction,
            'KalturaAccessControl': KalturaAccessControl,
            'KalturaContextTypeHolder': KalturaContextTypeHolder,
            'KalturaAccessControlContextTypeHolder': KalturaAccessControlContextTypeHolder,
            'KalturaRuleAction': KalturaRuleAction,
            'KalturaCondition': KalturaCondition,
            'KalturaRule': KalturaRule,
            'KalturaAccessControlProfile': KalturaAccessControlProfile,
            'KalturaKeyValue': KalturaKeyValue,
            'KalturaAccessControlScope': KalturaAccessControlScope,
            'KalturaReportFilter': KalturaReportFilter,
            'KalturaAnalyticsFilter': KalturaAnalyticsFilter,
            'KalturaApiExceptionArg': KalturaApiExceptionArg,
            'KalturaAppToken': KalturaAppToken,
            'KalturaAsset': KalturaAsset,
            'KalturaString': KalturaString,
            'KalturaAssetParams': KalturaAssetParams,
            'KalturaResource': KalturaResource,
            'KalturaContentResource': KalturaContentResource,
            'KalturaAssetParamsResourceContainer': KalturaAssetParamsResourceContainer,
            'KalturaOperationAttributes': KalturaOperationAttributes,
            'KalturaBaseEntry': KalturaBaseEntry,
            'KalturaBaseEntryCloneOptionItem': KalturaBaseEntryCloneOptionItem,
            'KalturaBaseResponseProfile': KalturaBaseResponseProfile,
            'KalturaBaseSyndicationFeed': KalturaBaseSyndicationFeed,
            'KalturaJobData': KalturaJobData,
            'KalturaBatchHistoryData': KalturaBatchHistoryData,
            'KalturaBatchJob': KalturaBatchJob,
            'KalturaPlayerDeliveryType': KalturaPlayerDeliveryType,
            'KalturaPlayerEmbedCodeType': KalturaPlayerEmbedCodeType,
            'KalturaPartner': KalturaPartner,
            'KalturaValue': KalturaValue,
            'KalturaBooleanValue': KalturaBooleanValue,
            'KalturaBulkUploadPluginData': KalturaBulkUploadPluginData,
            'KalturaBulkUploadResult': KalturaBulkUploadResult,
            'KalturaBulkUpload': KalturaBulkUpload,
            'KalturaBulkUploadObjectData': KalturaBulkUploadObjectData,
            'KalturaCEError': KalturaCEError,
            'KalturaCategory': KalturaCategory,
            'KalturaCategoryEntry': KalturaCategoryEntry,
            'KalturaCategoryUser': KalturaCategoryUser,
            'KalturaClientConfiguration': KalturaClientConfiguration,
            'KalturaClientNotification': KalturaClientNotification,
            'KalturaContext': KalturaContext,
            'KalturaContextDataResult': KalturaContextDataResult,
            'KalturaControlPanelCommand': KalturaControlPanelCommand,
            'KalturaConversionAttribute': KalturaConversionAttribute,
            'KalturaCropDimensions': KalturaCropDimensions,
            'KalturaConversionProfile': KalturaConversionProfile,
            'KalturaConversionProfileAssetParams': KalturaConversionProfileAssetParams,
            'KalturaConvertCollectionFlavorData': KalturaConvertCollectionFlavorData,
            'KalturaCoordinate': KalturaCoordinate,
            'KalturaDataEntry': KalturaDataEntry,
            'KalturaUrlRecognizer': KalturaUrlRecognizer,
            'KalturaUrlTokenizer': KalturaUrlTokenizer,
            'KalturaDeliveryProfile': KalturaDeliveryProfile,
            'KalturaFileSyncDescriptor': KalturaFileSyncDescriptor,
            'KalturaDestFileSyncDescriptor': KalturaDestFileSyncDescriptor,
            'KalturaSearchItem': KalturaSearchItem,
            'KalturaFilter': KalturaFilter,
            'KalturaRelatedFilter': KalturaRelatedFilter,
            'KalturaFilterPager': KalturaFilterPager,
            'KalturaResponseProfileMapping': KalturaResponseProfileMapping,
            'KalturaDetachedResponseProfile': KalturaDetachedResponseProfile,
            'KalturaEmailIngestionProfile': KalturaEmailIngestionProfile,
            'KalturaStringValue': KalturaStringValue,
            'KalturaEntryReplacementOptions': KalturaEntryReplacementOptions,
            'KalturaEntryServerNode': KalturaEntryServerNode,
            'KalturaObjectIdentifier': KalturaObjectIdentifier,
            'KalturaExtendingItemMrssParameter': KalturaExtendingItemMrssParameter,
            'KalturaPlayableEntry': KalturaPlayableEntry,
            'KalturaMediaEntry': KalturaMediaEntry,
            'KalturaFeatureStatus': KalturaFeatureStatus,
            'KalturaFileAsset': KalturaFileAsset,
            'KalturaFlavorAsset': KalturaFlavorAsset,
            'KalturaFlavorAssetUrlOptions': KalturaFlavorAssetUrlOptions,
            'KalturaFlavorParams': KalturaFlavorParams,
            'KalturaFlavorAssetWithParams': KalturaFlavorAssetWithParams,
            'KalturaFlavorParamsOutput': KalturaFlavorParamsOutput,
            'KalturaSchedulerStatus': KalturaSchedulerStatus,
            'KalturaSchedulerConfig': KalturaSchedulerConfig,
            'KalturaSchedulerWorker': KalturaSchedulerWorker,
            'KalturaScheduler': KalturaScheduler,
            'KalturaGroupUser': KalturaGroupUser,
            'KalturaObject': KalturaObject,
            'KalturaIntegerValue': KalturaIntegerValue,
            'KalturaLiveStreamConfiguration': KalturaLiveStreamConfiguration,
            'KalturaLiveStreamPushPublishConfiguration': KalturaLiveStreamPushPublishConfiguration,
            'KalturaLiveEntryRecordingOptions': KalturaLiveEntryRecordingOptions,
            'KalturaLiveEntry': KalturaLiveEntry,
            'KalturaLiveChannel': KalturaLiveChannel,
            'KalturaLiveChannelSegment': KalturaLiveChannelSegment,
            'KalturaLiveReportExportParams': KalturaLiveReportExportParams,
            'KalturaLiveReportExportResponse': KalturaLiveReportExportResponse,
            'KalturaLiveReportInputFilter': KalturaLiveReportInputFilter,
            'KalturaLiveStats': KalturaLiveStats,
            'KalturaLiveStatsEvent': KalturaLiveStatsEvent,
            'KalturaLiveStreamBitrate': KalturaLiveStreamBitrate,
            'KalturaLiveStreamEntry': KalturaLiveStreamEntry,
            'KalturaLiveStreamParams': KalturaLiveStreamParams,
            'KalturaBaseEntryBaseFilter': KalturaBaseEntryBaseFilter,
            'KalturaBaseEntryFilter': KalturaBaseEntryFilter,
            'KalturaPlayableEntryBaseFilter': KalturaPlayableEntryBaseFilter,
            'KalturaPlayableEntryFilter': KalturaPlayableEntryFilter,
            'KalturaMediaEntryBaseFilter': KalturaMediaEntryBaseFilter,
            'KalturaMediaEntryFilter': KalturaMediaEntryFilter,
            'KalturaMediaEntryFilterForPlaylist': KalturaMediaEntryFilterForPlaylist,
            'KalturaMediaInfo': KalturaMediaInfo,
            'KalturaMixEntry': KalturaMixEntry,
            'KalturaModerationFlag': KalturaModerationFlag,
            'KalturaPartnerStatistics': KalturaPartnerStatistics,
            'KalturaPartnerUsage': KalturaPartnerUsage,
            'KalturaPermission': KalturaPermission,
            'KalturaPermissionItem': KalturaPermissionItem,
            'KalturaPlaylist': KalturaPlaylist,
            'KalturaPluginData': KalturaPluginData,
            'KalturaRemotePath': KalturaRemotePath,
            'KalturaUrlResource': KalturaUrlResource,
            'KalturaRemoteStorageResource': KalturaRemoteStorageResource,
            'KalturaReport': KalturaReport,
            'KalturaReportBaseTotal': KalturaReportBaseTotal,
            'KalturaReportGraph': KalturaReportGraph,
            'KalturaReportInputBaseFilter': KalturaReportInputBaseFilter,
            'KalturaReportResponse': KalturaReportResponse,
            'KalturaReportTable': KalturaReportTable,
            'KalturaReportTotal': KalturaReportTotal,
            'KalturaRequestConfiguration': KalturaRequestConfiguration,
            'KalturaResponseProfile': KalturaResponseProfile,
            'KalturaResponseProfileCacheRecalculateOptions': KalturaResponseProfileCacheRecalculateOptions,
            'KalturaResponseProfileCacheRecalculateResults': KalturaResponseProfileCacheRecalculateResults,
            'KalturaScope': KalturaScope,
            'KalturaSearch': KalturaSearch,
            'KalturaSearchAuthData': KalturaSearchAuthData,
            'KalturaSearchResult': KalturaSearchResult,
            'KalturaSearchResultResponse': KalturaSearchResultResponse,
            'KalturaServerNode': KalturaServerNode,
            'KalturaSessionInfo': KalturaSessionInfo,
            'KalturaSourceFileSyncDescriptor': KalturaSourceFileSyncDescriptor,
            'KalturaStartWidgetSessionResponse': KalturaStartWidgetSessionResponse,
            'KalturaStatsEvent': KalturaStatsEvent,
            'KalturaStatsKmcEvent': KalturaStatsKmcEvent,
            'KalturaStorageProfile': KalturaStorageProfile,
            'KalturaSyndicationFeedEntryCount': KalturaSyndicationFeedEntryCount,
            'KalturaThumbAsset': KalturaThumbAsset,
            'KalturaThumbParams': KalturaThumbParams,
            'KalturaThumbParamsOutput': KalturaThumbParamsOutput,
            'KalturaThumbnailServeOptions': KalturaThumbnailServeOptions,
            'KalturaUiConf': KalturaUiConf,
            'KalturaUiConfTypeInfo': KalturaUiConfTypeInfo,
            'KalturaUploadResponse': KalturaUploadResponse,
            'KalturaUploadToken': KalturaUploadToken,
            'KalturaUser': KalturaUser,
            'KalturaUserEntry': KalturaUserEntry,
            'KalturaUserLoginData': KalturaUserLoginData,
            'KalturaUserRole': KalturaUserRole,
            'KalturaWidget': KalturaWidget,
            'KalturaBatchJobBaseFilter': KalturaBatchJobBaseFilter,
            'KalturaBatchJobFilter': KalturaBatchJobFilter,
            'KalturaAccessControlBlockAction': KalturaAccessControlBlockAction,
            'KalturaAccessControlLimitDeliveryProfilesAction': KalturaAccessControlLimitDeliveryProfilesAction,
            'KalturaAccessControlLimitFlavorsAction': KalturaAccessControlLimitFlavorsAction,
            'KalturaAccessControlListResponse': KalturaAccessControlListResponse,
            'KalturaAccessControlModifyRequestHostRegexAction': KalturaAccessControlModifyRequestHostRegexAction,
            'KalturaAccessControlPreviewAction': KalturaAccessControlPreviewAction,
            'KalturaAccessControlProfileListResponse': KalturaAccessControlProfileListResponse,
            'KalturaAccessControlServeRemoteEdgeServerAction': KalturaAccessControlServeRemoteEdgeServerAction,
            'KalturaAdminUser': KalturaAdminUser,
            'KalturaAmazonS3StorageProfile': KalturaAmazonS3StorageProfile,
            'KalturaApiActionPermissionItem': KalturaApiActionPermissionItem,
            'KalturaApiParameterPermissionItem': KalturaApiParameterPermissionItem,
            'KalturaAppTokenBaseFilter': KalturaAppTokenBaseFilter,
            'KalturaAppTokenListResponse': KalturaAppTokenListResponse,
            'KalturaAssetParamsOutput': KalturaAssetParamsOutput,
            'KalturaAssetPropertiesCompareCondition': KalturaAssetPropertiesCompareCondition,
            'KalturaAssetsParamsResourceContainers': KalturaAssetsParamsResourceContainers,
            'KalturaAttributeCondition': KalturaAttributeCondition,
            'KalturaAuthenticatedCondition': KalturaAuthenticatedCondition,
            'KalturaBaseEntryCloneOptionComponent': KalturaBaseEntryCloneOptionComponent,
            'KalturaBaseEntryListResponse': KalturaBaseEntryListResponse,
            'KalturaBaseSyndicationFeedBaseFilter': KalturaBaseSyndicationFeedBaseFilter,
            'KalturaBaseSyndicationFeedListResponse': KalturaBaseSyndicationFeedListResponse,
            'KalturaBatchJobListResponse': KalturaBatchJobListResponse,
            'KalturaBulkDownloadJobData': KalturaBulkDownloadJobData,
            'KalturaBulkUploadBaseFilter': KalturaBulkUploadBaseFilter,
            'KalturaBulkUploadCategoryData': KalturaBulkUploadCategoryData,
            'KalturaBulkUploadCategoryEntryData': KalturaBulkUploadCategoryEntryData,
            'KalturaBulkUploadCategoryUserData': KalturaBulkUploadCategoryUserData,
            'KalturaBulkUploadEntryData': KalturaBulkUploadEntryData,
            'KalturaBulkUploadJobData': KalturaBulkUploadJobData,
            'KalturaBulkUploadListResponse': KalturaBulkUploadListResponse,
            'KalturaBulkUploadResultCategory': KalturaBulkUploadResultCategory,
            'KalturaBulkUploadResultCategoryEntry': KalturaBulkUploadResultCategoryEntry,
            'KalturaBulkUploadResultCategoryUser': KalturaBulkUploadResultCategoryUser,
            'KalturaBulkUploadResultEntry': KalturaBulkUploadResultEntry,
            'KalturaBulkUploadResultUser': KalturaBulkUploadResultUser,
            'KalturaBulkUploadUserData': KalturaBulkUploadUserData,
            'KalturaCaptureThumbJobData': KalturaCaptureThumbJobData,
            'KalturaCategoryEntryAdvancedFilter': KalturaCategoryEntryAdvancedFilter,
            'KalturaCategoryEntryListResponse': KalturaCategoryEntryListResponse,
            'KalturaCategoryIdentifier': KalturaCategoryIdentifier,
            'KalturaCategoryListResponse': KalturaCategoryListResponse,
            'KalturaCategoryUserAdvancedFilter': KalturaCategoryUserAdvancedFilter,
            'KalturaCategoryUserListResponse': KalturaCategoryUserListResponse,
            'KalturaClipAttributes': KalturaClipAttributes,
            'KalturaCompareCondition': KalturaCompareCondition,
            'KalturaDataCenterContentResource': KalturaDataCenterContentResource,
            'KalturaConcatAttributes': KalturaConcatAttributes,
            'KalturaConcatJobData': KalturaConcatJobData,
            'KalturaControlPanelCommandBaseFilter': KalturaControlPanelCommandBaseFilter,
            'KalturaControlPanelCommandListResponse': KalturaControlPanelCommandListResponse,
            'KalturaConvartableJobData': KalturaConvartableJobData,
            'KalturaConversionProfileAssetParamsListResponse': KalturaConversionProfileAssetParamsListResponse,
            'KalturaConversionProfileListResponse': KalturaConversionProfileListResponse,
            'KalturaConvertLiveSegmentJobData': KalturaConvertLiveSegmentJobData,
            'KalturaConvertProfileJobData': KalturaConvertProfileJobData,
            'KalturaCopyPartnerJobData': KalturaCopyPartnerJobData,
            'KalturaCountryRestriction': KalturaCountryRestriction,
            'KalturaDataListResponse': KalturaDataListResponse,
            'KalturaDeleteFileJobData': KalturaDeleteFileJobData,
            'KalturaDeleteJobData': KalturaDeleteJobData,
            'KalturaDeliveryProfileAkamaiAppleHttpManifest': KalturaDeliveryProfileAkamaiAppleHttpManifest,
            'KalturaDeliveryProfileAkamaiHds': KalturaDeliveryProfileAkamaiHds,
            'KalturaDeliveryProfileAkamaiHttp': KalturaDeliveryProfileAkamaiHttp,
            'KalturaDeliveryProfileBaseFilter': KalturaDeliveryProfileBaseFilter,
            'KalturaDeliveryProfileCondition': KalturaDeliveryProfileCondition,
            'KalturaDeliveryProfileGenericAppleHttp': KalturaDeliveryProfileGenericAppleHttp,
            'KalturaDeliveryProfileGenericHds': KalturaDeliveryProfileGenericHds,
            'KalturaDeliveryProfileGenericHttp': KalturaDeliveryProfileGenericHttp,
            'KalturaDeliveryProfileGenericSilverLight': KalturaDeliveryProfileGenericSilverLight,
            'KalturaDeliveryProfileListResponse': KalturaDeliveryProfileListResponse,
            'KalturaDeliveryProfileLiveAppleHttp': KalturaDeliveryProfileLiveAppleHttp,
            'KalturaDeliveryProfileRtmp': KalturaDeliveryProfileRtmp,
            'KalturaDeliveryServerNode': KalturaDeliveryServerNode,
            'KalturaDirectoryRestriction': KalturaDirectoryRestriction,
            'KalturaDrmEntryContextPluginData': KalturaDrmEntryContextPluginData,
            'KalturaCategoryUserBaseFilter': KalturaCategoryUserBaseFilter,
            'KalturaCategoryUserFilter': KalturaCategoryUserFilter,
            'KalturaUserBaseFilter': KalturaUserBaseFilter,
            'KalturaUserFilter': KalturaUserFilter,
            'KalturaEntryContext': KalturaEntryContext,
            'KalturaEntryContextDataParams': KalturaEntryContextDataParams,
            'KalturaEntryContextDataResult': KalturaEntryContextDataResult,
            'KalturaEntryCuePointSearchFilter': KalturaEntryCuePointSearchFilter,
            'KalturaEntryIdentifier': KalturaEntryIdentifier,
            'KalturaEntryLiveStats': KalturaEntryLiveStats,
            'KalturaEntryServerNodeListResponse': KalturaEntryServerNodeListResponse,
            'KalturaBooleanField': KalturaBooleanField,
            'KalturaFeatureStatusListResponse': KalturaFeatureStatusListResponse,
            'KalturaFileAssetListResponse': KalturaFileAssetListResponse,
            'KalturaFlattenJobData': KalturaFlattenJobData,
            'KalturaFlavorAssetListResponse': KalturaFlavorAssetListResponse,
            'KalturaFlavorParamsListResponse': KalturaFlavorParamsListResponse,
            'KalturaFlavorParamsOutputListResponse': KalturaFlavorParamsOutputListResponse,
            'KalturaGenericSyndicationFeed': KalturaGenericSyndicationFeed,
            'KalturaGoogleVideoSyndicationFeed': KalturaGoogleVideoSyndicationFeed,
            'KalturaGroupUserListResponse': KalturaGroupUserListResponse,
            'KalturaHashCondition': KalturaHashCondition,
            'KalturaITunesSyndicationFeed': KalturaITunesSyndicationFeed,
            'KalturaImportJobData': KalturaImportJobData,
            'KalturaIndexAdvancedFilter': KalturaIndexAdvancedFilter,
            'KalturaIndexJobData': KalturaIndexJobData,
            'KalturaIpAddressRestriction': KalturaIpAddressRestriction,
            'KalturaLimitFlavorsRestriction': KalturaLimitFlavorsRestriction,
            'KalturaLiveChannelListResponse': KalturaLiveChannelListResponse,
            'KalturaLiveChannelSegmentListResponse': KalturaLiveChannelSegmentListResponse,
            'KalturaLiveEntryServerNode': KalturaLiveEntryServerNode,
            'KalturaLiveReportExportJobData': KalturaLiveReportExportJobData,
            'KalturaLiveStatsListResponse': KalturaLiveStatsListResponse,
            'KalturaLiveStreamListResponse': KalturaLiveStreamListResponse,
            'KalturaLiveStreamPushPublishRTMPConfiguration': KalturaLiveStreamPushPublishRTMPConfiguration,
            'KalturaMailJobData': KalturaMailJobData,
            'KalturaMatchCondition': KalturaMatchCondition,
            'KalturaMediaInfoBaseFilter': KalturaMediaInfoBaseFilter,
            'KalturaMediaInfoListResponse': KalturaMediaInfoListResponse,
            'KalturaMediaListResponse': KalturaMediaListResponse,
            'KalturaMixListResponse': KalturaMixListResponse,
            'KalturaModerationFlagListResponse': KalturaModerationFlagListResponse,
            'KalturaMoveCategoryEntriesJobData': KalturaMoveCategoryEntriesJobData,
            'KalturaNotificationJobData': KalturaNotificationJobData,
            'KalturaObjectListResponse': KalturaObjectListResponse,
            'KalturaOrCondition': KalturaOrCondition,
            'KalturaPartnerBaseFilter': KalturaPartnerBaseFilter,
            'KalturaPartnerListResponse': KalturaPartnerListResponse,
            'KalturaPermissionItemListResponse': KalturaPermissionItemListResponse,
            'KalturaPermissionListResponse': KalturaPermissionListResponse,
            'KalturaPlaylistListResponse': KalturaPlaylistListResponse,
            'KalturaProvisionJobData': KalturaProvisionJobData,
            'KalturaQuizUserEntry': KalturaQuizUserEntry,
            'KalturaRecalculateCacheJobData': KalturaRecalculateCacheJobData,
            'KalturaRemotePathListResponse': KalturaRemotePathListResponse,
            'KalturaReportBaseFilter': KalturaReportBaseFilter,
            'KalturaReportInputFilter': KalturaReportInputFilter,
            'KalturaReportListResponse': KalturaReportListResponse,
            'KalturaResponseProfileBaseFilter': KalturaResponseProfileBaseFilter,
            'KalturaResponseProfileHolder': KalturaResponseProfileHolder,
            'KalturaResponseProfileListResponse': KalturaResponseProfileListResponse,
            'KalturaSchedulerListResponse': KalturaSchedulerListResponse,
            'KalturaSchedulerWorkerListResponse': KalturaSchedulerWorkerListResponse,
            'KalturaSearchCondition': KalturaSearchCondition,
            'KalturaSearchOperator': KalturaSearchOperator,
            'KalturaServerNodeBaseFilter': KalturaServerNodeBaseFilter,
            'KalturaServerNodeListResponse': KalturaServerNodeListResponse,
            'KalturaSessionRestriction': KalturaSessionRestriction,
            'KalturaSiteRestriction': KalturaSiteRestriction,
            'KalturaStorageAddAction': KalturaStorageAddAction,
            'KalturaStorageJobData': KalturaStorageJobData,
            'KalturaStorageProfileBaseFilter': KalturaStorageProfileBaseFilter,
            'KalturaStorageProfileListResponse': KalturaStorageProfileListResponse,
            'KalturaSyncCategoryPrivacyContextJobData': KalturaSyncCategoryPrivacyContextJobData,
            'KalturaThumbAssetListResponse': KalturaThumbAssetListResponse,
            'KalturaThumbParamsListResponse': KalturaThumbParamsListResponse,
            'KalturaThumbParamsOutputListResponse': KalturaThumbParamsOutputListResponse,
            'KalturaTubeMogulSyndicationFeed': KalturaTubeMogulSyndicationFeed,
            'KalturaUiConfBaseFilter': KalturaUiConfBaseFilter,
            'KalturaUiConfListResponse': KalturaUiConfListResponse,
            'KalturaUploadTokenBaseFilter': KalturaUploadTokenBaseFilter,
            'KalturaUploadTokenListResponse': KalturaUploadTokenListResponse,
            'KalturaUrlRecognizerAkamaiG2O': KalturaUrlRecognizerAkamaiG2O,
            'KalturaUrlTokenizerAkamaiHttp': KalturaUrlTokenizerAkamaiHttp,
            'KalturaUrlTokenizerAkamaiRtmp': KalturaUrlTokenizerAkamaiRtmp,
            'KalturaUrlTokenizerAkamaiRtsp': KalturaUrlTokenizerAkamaiRtsp,
            'KalturaUrlTokenizerAkamaiSecureHd': KalturaUrlTokenizerAkamaiSecureHd,
            'KalturaUrlTokenizerBitGravity': KalturaUrlTokenizerBitGravity,
            'KalturaUrlTokenizerCloudFront': KalturaUrlTokenizerCloudFront,
            'KalturaUrlTokenizerLevel3': KalturaUrlTokenizerLevel3,
            'KalturaUrlTokenizerLimeLight': KalturaUrlTokenizerLimeLight,
            'KalturaUrlTokenizerUplynk': KalturaUrlTokenizerUplynk,
            'KalturaUrlTokenizerVelocix': KalturaUrlTokenizerVelocix,
            'KalturaUrlTokenizerVnpt': KalturaUrlTokenizerVnpt,
            'KalturaUserAgentRestriction': KalturaUserAgentRestriction,
            'KalturaUserEntryListResponse': KalturaUserEntryListResponse,
            'KalturaUserListResponse': KalturaUserListResponse,
            'KalturaUserLoginDataListResponse': KalturaUserLoginDataListResponse,
            'KalturaUserRoleCondition': KalturaUserRoleCondition,
            'KalturaUserRoleListResponse': KalturaUserRoleListResponse,
            'KalturaValidateActiveEdgeCondition': KalturaValidateActiveEdgeCondition,
            'KalturaWidgetBaseFilter': KalturaWidgetBaseFilter,
            'KalturaWidgetListResponse': KalturaWidgetListResponse,
            'KalturaYahooSyndicationFeed': KalturaYahooSyndicationFeed,
            'KalturaAccessControlBaseFilter': KalturaAccessControlBaseFilter,
            'KalturaAccessControlProfileBaseFilter': KalturaAccessControlProfileBaseFilter,
            'KalturaAkamaiProvisionJobData': KalturaAkamaiProvisionJobData,
            'KalturaAkamaiUniversalProvisionJobData': KalturaAkamaiUniversalProvisionJobData,
            'KalturaAppTokenFilter': KalturaAppTokenFilter,
            'KalturaAssetBaseFilter': KalturaAssetBaseFilter,
            'KalturaAssetParamsBaseFilter': KalturaAssetParamsBaseFilter,
            'KalturaAssetResource': KalturaAssetResource,
            'KalturaBaseSyndicationFeedFilter': KalturaBaseSyndicationFeedFilter,
            'KalturaBulkUploadFilter': KalturaBulkUploadFilter,
            'KalturaCategoryBaseFilter': KalturaCategoryBaseFilter,
            'KalturaCategoryEntryBaseFilter': KalturaCategoryEntryBaseFilter,
            'KalturaControlPanelCommandFilter': KalturaControlPanelCommandFilter,
            'KalturaConversionProfileAssetParamsBaseFilter': KalturaConversionProfileAssetParamsBaseFilter,
            'KalturaConversionProfileBaseFilter': KalturaConversionProfileBaseFilter,
            'KalturaConvertCollectionJobData': KalturaConvertCollectionJobData,
            'KalturaConvertJobData': KalturaConvertJobData,
            'KalturaCountryCondition': KalturaCountryCondition,
            'KalturaDeliveryProfileFilter': KalturaDeliveryProfileFilter,
            'KalturaDeliveryProfileGenericRtmp': KalturaDeliveryProfileGenericRtmp,
            'KalturaEdgeServerNode': KalturaEdgeServerNode,
            'KalturaEndUserReportInputFilter': KalturaEndUserReportInputFilter,
            'KalturaEntryReferrerLiveStats': KalturaEntryReferrerLiveStats,
            'KalturaEntryResource': KalturaEntryResource,
            'KalturaEntryServerNodeBaseFilter': KalturaEntryServerNodeBaseFilter,
            'KalturaExtractMediaJobData': KalturaExtractMediaJobData,
            'KalturaIntegerField': KalturaIntegerField,
            'KalturaFieldCompareCondition': KalturaFieldCompareCondition,
            'KalturaStringField': KalturaStringField,
            'KalturaFieldMatchCondition': KalturaFieldMatchCondition,
            'KalturaFileAssetBaseFilter': KalturaFileAssetBaseFilter,
            'KalturaFileSyncResource': KalturaFileSyncResource,
            'KalturaGenericXsltSyndicationFeed': KalturaGenericXsltSyndicationFeed,
            'KalturaGeoDistanceCondition': KalturaGeoDistanceCondition,
            'KalturaGeoTimeLiveStats': KalturaGeoTimeLiveStats,
            'KalturaGroupUserBaseFilter': KalturaGroupUserBaseFilter,
            'KalturaIpAddressCondition': KalturaIpAddressCondition,
            'KalturaLiveAsset': KalturaLiveAsset,
            'KalturaLiveChannelSegmentBaseFilter': KalturaLiveChannelSegmentBaseFilter,
            'KalturaLiveParams': KalturaLiveParams,
            'KalturaMediaFlavorParams': KalturaMediaFlavorParams,
            'KalturaMediaInfoFilter': KalturaMediaInfoFilter,
            'KalturaMediaServerNode': KalturaMediaServerNode,
            'KalturaOperationResource': KalturaOperationResource,
            'KalturaPartnerFilter': KalturaPartnerFilter,
            'KalturaPermissionBaseFilter': KalturaPermissionBaseFilter,
            'KalturaPermissionItemBaseFilter': KalturaPermissionItemBaseFilter,
            'KalturaPostConvertJobData': KalturaPostConvertJobData,
            'KalturaPreviewRestriction': KalturaPreviewRestriction,
            'KalturaRecalculateResponseProfileCacheJobData': KalturaRecalculateResponseProfileCacheJobData,
            'KalturaRegexCondition': KalturaRegexCondition,
            'KalturaRemoteStorageResources': KalturaRemoteStorageResources,
            'KalturaResponseProfileFilter': KalturaResponseProfileFilter,
            'KalturaSearchComparableAttributeCondition': KalturaSearchComparableAttributeCondition,
            'KalturaSearchComparableCondition': KalturaSearchComparableCondition,
            'KalturaSearchMatchAttributeCondition': KalturaSearchMatchAttributeCondition,
            'KalturaSearchMatchCondition': KalturaSearchMatchCondition,
            'KalturaServerNodeFilter': KalturaServerNodeFilter,
            'KalturaSiteCondition': KalturaSiteCondition,
            'KalturaSshImportJobData': KalturaSshImportJobData,
            'KalturaStorageDeleteJobData': KalturaStorageDeleteJobData,
            'KalturaStorageExportJobData': KalturaStorageExportJobData,
            'KalturaStorageProfileFilter': KalturaStorageProfileFilter,
            'KalturaStringResource': KalturaStringResource,
            'KalturaUiConfFilter': KalturaUiConfFilter,
            'KalturaUploadTokenFilter': KalturaUploadTokenFilter,
            'KalturaUserEntryBaseFilter': KalturaUserEntryBaseFilter,
            'KalturaUserLoginDataBaseFilter': KalturaUserLoginDataBaseFilter,
            'KalturaUserRoleBaseFilter': KalturaUserRoleBaseFilter,
            'KalturaWidgetFilter': KalturaWidgetFilter,
            'KalturaAccessControlFilter': KalturaAccessControlFilter,
            'KalturaAccessControlProfileFilter': KalturaAccessControlProfileFilter,
            'KalturaAmazonS3StorageExportJobData': KalturaAmazonS3StorageExportJobData,
            'KalturaAmazonS3StorageProfileBaseFilter': KalturaAmazonS3StorageProfileBaseFilter,
            'KalturaAssetFilter': KalturaAssetFilter,
            'KalturaAssetParamsFilter': KalturaAssetParamsFilter,
            'KalturaBaseEntryCompareAttributeCondition': KalturaBaseEntryCompareAttributeCondition,
            'KalturaBaseEntryMatchAttributeCondition': KalturaBaseEntryMatchAttributeCondition,
            'KalturaBatchJobFilterExt': KalturaBatchJobFilterExt,
            'KalturaCategoryEntryFilter': KalturaCategoryEntryFilter,
            'KalturaCategoryFilter': KalturaCategoryFilter,
            'KalturaConversionProfileFilter': KalturaConversionProfileFilter,
            'KalturaConversionProfileAssetParamsFilter': KalturaConversionProfileAssetParamsFilter,
            'KalturaCoordinatesContextField': KalturaCoordinatesContextField,
            'KalturaCountryContextField': KalturaCountryContextField,
            'KalturaDataEntryCompareAttributeCondition': KalturaDataEntryCompareAttributeCondition,
            'KalturaDataEntryMatchAttributeCondition': KalturaDataEntryMatchAttributeCondition,
            'KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter': KalturaDeliveryProfileAkamaiAppleHttpManifestBaseFilter,
            'KalturaDeliveryProfileAkamaiHdsBaseFilter': KalturaDeliveryProfileAkamaiHdsBaseFilter,
            'KalturaDeliveryProfileAkamaiHttpBaseFilter': KalturaDeliveryProfileAkamaiHttpBaseFilter,
            'KalturaDeliveryProfileGenericAppleHttpBaseFilter': KalturaDeliveryProfileGenericAppleHttpBaseFilter,
            'KalturaDeliveryProfileGenericHdsBaseFilter': KalturaDeliveryProfileGenericHdsBaseFilter,
            'KalturaDeliveryProfileGenericHttpBaseFilter': KalturaDeliveryProfileGenericHttpBaseFilter,
            'KalturaDeliveryProfileGenericSilverLightBaseFilter': KalturaDeliveryProfileGenericSilverLightBaseFilter,
            'KalturaDeliveryProfileLiveAppleHttpBaseFilter': KalturaDeliveryProfileLiveAppleHttpBaseFilter,
            'KalturaDeliveryProfileRtmpBaseFilter': KalturaDeliveryProfileRtmpBaseFilter,
            'KalturaDeliveryServerNodeBaseFilter': KalturaDeliveryServerNodeBaseFilter,
            'KalturaDocumentEntryCompareAttributeCondition': KalturaDocumentEntryCompareAttributeCondition,
            'KalturaDocumentEntryMatchAttributeCondition': KalturaDocumentEntryMatchAttributeCondition,
            'KalturaEntryServerNodeFilter': KalturaEntryServerNodeFilter,
            'KalturaEvalBooleanField': KalturaEvalBooleanField,
            'KalturaEvalStringField': KalturaEvalStringField,
            'KalturaExternalMediaEntryCompareAttributeCondition': KalturaExternalMediaEntryCompareAttributeCondition,
            'KalturaExternalMediaEntryMatchAttributeCondition': KalturaExternalMediaEntryMatchAttributeCondition,
            'KalturaFileAssetFilter': KalturaFileAssetFilter,
            'KalturaGenericSyndicationFeedBaseFilter': KalturaGenericSyndicationFeedBaseFilter,
            'KalturaGoogleVideoSyndicationFeedBaseFilter': KalturaGoogleVideoSyndicationFeedBaseFilter,
            'KalturaGroupUserFilter': KalturaGroupUserFilter,
            'KalturaITunesSyndicationFeedBaseFilter': KalturaITunesSyndicationFeedBaseFilter,
            'KalturaIpAddressContextField': KalturaIpAddressContextField,
            'KalturaLiveChannelCompareAttributeCondition': KalturaLiveChannelCompareAttributeCondition,
            'KalturaLiveChannelMatchAttributeCondition': KalturaLiveChannelMatchAttributeCondition,
            'KalturaLiveChannelSegmentFilter': KalturaLiveChannelSegmentFilter,
            'KalturaLiveEntryCompareAttributeCondition': KalturaLiveEntryCompareAttributeCondition,
            'KalturaLiveEntryMatchAttributeCondition': KalturaLiveEntryMatchAttributeCondition,
            'KalturaLiveStreamAdminEntryCompareAttributeCondition': KalturaLiveStreamAdminEntryCompareAttributeCondition,
            'KalturaLiveStreamAdminEntryMatchAttributeCondition': KalturaLiveStreamAdminEntryMatchAttributeCondition,
            'KalturaLiveStreamEntryCompareAttributeCondition': KalturaLiveStreamEntryCompareAttributeCondition,
            'KalturaLiveStreamEntryMatchAttributeCondition': KalturaLiveStreamEntryMatchAttributeCondition,
            'KalturaMediaEntryCompareAttributeCondition': KalturaMediaEntryCompareAttributeCondition,
            'KalturaMediaEntryMatchAttributeCondition': KalturaMediaEntryMatchAttributeCondition,
            'KalturaMediaFlavorParamsOutput': KalturaMediaFlavorParamsOutput,
            'KalturaMixEntryCompareAttributeCondition': KalturaMixEntryCompareAttributeCondition,
            'KalturaMixEntryMatchAttributeCondition': KalturaMixEntryMatchAttributeCondition,
            'KalturaObjectIdField': KalturaObjectIdField,
            'KalturaPermissionFilter': KalturaPermissionFilter,
            'KalturaPermissionItemFilter': KalturaPermissionItemFilter,
            'KalturaPlayableEntryCompareAttributeCondition': KalturaPlayableEntryCompareAttributeCondition,
            'KalturaPlayableEntryMatchAttributeCondition': KalturaPlayableEntryMatchAttributeCondition,
            'KalturaPlaylistCompareAttributeCondition': KalturaPlaylistCompareAttributeCondition,
            'KalturaPlaylistMatchAttributeCondition': KalturaPlaylistMatchAttributeCondition,
            'KalturaServerFileResource': KalturaServerFileResource,
            'KalturaSshUrlResource': KalturaSshUrlResource,
            'KalturaTimeContextField': KalturaTimeContextField,
            'KalturaTubeMogulSyndicationFeedBaseFilter': KalturaTubeMogulSyndicationFeedBaseFilter,
            'KalturaUploadedFileTokenResource': KalturaUploadedFileTokenResource,
            'KalturaUserAgentCondition': KalturaUserAgentCondition,
            'KalturaUserAgentContextField': KalturaUserAgentContextField,
            'KalturaUserEmailContextField': KalturaUserEmailContextField,
            'KalturaUserEntryFilter': KalturaUserEntryFilter,
            'KalturaUserLoginDataFilter': KalturaUserLoginDataFilter,
            'KalturaUserRoleFilter': KalturaUserRoleFilter,
            'KalturaWebcamTokenResource': KalturaWebcamTokenResource,
            'KalturaYahooSyndicationFeedBaseFilter': KalturaYahooSyndicationFeedBaseFilter,
            'KalturaAdminUserBaseFilter': KalturaAdminUserBaseFilter,
            'KalturaAmazonS3StorageProfileFilter': KalturaAmazonS3StorageProfileFilter,
            'KalturaApiActionPermissionItemBaseFilter': KalturaApiActionPermissionItemBaseFilter,
            'KalturaApiParameterPermissionItemBaseFilter': KalturaApiParameterPermissionItemBaseFilter,
            'KalturaAssetParamsOutputBaseFilter': KalturaAssetParamsOutputBaseFilter,
            'KalturaDataEntryBaseFilter': KalturaDataEntryBaseFilter,
            'KalturaDeliveryProfileAkamaiAppleHttpManifestFilter': KalturaDeliveryProfileAkamaiAppleHttpManifestFilter,
            'KalturaDeliveryProfileAkamaiHdsFilter': KalturaDeliveryProfileAkamaiHdsFilter,
            'KalturaDeliveryProfileAkamaiHttpFilter': KalturaDeliveryProfileAkamaiHttpFilter,
            'KalturaDeliveryProfileGenericAppleHttpFilter': KalturaDeliveryProfileGenericAppleHttpFilter,
            'KalturaDeliveryProfileGenericHdsFilter': KalturaDeliveryProfileGenericHdsFilter,
            'KalturaDeliveryProfileGenericHttpFilter': KalturaDeliveryProfileGenericHttpFilter,
            'KalturaDeliveryProfileGenericSilverLightFilter': KalturaDeliveryProfileGenericSilverLightFilter,
            'KalturaDeliveryProfileLiveAppleHttpFilter': KalturaDeliveryProfileLiveAppleHttpFilter,
            'KalturaDeliveryProfileRtmpFilter': KalturaDeliveryProfileRtmpFilter,
            'KalturaDeliveryServerNodeFilter': KalturaDeliveryServerNodeFilter,
            'KalturaFlavorAssetBaseFilter': KalturaFlavorAssetBaseFilter,
            'KalturaFlavorParamsBaseFilter': KalturaFlavorParamsBaseFilter,
            'KalturaGenericSyndicationFeedFilter': KalturaGenericSyndicationFeedFilter,
            'KalturaGoogleVideoSyndicationFeedFilter': KalturaGoogleVideoSyndicationFeedFilter,
            'KalturaITunesSyndicationFeedFilter': KalturaITunesSyndicationFeedFilter,
            'KalturaLiveEntryServerNodeBaseFilter': KalturaLiveEntryServerNodeBaseFilter,
            'KalturaPlaylistBaseFilter': KalturaPlaylistBaseFilter,
            'KalturaQuizUserEntryBaseFilter': KalturaQuizUserEntryBaseFilter,
            'KalturaThumbAssetBaseFilter': KalturaThumbAssetBaseFilter,
            'KalturaThumbParamsBaseFilter': KalturaThumbParamsBaseFilter,
            'KalturaTubeMogulSyndicationFeedFilter': KalturaTubeMogulSyndicationFeedFilter,
            'KalturaYahooSyndicationFeedFilter': KalturaYahooSyndicationFeedFilter,
            'KalturaAdminUserFilter': KalturaAdminUserFilter,
            'KalturaApiActionPermissionItemFilter': KalturaApiActionPermissionItemFilter,
            'KalturaApiParameterPermissionItemFilter': KalturaApiParameterPermissionItemFilter,
            'KalturaAssetParamsOutputFilter': KalturaAssetParamsOutputFilter,
            'KalturaDataEntryFilter': KalturaDataEntryFilter,
            'KalturaDeliveryProfileGenericRtmpBaseFilter': KalturaDeliveryProfileGenericRtmpBaseFilter,
            'KalturaEdgeServerNodeBaseFilter': KalturaEdgeServerNodeBaseFilter,
            'KalturaFlavorAssetFilter': KalturaFlavorAssetFilter,
            'KalturaFlavorParamsFilter': KalturaFlavorParamsFilter,
            'KalturaGenericXsltSyndicationFeedBaseFilter': KalturaGenericXsltSyndicationFeedBaseFilter,
            'KalturaLiveEntryServerNodeFilter': KalturaLiveEntryServerNodeFilter,
            'KalturaLiveStreamAdminEntry': KalturaLiveStreamAdminEntry,
            'KalturaMediaServerNodeBaseFilter': KalturaMediaServerNodeBaseFilter,
            'KalturaPlaylistFilter': KalturaPlaylistFilter,
            'KalturaQuizUserEntryFilter': KalturaQuizUserEntryFilter,
            'KalturaThumbAssetFilter': KalturaThumbAssetFilter,
            'KalturaThumbParamsFilter': KalturaThumbParamsFilter,
            'KalturaDeliveryProfileGenericRtmpFilter': KalturaDeliveryProfileGenericRtmpFilter,
            'KalturaEdgeServerNodeFilter': KalturaEdgeServerNodeFilter,
            'KalturaFlavorParamsOutputBaseFilter': KalturaFlavorParamsOutputBaseFilter,
            'KalturaGenericXsltSyndicationFeedFilter': KalturaGenericXsltSyndicationFeedFilter,
            'KalturaLiveAssetBaseFilter': KalturaLiveAssetBaseFilter,
            'KalturaLiveParamsBaseFilter': KalturaLiveParamsBaseFilter,
            'KalturaMediaFlavorParamsBaseFilter': KalturaMediaFlavorParamsBaseFilter,
            'KalturaMediaServerNodeFilter': KalturaMediaServerNodeFilter,
            'KalturaMixEntryBaseFilter': KalturaMixEntryBaseFilter,
            'KalturaThumbParamsOutputBaseFilter': KalturaThumbParamsOutputBaseFilter,
            'KalturaFlavorParamsOutputFilter': KalturaFlavorParamsOutputFilter,
            'KalturaLiveAssetFilter': KalturaLiveAssetFilter,
            'KalturaLiveParamsFilter': KalturaLiveParamsFilter,
            'KalturaMediaFlavorParamsFilter': KalturaMediaFlavorParamsFilter,
            'KalturaMixEntryFilter': KalturaMixEntryFilter,
            'KalturaThumbParamsOutputFilter': KalturaThumbParamsOutputFilter,
            'KalturaLiveEntryBaseFilter': KalturaLiveEntryBaseFilter,
            'KalturaMediaFlavorParamsOutputBaseFilter': KalturaMediaFlavorParamsOutputBaseFilter,
            'KalturaLiveEntryFilter': KalturaLiveEntryFilter,
            'KalturaMediaFlavorParamsOutputFilter': KalturaMediaFlavorParamsOutputFilter,
            'KalturaLiveChannelBaseFilter': KalturaLiveChannelBaseFilter,
            'KalturaLiveStreamEntryBaseFilter': KalturaLiveStreamEntryBaseFilter,
            'KalturaLiveChannelFilter': KalturaLiveChannelFilter,
            'KalturaLiveStreamEntryFilter': KalturaLiveStreamEntryFilter,
            'KalturaLiveStreamAdminEntryBaseFilter': KalturaLiveStreamAdminEntryBaseFilter,
            'KalturaLiveStreamAdminEntryFilter': KalturaLiveStreamAdminEntryFilter,
        }

    # @return string
    def getName(self):
        return ''

