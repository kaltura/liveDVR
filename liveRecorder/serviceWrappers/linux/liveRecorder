#!/bin/bash
# An init.d script for running a Node.js process as a service using Forever as
# the process monitor. For more configuration options associated with Forever,
# see: https://github.com/nodejitsu/forever
#
# Live:              This shell script takes care of starting and stopping the Kaltura kLive Recorder service
#
# chkconfig: 2345 85 15
# description: Kaltura Live Recorder

### BEGIN INIT INFO
# Provides:          liveRecorder
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop Kaltura Live Recorder
### END INIT INFO

###
# extend callable functions from "functions" script
###

source /etc/rc.d/init.d/functions
. /opt/rh/python27/enable
APP_NAME=liveRecorder
SCRIPT_DIR=$(dirname $(readlink -f $0))
APPDIR=${SCRIPT_DIR}/../../
NAME=${APP_NAME}
APPLICATION_PATH=${APPDIR}/main.py
LOG_DIR="/var/log/${APP_NAME}"
PID_DIR="/var/run"
PIDFILE="${PID_DIR}/${NAME}.pid"
LOGFILE="${LOG_DIR}/${NAME}-service.log"

RETVAL=0

createFolders() {
	[ -d ${LOG_DIR} ] || mkdir -p ${LOG_DIR}
	SHARED_APP_DIR=$(python ${SCRIPT_DIR}/getRecordingBaseDir.py)
	echo "Creating folders in ${SHARED_APP_DIR} for ${HOSTNAME}"
	if [ -d  ${SHARED_APP_DIR} ] ; then 
		mkdir -p ${SHARED_APP_DIR}/${HOSTNAME}/{UploadTask/{incoming,failed,processing},ConcatenationTask/{failed,processing}}
		[ -L ${SHARED_APP_DIR}/${HOSTNAME}/ConcatenationTask/incoming ] || ln -s ${SHARED_APP_DIR}/incoming ${SHARED_APP_DIR}/${HOSTNAME}/ConcatenationTask/incoming
	else
		echo "can't find ${SHARED_APP_DIR}, cannot start, check mounts"
		exit 2 
	fi
}

start() {
    modules=(schedule m3u8 poster psutil Crypto)
    for module in "${modules[@]}"; do
         python -c "import $module"
        [ $? -ne 0 ] && echo "Missing $module pip module." && exit 3
    done
    createFolders || exit 4
    status -p ${PIDFILE}
    if [ $? -eq 0 ]; then
        echo "${NAME} already running"
    else
        echo "Starting ${NAME}"
        python ${APPLICATION_PATH} >> ${LOGFILE}  2>&1 &
        RETVAL=$?
        echo $! > ${PIDFILE}
        if [ ${RETVAL} -eq 0 ]; then
			echo "started ${NAME} with pid $(cat ${PIDFILE})"
		else
			echo "starting ${NAME} failed. please see ${LOGFILE}"
		fi
	fi
}

stop() {
    if [ -f ${PIDFILE} ]; then
        local pid=$( cat ${PIDFILE} )
        echo "Shutting down ${NAME}"
        kill ${pid} >> ${LOGFILE}
        status -p ${PIDFILE}
	    if [ $? -eq 0 ]; then
	        echo "failed to stop ${NAME}, ${pid}"
            killApp ${pid}
            return 1
        else
            echo "${NAME}, ${pid}, successfully stopped"
            rm -f ${PIDFILE}
        fi
    else
        echo "${NAME} is not running"
    fi
}

restart() {
    stop
    start
}

###
# check whether process is running based on /proc/[pid]/exe
###
my_status() {
    status -p ${PIDFILE}
    RETVAL=$?
}

killApp() {
	local pid=$1
    echo "Aggressively kill all ${NAME} process, $pid"
    pkill -f ${APPLICATION_PATH}
    rm -f ${PIDFILE}

}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        my_status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usage: {start|stop|status|restart}"
        exit 1
        ;;
esac
exit ${RETVAL}
