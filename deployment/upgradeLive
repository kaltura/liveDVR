#!/bin/bash
# For upgrade just type ./upgradeLive <version> [replace_script|downgrade|build|install_live_recorder] [ffmpeg build path] [ffmpeg version]
# in case 'build' is used as parameter then ffmpeg build path and ffmpeg version are mandatory

#set -e

PRODUCT_PATH=/opt/kaltura/liveController
USAGE="usage: upgradeLive [version] <replace_script|downgrade|build|install_live_recorder> <ffmpeg build path> <ffmpeg version>"
BUILD_USAGE="usage: upgradeLive [version] build [ffmpeg build path] [ffmpeg version]"
FFMPEG_BUILD_PATH=
FFMPEG_VERSION=


PARAM=install
if [ $# -eq 0 ]; then
   echo ${USAGE}
   exit 1
fi

VERSION=$1
mkdir -p ${PRODUCT_PATH}
cd ${PRODUCT_PATH}
if [ $# -gt 1 ]; then
    PARAM=$2
fi

if [ ${PARAM} = "build" ]; then
	if [ $# -gt 3 ]; then
		FFMPEG_BUILD_PATH=$3
		FFMPEG_VERSION=$4
	else
		echo "wrong number of parameters running install with build. ${BUILD_USAGE}"
		exit 2
	fi
fi

function download_version() {
	if [ ! -r v${VERSION}.tar.gz ]; then
        echo starting to download v${VERSION}.tar.gz
        wget https://github.com/kaltura/liveDVR/archive/v${VERSION}.tar.gz
    else
        echo "found v${VERSION}.tar.gz, skipping download"
    fi
}

function download_new_version() {
    download_version
    echo running unzip v${VERSION}.tar.gz
    tar -xvzf v${VERSION}.tar.gz
    mv liveDVR-${VERSION} ${VERSION}
    rm -f /opt/kaltura/liveController/v${VERSION}.tar.gz
}

function replace_upgrade_script() {
    download_version
    echo "extracting liveDVR-${VERSION}/deployment/upgradeLive from liveDVR-${VERSION}.tar.gz"
    tar -zxvf v${VERSION}.tar.gz liveDVR-${VERSION}/deployment/upgradeLive
    echo "copying  liveDVR-${VERSION}/deployment/upgradeLive to /etc/init.d/"
    cp -f liveDVR-${VERSION}/deployment/upgradeLive /etc/init.d/
    echo "removing artifacts..."
    rm -rf v${VERSION}.tar.gz*
    rm -rf liveDVR-${VERSION}
}

function install() {
	local __build=$1
	local __install_live_recorder=$2
	echo "staring install, build=${__build}, install_live_recorder=${__install_live_recorder}"
    mkdir -p latest
    cd ${VERSION}
    nvm install
    # move configuration files (liveController's and liveRecorder's) to latest version
    cp /opt/kaltura/liveController/configMapping.json /opt/kaltura/liveController/${VERSION}/common/config/
    cp /opt/kaltura/liveController/configMapping.ini /opt/kaltura/liveController/${VERSION}/liveRecorder/Config/
    npm install
    cd ..
    if [ "${__build}" = "yes" ]; then
        echo "starting to build binaries..."
        ${PRODUCT_PATH}/${VERSION}/build_scripts/build_ffmpg.sh ${FFMPEG_BUILD_PATH} ${FFMPEG_VERSION}
        ${PRODUCT_PATH}/${VERSION}/build_scripts/build_addons.sh ${PRODUCT_PATH} ${FFMPEG_BUILD_PATH}
        ${PRODUCT_PATH}/${VERSION}/build_ts2mp4_convertor.sh ${PRODUCT_PATH}/liveRecorder ${FFMPEG_BUILD_PATH}
        echo "finished building binaries"
    else
	    # download binaries from Jenkins
	    echo "### starting to download binaries"
	    /opt/kaltura/liveController/${VERSION}/deployment/get_bins "${VERSION}"
	    echo "### finished downloading binaries"
	fi
    # create symlinks to latest dir and process script
    if [ -r "latest" ] && [ -L "latest" ]; then
         echo "unlink latest"
         unlink latest
    fi
    ln -s /opt/kaltura/liveController/${VERSION} /opt/kaltura/liveController/latest
    if [ "${__install_live_recorder}" = "yes" ]; then
	      if [ ! -L /etc/init.d/liveRecorder ]; then
	            echo "Creating symlink to liveRecorder script at - /etc/init.d/liveRecorder"
	            ln -s /opt/kaltura/liveController/latest/liveRecorder/serviceWrappers/linux/liveRecorder /etc/init.d/liveRecorder
	      fi
          echo "starting installing liveRecoder prerequisites..."

          echo "need install python 2.7 separately as CentOS comes with different python version and installation break OS functionality"
          python --version
          # . ${PRODUCT_PATH}/${VERSION}/liveRecorder/installPython2.7.sh
	      local __modules=(schedule m3u8 poster psutil pycrypto)
          for module in "${__modules[@]}"; do
                python -c "import ${module}"
                [ $? -ne 0 ] && pip install ${module}
         done
         echo "finished installing liveRecorder prerequisites"
    fi
}

function downgrade() {
    if [ -L "latest" ]; then
        echo "unlink latest"
        unlink latest
    fi
    ln -s /opt/kaltura/liveController/${VERSION} /opt/kaltura/liveController/latest

}

function stop() {
   /etc/init.d/kLiveController stop
   if [ -r /etc/init.d/liveRecorder ]; then
        /etc/init.d/liveRecorder stop
   fi
}

function start() {
    if [ ! -L /etc/init.d/kLiveController ]; then
            echo "Creating symlink to kLiveController script at - /etc/init.d/kLiveController"
            ln -s /opt/kaltura/liveController/latest/serviceWrappers/linux/kLiveController /etc/init.d/kLiveController
    fi
    # start nginx (web server), liveController and liveRecorder
    echo "starting liveController..."
    /etc/init.d/kLiveController start
    sleep 5
    echo "starting nginx..."
    /opt/kaltura/liveController/${VERSION}/packager/bin/run_nginx.sh
    if [ -r /etc/init.d/liveRecorder ]; then
          echo "starting liveRecorder..."
          /etc/init.d/liveRecorder start
    else
        echo "this machine doesn't run liveRecorder"
    fi
}

function main()
{
	echo "starting upgradeLive..."
	echo "upgradeLive ${VERSION} ${PARAM} ${FFMPEG_BUILD_PATH} ${FFMPEG_VERSION}"

	if [ ! -d "${VERSION}" ] || [ "${PARAM}" != "install" ] ; then

		# check if the version dir exists before downgrading, otherwise perform regular installation
		# if configMapping.json changed from ${VERSION} to current installed version the file should be updated
		# manually
		local __build="no"
		local __install_live_recorder="no"
		[ "${PARAM}" = "downgrade" ] && [ ! -r ${VERSION} ] && PARAM="install"
		if [ "${PARAM}" = "build" ]; then
		     __build="yes"
		     PARAM="install"
		fi
		if [ "${PARAM}" = "install_live_recorder" ]; then
		    __install_live_recorder="yes"
		    PARAM="install"
		fi

	    case ${PARAM} in
	        install)
	            echo "upgrading liveController to v${VERSION}"
	            stop
	            download_new_version
	            install ${__build} ${__install_live_recorder}
	            start
	            ;;
	        replace_script)
	            echo "replacing upgradeLive script with v${VERSION}"
	            replace_upgrade_script ${VERSION}
	            exit 0
	            ;;
	        downgrade)
	            echo "downgrading liveController to v${VERSION}"
	            stop
	            downgrade
	            start
	            ;;
	                *)
	            echo ${USAGE}
	            exit 2
	            ;;
	    esac

		echo "upgradeLive finished..."

	else
	    echo "found v${VERSION}, no action done. ${USAGE}"
	fi
}

main
