#!/bin/bash
# For upgrade just type ./upgradeLive <version>
# This uploads NVM
set -e
USAGE="usage: upgradeLive [version] <replace_script|downgrade>"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" || (echo "nvm not found in $NVM_DIR, this is a must, Exiting!" ; exit 1 )
PARAM=install
if [ $# -eq 0 ]; then
   echo ${USAGE}
   exit 1
fi
VERSION=$1
cd /opt/kaltura/liveController
if [ $# -eq 2 ]; then
        PARAM=$2
fi

function download_new_version() {
	rm -rf "v$VERSION.tar.gz.1*"
    echo starting to download  https://github.com/kaltura/liveDVR/archive/v$VERSION.tar.gz
    wget https://github.com/kaltura/liveDVR/archive/v$VERSION.tar.gz
    echo running unzip v1.14.6.tar.gz
    tar -xvzf v$VERSION.tar.gz
    mv liveDVR-$VERSION $VERSION
    rm -f /opt/kaltura/liveController/v$VERSION.tar.gz
}

function replace_upgrade_script() {
	echo "replacing upgradeLive script with v$VERSION"
    if [ ! -r v$VERSION.tar.gz ]; then
        echo "starting to download v$VERSION.tar.gz"
        wget https://github.com/kaltura/liveDVR/archive/v$VERSION.tar.gz
    else
        echo "v$VERSION.tar.gz found, skiping download"
    fi
    echo "extracting liveDVR-$VERSION/deployment/upgradeLive from liveDVR-$VERSION.tar.gz"
    tar -zxvf v$VERSION.tar.gz liveDVR-$VERSION/deployment/upgradeLive
    echo "copying  liveDVR-$VERSION/deployment/upgradeLive to /etc/init.d/"
    cp -f liveDVR-$VERSION/deployment/upgradeLive /etc/init.d/
    echo "removing artifacts..."
    rm -rf v$VERSION.tar.gz*
    rm -rf liveDVR-$VERSION


    #rm -rf "v$VERSION.tar.gz.*"
    #echo "replacing upgradeLive script with v$VERSION"
    #wget https://github.com/kaltura/liveDVR/archive/v$VERSION.tar.gz
    #tar -zxvf v$VERSION.tar.gz liveDVR-$VERSION/deployment/upgradeLive
    #echo "copying v$VERSION/deployment/upgradeLive to /etc/init.d/"
    #cp -f liveDVR-$VERSION/deployment/upgradeLive /etc/init.d/
    #echo "removing artifacts..."
    #rm -rf v$VERSION.tar.gz*
    #rm -rf liveDVR-$VERSION
}

function install() {
    cd $VERSION
    nvm install
    # move configuration files (liveController's and liveRecorder's) to latest version
    cp /opt/kaltura/liveController/configMapping.json /opt/kaltura/liveController/$VERSION/common/config/
    cp /opt/kaltura/liveController/configMapping.ini /opt/kaltura/liveController/$VERSION/liveRecorder/Config/
    npm install
    cd ..
    # download binaries from Jenkins
    echo "### starting to download binaries"
    /opt/kaltura/liveController/$VERSION/deployment/get_bins "$VERSION"
    echo "### finished downloading binaries"
    # create symlinks to latest dir and process script
    if [ -L "latest" ]; then
         echo "unlink latest"
         unlink latest
    fi
    ln -s /opt/kaltura/liveController/$VERSION /opt/kaltura/liveController/latest

}

function downgrade() {
    if [ -L "latest" ]; then
        echo "unlink latest"
        unlink latest
    fi
    ln -s /opt/kaltura/liveController/$VERSION /opt/kaltura/liveController/latest

}

function stop() {
   /etc/init.d/kLiveController stop
   if [ -r /etc/init.d/LiveRecorder ]; then
        /etc/init.d/LiveRecorder stop
   fi
}

function start() {
    if [ ! -L /etc/init.d/kLiveController ]; then
            echo "Creating symlink to kLiveController script at - /etc/init.d/kLiveController"
            ln -s /opt/kaltura/liveController/latest/serviceWrappers/linux/kLiveController /etc/init.d/kLiveController
    fi
    # start nginx (web server), liveController and liveRecorder
    echo "starting liveController..."
    /etc/init.d/kLiveController start
    sleep 5
    echo "starting nginx..."
    /opt/kaltura/liveController/$VERSION/packager/bin/run_nginx.sh
    if [ -r /etc/init.d/LiveRecorder ]; then
          if [ ! -L /etc/init.d/LiveRecorder ]; then
                echo "Creating symlink to LiveRecorder script at - /etc/init.d/LiveRecorder"
                ln -s /opt/kaltura/liveController/latest/liveRecorder/serviceWrappers/linux/LiveRecorder /etc/init.d/LiveRecorder
          fi
          echo "starting liveRecorder..."
          /etc/init.d/liveRecorder start
    else
        echo "this machine doesn't run liveRecorder"
    fi
}

if [ ! -d "$VERSION" ] || [ "$PARAM" != "install" ] ; then

    case $PARAM in
        install)
            echo "upgrading liveController to v${VERSION}"
            stop
            download_new_version
            install
            start
            ;;
        replace_script)
            echo "replacing upgradeLive script to v${VERSION}"
            replace_upgrade_script $VERSION
            exit 0
            ;;
        downgrade)
            echo "downgrading liveController to v${VERSION}"
            stop
            downgrade
            start
            ;;
                *)
            echo ${USAGE}
            exit 2
            ;;
    esac

else
    echo "found v${VERSION}, no action done. ${USAGE}"
fi
